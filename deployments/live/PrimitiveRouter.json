{
  "address": "0x9264416B621054e16fAB8d6423b5a1e354D19fEc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "connectors",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "registered",
          "type": "bool[]"
        }
      ],
      "name": "RegisteredConnectors",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "options",
          "type": "address[]"
        }
      ],
      "name": "RegisteredOptions",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "apiVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "connector",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRegisteredConnector",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "option",
          "type": "address"
        }
      ],
      "name": "getRegisteredOption",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "halt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "connectors",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "isValid",
          "type": "bool[]"
        }
      ],
      "name": "setRegisteredConnectors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "optionAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRegisteredOptions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFromCaller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "transferFromCallerToReceiver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2b9fe00b030e955ddb8095583b8fa56478d8283788abd8d750c09fa188e1049a",
  "receipt": {
    "to": null,
    "from": "0xaF31D3C2972F62Eb08F96a1Fe29f579d61b4294D",
    "contractAddress": "0x9264416B621054e16fAB8d6423b5a1e354D19fEc",
    "transactionIndex": 46,
    "gasUsed": "1667681",
    "logsBloom": "0x
    "blockHash": "0x44eb3fa114d850e746ae0233226fcd6651041de78672a54a6bafe3d0f86f2b28",
    "transactionHash": "0x2b9fe00b030e955ddb8095583b8fa56478d8283788abd8d750c09fa188e1049a",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 12007220,
        "transactionHash": "0x2b9fe00b030e955ddb8095583b8fa56478d8283788abd8d750c09fa188e1049a",
        "address": "0x9264416B621054e16fAB8d6423b5a1e354D19fEc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000af31d3c2972f62eb08f96a1fe29f579d61b4294d"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x44eb3fa114d850e746ae0233226fcd6651041de78672a54a6bafe3d0f86f2b28"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 12007220,
        "transactionHash": "0x2b9fe00b030e955ddb8095583b8fa56478d8283788abd8d750c09fa188e1049a",
        "address": "0x9264416B621054e16fAB8d6423b5a1e354D19fEc",
        "topics": [
          "0x908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6",
          "0x000000000000000000000000af31d3c2972f62eb08f96a1fe29f579d61b4294d"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x44eb3fa114d850e746ae0233226fcd6651041de78672a54a6bafe3d0f86f2b28"
      }
    ],
    "blockNumber": 12007220,
    "cumulativeGasUsed": "4974311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x16274044dab9635Df2B5AeAF7CeCb5f381c71680"
  ],
  "solcInputHash": "c9dcfba636be70a61fb642f1ed49c33f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"connectors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"registered\",\"type\":\"bool[]\"}],\"name\":\"RegisteredConnectors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"options\",\"type\":\"address[]\"}],\"name\":\"RegisteredOptions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRegisteredConnector\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"}],\"name\":\"getRegisteredOption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"connectors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isValid\",\"type\":\"bool[]\"}],\"name\":\"setRegisteredConnectors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"optionAddresses\",\"type\":\"address[]\"}],\"name\":\"setRegisteredOptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transferFromCallerToReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"apiVersion()\":{\"details\":\"For the npm package: @primitivefi/v1-connectors         For the repository: github.com/primitivefinance/primitive-v1-connectors\",\"returns\":{\"_0\":\"The apiVersion string.\"}},\"executeCall(address,bytes)\":{\"params\":{\"connector\":\"The Primitive Connector module to call.\",\"params\":\"The encoded function data to use.\"}},\"getRegisteredConnector(address)\":{\"params\":{\"connector\":\"The address of the Connector contract to check if registered.\"}},\"getRegisteredOption(address)\":{\"params\":{\"option\":\"The address of the Option to check if registered.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRegisteredConnectors(address[],bool[])\":{\"details\":\"Sets `connectors` to `isValid` in the whitelisted connectors mapping.\",\"params\":{\"connectors\":\"The array of option addresses to update.\",\"isValid\":\"Whether or not the optionAddress is registered.\"}},\"setRegisteredOptions(address[])\":{\"details\":\"Sets `optionAddresses` to true in the whitelisted options mapping, if from Registry.\",\"params\":{\"optionAddresses\":\"The array of option addresses to update.\"}},\"transferFromCaller(address,uint256)\":{\"params\":{\"amount\":\"The amount of ERC20 to transfer.\",\"token\":\"The address of the ERC20.\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded.\"}},\"transferFromCallerToReceiver(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of ERC20 to transfer.\",\"token\":\"The address of the ERC20.\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"apiVersion()\":{\"notice\":\"Returns the NPM package version and github version of this contract.\"},\"executeCall(address,bytes)\":{\"notice\":\"Executes a call with `params` to the target `connector` contract from `_route`.\"},\"getCaller()\":{\"notice\":\"Returns the `_CALLER` which is set to `_msgSender()` during an `executeCall` invocation.\"},\"getRegisteredConnector(address)\":{\"notice\":\"Returns a bool if `connector` is registered or not.\"},\"getRegisteredOption(address)\":{\"notice\":\"Returns a bool if `option` is registered or not.\"},\"getRegistry()\":{\"notice\":\"Returns the Primitive Registry contract address.\"},\"getRoute()\":{\"notice\":\"Returns the Route contract which executes functions on behalf of this contract.\"},\"getWeth()\":{\"notice\":\"Returns the IWETH contract address.\"},\"halt()\":{\"notice\":\"Halts use of `executeCall`, and other functions that change state.\"},\"setRegisteredConnectors(address[],bool[])\":{\"notice\":\"Allows the `owner` to set whitelisted connector contracts.\"},\"setRegisteredOptions(address[])\":{\"notice\":\"Checks option against Primitive Registry. If from Registry, registers as true.         NOTE: Purposefully does not have `onlyOwner` modifier.\"},\"transferFromCaller(address,uint256)\":{\"notice\":\"Transfers ERC20 tokens from the executing `_CALLER` to the executing `_CONNECTOR`.\"},\"transferFromCallerToReceiver(address,uint256,address)\":{\"notice\":\"Transfers ERC20 tokens from the executing `_CALLER` to an arbitrary address.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/PrimitiveRouter.sol\":\"PrimitiveRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function pauseDeployments() external;\\r\\n\\r\\n    function unpauseDeployments() external;\\r\\n\\r\\n    function deployOption(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function setOptionFactory(address optionFactory_) external;\\r\\n\\r\\n    function setRedeemFactory(address redeemFactory_) external;\\r\\n\\r\\n    function optionFactory() external returns (address);\\r\\n\\r\\n    function redeemFactory() external returns (address);\\r\\n\\r\\n    function verifyToken(address tokenAddress) external;\\r\\n\\r\\n    function verifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function unverifyToken(address tokenAddress) external;\\r\\n\\r\\n    function unverifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function isVerifiedOption(address optionAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x02aeb84e8b748674bc31707899158885066923f203e7a3a58cee3c68a49ec96f\"},\"contracts/PrimitiveRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Router\\r\\n * @author  Primitive\\r\\n * @notice  Contract to execute Primitive Connector functions.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {\\r\\n    IPrimitiveRouter,\\r\\n    IRegistry,\\r\\n    IOption,\\r\\n    IERC20,\\r\\n    IWETH\\r\\n} from \\\"./interfaces/IPrimitiveRouter.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice  Used to execute calls on behalf of the Router contract.\\r\\n * @dev     Changes `msg.sender` context so the Router is not `msg.sender`.\\r\\n */\\r\\ncontract Route {\\r\\n    function executeCall(address target, bytes calldata params) external payable {\\r\\n        (bool success, bytes memory returnData) = target.call.value(msg.value)(params);\\r\\n        require(success, \\\"Route: EXECUTION_FAIL\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract PrimitiveRouter is IPrimitiveRouter, Ownable, Pausable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data.\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows.\\r\\n\\r\\n    // Constants\\r\\n    address private constant _NO_CALLER = address(0x0); // Default state for `_CALLER`.\\r\\n\\r\\n    // Events\\r\\n    event Initialized(address indexed from); // Emmitted on deployment\\r\\n    event Executed(address indexed from, address indexed to, bytes params);\\r\\n    event RegisteredOptions(address[] indexed options);\\r\\n    event RegisteredConnectors(address[] indexed connectors, bool[] registered);\\r\\n\\r\\n    // State variables\\r\\n    IRegistry private _registry; // The Primitive Registry which deploys Option clones.\\r\\n    IWETH private _weth; // Canonical WETH9\\r\\n    Route private _route; // Intermediary to do connector.call() from.\\r\\n    address private _CONNECTOR = _NO_CALLER; // If _EXECUTING, the `connector` of the execute call param.\\r\\n    address private _CALLER = _NO_CALLER; // If _EXECUTING, the orginal `_msgSender()` of the execute call.\\r\\n    bool private _EXECUTING; // True if the `executeCall` function was called.\\r\\n\\r\\n    // Whitelisted mappings\\r\\n    mapping(address => bool) private _registeredConnectors;\\r\\n    mapping(address => bool) private _registeredOptions;\\r\\n\\r\\n    /**\\r\\n     * @notice  A mutex to use during an `execute` call.\\r\\n     * @dev     Checks to make sure the `_CONNECTOR` in state is the `msg.sender`.\\r\\n     *          Checks to make sure a `_CALLER` was set.\\r\\n     *          Fails if this modifier is triggered by an external call.\\r\\n     *          Fails if this modifier is triggered by calling a function without going through `executeCall`.\\r\\n     */\\r\\n    modifier isExec() {\\r\\n        require(_CONNECTOR == _msgSender(), \\\"Router: NOT_CONNECTOR\\\");\\r\\n        require(_CALLER != _NO_CALLER, \\\"Router: NO_CALLER\\\");\\r\\n        require(!_EXECUTING, \\\"Router: IN_EXECUTION\\\");\\r\\n        _EXECUTING = true;\\r\\n        _;\\r\\n        _EXECUTING = false;\\r\\n    }\\r\\n\\r\\n    // ===== Constructor =====\\r\\n\\r\\n    constructor(address weth_, address registry_) public {\\r\\n        require(address(_weth) == address(0x0), \\\"Router: INITIALIZED\\\");\\r\\n        _route = new Route();\\r\\n        _weth = IWETH(weth_);\\r\\n        _registry = IRegistry(registry_);\\r\\n        emit Initialized(_msgSender());\\r\\n    }\\r\\n\\r\\n    // ===== Pausability =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Halts use of `executeCall`, and other functions that change state.\\r\\n     */\\r\\n    function halt() external override onlyOwner {\\r\\n        if (paused()) {\\r\\n            _unpause();\\r\\n        } else {\\r\\n            _pause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ===== Registration =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Checks option against Primitive Registry. If from Registry, registers as true.\\r\\n     *          NOTE: Purposefully does not have `onlyOwner` modifier.\\r\\n     * @dev     Sets `optionAddresses` to true in the whitelisted options mapping, if from Registry.\\r\\n     * @param   optionAddresses The array of option addresses to update.\\r\\n     */\\r\\n    function setRegisteredOptions(address[] calldata optionAddresses)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 len = optionAddresses.length;\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            address option = optionAddresses[i];\\r\\n            require(isFromPrimitiveRegistry(IOption(option)), \\\"Router: EVIL_OPTION\\\");\\r\\n            _registeredOptions[option] = true;\\r\\n        }\\r\\n        emit RegisteredOptions(optionAddresses);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Allows the `owner` to set whitelisted connector contracts.\\r\\n     * @dev     Sets `connectors` to `isValid` in the whitelisted connectors mapping.\\r\\n     * @param   connectors The array of option addresses to update.\\r\\n     * @param   isValid Whether or not the optionAddress is registered.\\r\\n     */\\r\\n    function setRegisteredConnectors(address[] memory connectors, bool[] memory isValid)\\r\\n        public\\r\\n        override\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 len = connectors.length;\\r\\n        require(len == isValid.length, \\\"Router: LENGTHS\\\");\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            address connector = connectors[i];\\r\\n            bool status = isValid[i];\\r\\n            _registeredConnectors[connector] = status;\\r\\n        }\\r\\n        emit RegisteredConnectors(connectors, isValid);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Checks an option against the Primitive Registry.\\r\\n     * @param   option The IOption token to check.\\r\\n     * @return  Whether or not the option was deployed from the Primitive Registry.\\r\\n     */\\r\\n    function isFromPrimitiveRegistry(IOption option) internal view returns (bool) {\\r\\n        return (address(option) ==\\r\\n            _registry.getOptionAddress(\\r\\n                option.getUnderlyingTokenAddress(),\\r\\n                option.getStrikeTokenAddress(),\\r\\n                option.getBaseValue(),\\r\\n                option.getQuoteValue(),\\r\\n                option.getExpiryTime()\\r\\n            ) &&\\r\\n            address(option) != address(0));\\r\\n    }\\r\\n\\r\\n    // ===== Operations =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Transfers ERC20 tokens from the executing `_CALLER` to the executing `_CONNECTOR`.\\r\\n     * @param   token The address of the ERC20.\\r\\n     * @param   amount The amount of ERC20 to transfer.\\r\\n     * @return  Whether or not the transfer succeeded.\\r\\n     */\\r\\n    function transferFromCaller(address token, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        isExec\\r\\n        whenNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        IERC20(token).safeTransferFrom(\\r\\n            getCaller(), // Account to pull from\\r\\n            _msgSender(), // The connector\\r\\n            amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Transfers ERC20 tokens from the executing `_CALLER` to an arbitrary address.\\r\\n     * @param   token The address of the ERC20.\\r\\n     * @param   amount The amount of ERC20 to transfer.\\r\\n     * @return  Whether or not the transfer succeeded.\\r\\n     */\\r\\n    function transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) public override isExec whenNotPaused returns (bool) {\\r\\n        IERC20(token).safeTransferFrom(\\r\\n            getCaller(), // Account to pull from\\r\\n            receiver,\\r\\n            amount\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ===== Execute =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Executes a call with `params` to the target `connector` contract from `_route`.\\r\\n     * @param   connector The Primitive Connector module to call.\\r\\n     * @param   params The encoded function data to use.\\r\\n     */\\r\\n    function executeCall(address connector, bytes calldata params)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(_registeredConnectors[connector], \\\"Router: INVALID_CONNECTOR\\\");\\r\\n        _CALLER = _msgSender();\\r\\n        _CONNECTOR = connector;\\r\\n        _route.executeCall.value(msg.value)(connector, params);\\r\\n        _CALLER = _NO_CALLER;\\r\\n        _CONNECTOR = _NO_CALLER;\\r\\n        emit Executed(_msgSender(), connector, params);\\r\\n    }\\r\\n\\r\\n    // ===== Fallback =====\\r\\n\\r\\n    receive() external payable whenNotPaused {\\r\\n        assert(_msgSender() == address(_weth)); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the IWETH contract address.\\r\\n     */\\r\\n    function getWeth() public view override returns (IWETH) {\\r\\n        return _weth;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Route contract which executes functions on behalf of this contract.\\r\\n     */\\r\\n    function getRoute() public view override returns (address) {\\r\\n        return address(_route);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the `_CALLER` which is set to `_msgSender()` during an `executeCall` invocation.\\r\\n     */\\r\\n    function getCaller() public view override returns (address) {\\r\\n        return _CALLER;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Primitive Registry contract address.\\r\\n     */\\r\\n    function getRegistry() public view override returns (IRegistry) {\\r\\n        return _registry;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns a bool if `option` is registered or not.\\r\\n     * @param   option The address of the Option to check if registered.\\r\\n     */\\r\\n    function getRegisteredOption(address option) external view override returns (bool) {\\r\\n        return _registeredOptions[option];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns a bool if `connector` is registered or not.\\r\\n     * @param   connector The address of the Connector contract to check if registered.\\r\\n     */\\r\\n    function getRegisteredConnector(address connector)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _registeredConnectors[connector];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the NPM package version and github version of this contract.\\r\\n     * @dev     For the npm package: @primitivefi/v1-connectors\\r\\n     *          For the repository: github.com/primitivefinance/primitive-v1-connectors\\r\\n     * @return  The apiVersion string.\\r\\n     */\\r\\n    function apiVersion() public pure override returns (string memory) {\\r\\n        return \\\"2.0.0\\\";\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7501cbf6185144c591cbfcde1a9719da1ebd84c51a38505ff0e08fb7550c6f6f\"},\"contracts/interfaces/IPrimitiveRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IOption,\\r\\n    IERC20\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {\\r\\n    IRegistry\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\\\";\\r\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveRouter {\\r\\n    // ===== Admin =====\\r\\n\\r\\n    function halt() external;\\r\\n\\r\\n    // ===== Registration =====\\r\\n    function setRegisteredOptions(address[] calldata optionAddresses)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function setRegisteredConnectors(\\r\\n        address[] calldata connectors,\\r\\n        bool[] calldata isValid\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Operations =====\\r\\n\\r\\n    function transferFromCaller(address token, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Execution =====\\r\\n\\r\\n    function executeCall(address connector, bytes calldata params) external payable;\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getRoute() external view returns (address);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getRegistry() external view returns (IRegistry);\\r\\n\\r\\n    function getRegisteredOption(address option) external view returns (bool);\\r\\n\\r\\n    function getRegisteredConnector(address connector) external view returns (bool);\\r\\n\\r\\n    function apiVersion() external pure returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xaac255f6b4eafe624838014095e6b86ccf32e1993df339455cf662b9a0c1b277\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x37c262ad0aadf51acdff4ee5711841e0beb6030f9d750e23943b2d759144af0c\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80638da5cb5b11610095578063a3e3808f11610064578063a3e3808f14610510578063ab470f0514610549578063bca8c7b51461055e578063c5eaa129146105dc578063f2fde38b146105f15761017f565b80638da5cb5b14610452578063921875de1461046757806394669bf51461049a578063a2e49f17146104cd5761017f565b80635c975abb116100d15780635c975abb146103985780635ed7ca5b146103ad5780636a595ca4146103c2578063715018a61461043d5761017f565b8063107c279f1461018457806325829410146101b5578063474855281461023f5780635ab1bd53146103835761017f565b3661017f57600054600160a01b900460ff1615610159576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6003546001600160a01b031661016d610624565b6001600160a01b03161461017d57fe5b005b600080fd5b34801561019057600080fd5b50610199610628565b604080516001600160a01b039092168252519081900360200190f35b3480156101c157600080fd5b506101ca610637565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102045781810151838201526020016101ec565b50505050905090810190601f1680156102315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024b57600080fd5b5061036f6004803603604081101561026257600080fd5b810190602081018135600160201b81111561027c57600080fd5b82018360208201111561028e57600080fd5b803590602001918460208302840111600160201b831117156102af57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102fe57600080fd5b82018360208201111561031057600080fd5b803590602001918460208302840111600160201b8311171561033157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610656945050505050565b604080519115158252519081900360200190f35b34801561038f57600080fd5b50610199610829565b3480156103a457600080fd5b5061036f610838565b3480156103b957600080fd5b5061017d610848565b3480156103ce57600080fd5b5061036f600480360360208110156103e557600080fd5b810190602081018135600160201b8111156103ff57600080fd5b82018360208201111561041157600080fd5b803590602001918460208302840111600160201b8311171561043257600080fd5b5090925090506108c4565b34801561044957600080fd5b5061017d6109bb565b34801561045e57600080fd5b50610199610a5d565b34801561047357600080fd5b5061036f6004803603602081101561048a57600080fd5b50356001600160a01b0316610a6c565b3480156104a657600080fd5b5061036f600480360360208110156104bd57600080fd5b50356001600160a01b0316610a8a565b3480156104d957600080fd5b5061036f600480360360608110156104f057600080fd5b506001600160a01b03813581169160208101359160409091013516610aa8565b34801561051c57600080fd5b5061036f6004803603604081101561053357600080fd5b506001600160a01b038135169060200135610c4f565b34801561055557600080fd5b50610199610dfc565b61017d6004803603604081101561057457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561059e57600080fd5b8201836020820111156105b057600080fd5b803590602001918460018302840111600160201b831117156105d157600080fd5b509092509050610e0b565b3480156105e857600080fd5b5061019961102c565b3480156105fd57600080fd5b5061017d6004803603602081101561061457600080fd5b50356001600160a01b031661103b565b3390565b6003546001600160a01b031690565b6040805180820190915260058152640322e302e360dc1b602082015290565b6000610660610624565b6000546001600160a01b039081169116146106b0576040805162461bcd60e51b8152602060048201819052602482015260008051602061185b833981519152604482015290519081900360640190fd5b8251825181146106f9576040805162461bcd60e51b815260206004820152600f60248201526e526f757465723a204c454e4754485360881b604482015290519081900360640190fd5b60005b8181101561076957600085828151811061071257fe5b60200260200101519050600085838151811061072a57fe5b6020908102919091018101516001600160a01b03939093166000908152600790915260409020805460ff191692151592909217909155506001016106fc565b508360405180828051906020019060200280838360005b83811015610798578181015183820152602001610780565b5050505090500191505060405180910390207fddf79900a722be2ea62e189e14c509d39f49d84e9ab1030870e2f2ba23b88e3c846040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561080c5781810151838201526020016107f4565b505050509050019250505060405180910390a25060019392505050565b6002546001600160a01b031690565b600054600160a01b900460ff1690565b610850610624565b6000546001600160a01b039081169116146108a0576040805162461bcd60e51b8152602060048201819052602482015260008051602061185b833981519152604482015290519081900360640190fd5b6108a8610838565b156108ba576108b5611133565b6108c2565b6108c26111db565b565b600081815b8181101561096c5760008585838181106108df57fe5b905060200201356001600160a01b031690506108fa81611269565b610941576040805162461bcd60e51b81526020600482015260136024820152722937baba32b91d1022ab24a62fa7a82a24a7a760691b604482015290519081900360640190fd5b6001600160a01b03166000908152600860205260409020805460ff19166001908117909155016108c9565b508383604051808383602002808284376040519201829003822094507fd5b92501d17df70c95cffab7a24e434673e899acd72ca2031ae679aadf22d14193506000925050a25060019392505050565b6109c3610624565b6000546001600160a01b03908116911614610a13576040805162461bcd60e51b8152602060048201819052602482015260008051602061185b833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6001600160a01b031660009081526007602052604090205460ff1690565b6001600160a01b031660009081526008602052604090205460ff1690565b6000610ab2610624565b6005546001600160a01b03908116911614610b0c576040805162461bcd60e51b81526020600482015260156024820152742937baba32b91d102727aa2fa1a7a72722a1aa27a960591b604482015290519081900360640190fd5b6006546001600160a01b0316610b5d576040805162461bcd60e51b81526020600482015260116024820152702937baba32b91d102727afa1a0a62622a960791b604482015290519081900360640190fd5b600654600160a01b900460ff1615610bb3576040805162461bcd60e51b81526020600482015260146024820152732937baba32b91d1024a72fa2ac22a1aaaa24a7a760611b604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b9081179091556000540460ff1615610c15576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610c38610c20610dfc565b6001600160a01b03861690848663ffffffff61155616565b5060016006805460ff60a01b191690559392505050565b6000610c59610624565b6005546001600160a01b03908116911614610cb3576040805162461bcd60e51b81526020600482015260156024820152742937baba32b91d102727aa2fa1a7a72722a1aa27a960591b604482015290519081900360640190fd5b6006546001600160a01b0316610d04576040805162461bcd60e51b81526020600482015260116024820152702937baba32b91d102727afa1a0a62622a960791b604482015290519081900360640190fd5b600654600160a01b900460ff1615610d5a576040805162461bcd60e51b81526020600482015260146024820152732937baba32b91d1024a72fa2ac22a1aaaa24a7a760611b604482015290519081900360640190fd5b6006805460ff60a01b1916600160a01b9081179091556000540460ff1615610dbc576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610de7610dc7610dfc565b610dcf610624565b6001600160a01b03861691908563ffffffff61155616565b50506006805460ff60a01b1916905550600190565b6006546001600160a01b031690565b600054600160a01b900460ff1615610e5d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b03831660009081526007602052604090205460ff16610eca576040805162461bcd60e51b815260206004820152601960248201527f526f757465723a20494e56414c49445f434f4e4e4543544f5200000000000000604482015290519081900360640190fd5b610ed2610624565b600680546001600160a01b039283166001600160a01b03199182161790915560058054868416921682179055600480546040805163bca8c7b560e01b8152928301938452602483019081526044830186905293169263bca8c7b5923492889288928892909190606401848480828437600081840152601f19601f8201169050808301925050509450505050506000604051808303818588803b158015610f7757600080fd5b505af1158015610f8b573d6000803e3d6000fd5b5050600680546001600160a01b03199081169091556005805490911690555050506001600160a01b038316610fbe610624565b6001600160a01b03167fbd0123ee3a8dad3bc2777bd706a3d4b7b89a6f4f7d175b1e00e36558e94d83ab848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a3505050565b6004546001600160a01b031690565b611043610624565b6000546001600160a01b03908116911614611093576040805162461bcd60e51b8152602060048201819052602482015260008051602061185b833981519152604482015290519081900360640190fd5b6001600160a01b0381166110d85760405162461bcd60e51b81526004018080602001828103825260268152602001806118356026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff16611188576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6111be610624565b604080516001600160a01b039092168252519081900360200190a1565b600054600160a01b900460ff161561122d576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111be610624565b6000600260009054906101000a90046001600160a01b03166001600160a01b031663b000e9ec836001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d60208110156112f257600080fd5b50516040805163a1a4076160e01b815290516001600160a01b0387169163a1a40761916004808301926020929190829003018186803b15801561133457600080fd5b505afa158015611348573d6000803e3d6000fd5b505050506040513d602081101561135e57600080fd5b5051604080516316b2542760e31b815290516001600160a01b0388169163b592a138916004808301926020929190829003018186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d60208110156113ca57600080fd5b505160408051627f0cfd60e11b815290516001600160a01b0389169162fe19fa916004808301926020929190829003018186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d602081101561143457600080fd5b50516040805162972d6f60e61b815290516001600160a01b038a16916325cb5bc0916004808301926020929190829003018186803b15801561147557600080fd5b505afa158015611489573d6000803e3d6000fd5b505050506040513d602081101561149f57600080fd5b5051604080516001600160e01b031960e089901b1681526001600160a01b039687166004820152949095166024850152604484019290925260648301526084820152905160a4808301926020929190829003018186803b15801561150257600080fd5b505afa158015611516573d6000803e3d6000fd5b505050506040513d602081101561152c57600080fd5b50516001600160a01b03838116911614801561155057506001600160a01b03821615155b92915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526115b09085906115b6565b50505050565b606061160b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661166c9092919063ffffffff16565b8051909150156116675780806020019051602081101561162a57600080fd5b50516116675760405162461bcd60e51b815260040180806020018281038252602a81526020018061187b602a913960400191505060405180910390fd5b505050565b606061167b8484600085611683565b949350505050565b606061168e8561182e565b6116df576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061171e5780518252601f1990920191602091820191016116ff565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611780576040519150601f19603f3d011682016040523d82523d6000602084013e611785565b606091505b5091509150811561179957915061167b9050565b8051156117a95780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117f35781810151838201526020016117db565b50505050905090810190601f1680156118205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3b15159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212206287fa0f5d79b5ec3a313b68f4591d0174758d0fb2789958d16ecbb54a49971f64736f6c63430006020033",
  "devdoc": {
    "methods": {
      "apiVersion()": {
        "details": "For the npm package: @primitivefi/v1-connectors         For the repository: github.com/primitivefinance/primitive-v1-connectors",
        "returns": {
          "_0": "The apiVersion string."
        }
      },
      "executeCall(address,bytes)": {
        "params": {
          "connector": "The Primitive Connector module to call.",
          "params": "The encoded function data to use."
        }
      },
      "getRegisteredConnector(address)": {
        "params": {
          "connector": "The address of the Connector contract to check if registered."
        }
      },
      "getRegisteredOption(address)": {
        "params": {
          "option": "The address of the Option to check if registered."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRegisteredConnectors(address[],bool[])": {
        "details": "Sets `connectors` to `isValid` in the whitelisted connectors mapping.",
        "params": {
          "connectors": "The array of option addresses to update.",
          "isValid": "Whether or not the optionAddress is registered."
        }
      },
      "setRegisteredOptions(address[])": {
        "details": "Sets `optionAddresses` to true in the whitelisted options mapping, if from Registry.",
        "params": {
          "optionAddresses": "The array of option addresses to update."
        }
      },
      "transferFromCaller(address,uint256)": {
        "params": {
          "amount": "The amount of ERC20 to transfer.",
          "token": "The address of the ERC20."
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded."
        }
      },
      "transferFromCallerToReceiver(address,uint256,address)": {
        "params": {
          "amount": "The amount of ERC20 to transfer.",
          "token": "The address of the ERC20."
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "apiVersion()": {
        "notice": "Returns the NPM package version and github version of this contract."
      },
      "executeCall(address,bytes)": {
        "notice": "Executes a call with `params` to the target `connector` contract from `_route`."
      },
      "getCaller()": {
        "notice": "Returns the `_CALLER` which is set to `_msgSender()` during an `executeCall` invocation."
      },
      "getRegisteredConnector(address)": {
        "notice": "Returns a bool if `connector` is registered or not."
      },
      "getRegisteredOption(address)": {
        "notice": "Returns a bool if `option` is registered or not."
      },
      "getRegistry()": {
        "notice": "Returns the Primitive Registry contract address."
      },
      "getRoute()": {
        "notice": "Returns the Route contract which executes functions on behalf of this contract."
      },
      "getWeth()": {
        "notice": "Returns the IWETH contract address."
      },
      "halt()": {
        "notice": "Halts use of `executeCall`, and other functions that change state."
      },
      "setRegisteredConnectors(address[],bool[])": {
        "notice": "Allows the `owner` to set whitelisted connector contracts."
      },
      "setRegisteredOptions(address[])": {
        "notice": "Checks option against Primitive Registry. If from Registry, registers as true.         NOTE: Purposefully does not have `onlyOwner` modifier."
      },
      "transferFromCaller(address,uint256)": {
        "notice": "Transfers ERC20 tokens from the executing `_CALLER` to the executing `_CONNECTOR`."
      },
      "transferFromCallerToReceiver(address,uint256,address)": {
        "notice": "Transfers ERC20 tokens from the executing `_CALLER` to an arbitrary address."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1282,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1358,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2497,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_registry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRegistry)1618"
      },
      {
        "astId": 2499,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_weth",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWETH)6957"
      },
      {
        "astId": 2501,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_route",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Route)2450"
      },
      {
        "astId": 2504,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_CONNECTOR",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2507,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_CALLER",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2509,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_EXECUTING",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2513,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_registeredConnectors",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2517,
        "contract": "contracts/PrimitiveRouter.sol:PrimitiveRouter",
        "label": "_registeredOptions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistry)1618": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)6957": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_contract(Route)2450": {
        "encoding": "inplace",
        "label": "contract Route",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}