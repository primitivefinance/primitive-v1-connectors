{
  "address": "0xBdaD00110d061D936289474dA2Ca8EB6A0a6532d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "primitiveRouter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "checkApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountRedeems",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        }
      ],
      "name": "closeFlashLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountRedeems",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        }
      ],
      "name": "closeFlashLongForETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        }
      ],
      "name": "flashCloseLongOptionsThenSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        }
      ],
      "name": "flashCloseLongOptionsThenSwapForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        }
      ],
      "name": "flashMintShortOptionsThenSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        }
      ],
      "name": "flashMintShortOptionsThenSwapWithETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "getClosePremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "getOpenPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "option",
          "type": "address"
        }
      ],
      "name": "getOptionPair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrimitiveRouter",
      "outputs": [
        {
          "internalType": "contract IPrimitiveRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        }
      ],
      "name": "openFlashLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "openFlashLongWithDAIPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOptions",
          "type": "uint256"
        }
      ],
      "name": "openFlashLongWithETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "openFlashLongWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0611829fdd2a3c739c64e7e7135770e1175bc06136e6aa93838c5fe038c45a4a",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0xBdaD00110d061D936289474dA2Ca8EB6A0a6532d",
    "transactionIndex": 4,
    "gasUsed": "3711474",
    "logsBloom": "0x
    "blockHash": "0xe08b8e5e85470d1ae6c0e8483f7bb987f52a3bd4880a2e8e7e9c73e5536fe37c",
    "transactionHash": "0x0611829fdd2a3c739c64e7e7135770e1175bc06136e6aa93838c5fe038c45a4a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 8193669,
        "transactionHash": "0x0611829fdd2a3c739c64e7e7135770e1175bc06136e6aa93838c5fe038c45a4a",
        "address": "0xc45c339313533a6c9B05184CD8B5486BC53F75Fb",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000bdad00110d061d936289474da2ca8eb6a0a6532d",
          "0x000000000000000000000000f830a17f27bbb95c229936c269673b8ed139ee3c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0xe08b8e5e85470d1ae6c0e8483f7bb987f52a3bd4880a2e8e7e9c73e5536fe37c"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 8193669,
        "transactionHash": "0x0611829fdd2a3c739c64e7e7135770e1175bc06136e6aa93838c5fe038c45a4a",
        "address": "0xBdaD00110d061D936289474dA2Ca8EB6A0a6532d",
        "topics": [
          "0x908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xe08b8e5e85470d1ae6c0e8483f7bb987f52a3bd4880a2e8e7e9c73e5536fe37c"
      }
    ],
    "blockNumber": 8193669,
    "cumulativeGasUsed": "3972389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc45c339313533a6c9B05184CD8B5486BC53F75Fb",
    "0xF830a17f27bbb95c229936C269673B8Ed139ee3c",
    "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
    "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F"
  ],
  "solcInputHash": "4eafe5de9a207718883f78196de74c47",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primitiveRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"checkApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRedeems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"closeFlashLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRedeems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"closeFlashLongForETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"flashCloseLongOptionsThenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"flashCloseLongOptionsThenSwapForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"}],\"name\":\"flashMintShortOptionsThenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"}],\"name\":\"flashMintShortOptionsThenSwapWithETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getClosePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getOpenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"option\",\"type\":\"address\"}],\"name\":\"getOptionPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitiveRouter\",\"outputs\":[{\"internalType\":\"contract IPrimitiveRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"}],\"name\":\"openFlashLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"openFlashLongWithDAIPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOptions\",\"type\":\"uint256\"}],\"name\":\"openFlashLongWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"openFlashLongWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"checkApproval(address,address)\":{\"details\":\"This contract does not hold funds, infinite approvals cannot be exploited for profit.\",\"params\":{\"spender\":\"The address to allow to spend `token`.\",\"token\":\"The token to approve spending for.\"}},\"closeFlashLong(address,uint256,uint256)\":{\"details\":\"Closes a longOptionToken position by flash swapping in redeemTokens,         closing the option, and paying back in underlyingTokens.\",\"params\":{\"amountRedeems\":\"The quantity of redeemTokens to borrow to close the options.\",\"minPayout\":\"The minimum payout of underlyingTokens sent out to the user.\",\"optionToken\":\"The address of the longOptionTokens to close.\"}},\"closeFlashLongForETH(address,uint256,uint256)\":{\"details\":\"Closes a longOptionToken position by flash swapping in redeemTokens,         closing the option, and paying back in underlyingTokens.\",\"params\":{\"amountRedeems\":\"The quantity of redeemTokens to borrow to close the options.\",\"minPayout\":\"The minimum payout of underlyingTokens sent out to the user.\",\"optionToken\":\"The address of the longOptionTokens to close.\"}},\"flashCloseLongOptionsThenSwap(address,uint256,uint256)\":{\"details\":\"Sends shortOptionTokens to _msgSender(), and pays back the UniswapV2Pair in underlyingTokens.\",\"params\":{\"flashLoanQuantity\":\"The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\",\"minPayout\":\"The minimum payout of underlyingTokens sent to the `to` address.\",\"optionAddress\":\"The address of the longOptionTokes to close.\"}},\"flashCloseLongOptionsThenSwapForETH(address,uint256,uint256)\":{\"details\":\"Sends shortOptionTokens to _msgSender(), and pays back the UniswapV2Pair in underlyingTokens.\",\"params\":{\"flashLoanQuantity\":\"The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\",\"minPayout\":\"The minimum payout of underlyingTokens sent to the `to` address.\",\"optionAddress\":\"The address of the longOptionTokes to close.\"}},\"flashMintShortOptionsThenSwap(address,uint256,uint256)\":{\"details\":\"Pays underlying token `premium` for `quantity` of `optionAddress` tokens.\",\"params\":{\"maxPremium\":\"The maximum quantity of underlyingTokens to pay for the optionTokens.\",\"optionAddress\":\"The address of the Option contract.\",\"quantity\":\"The quantity of options to mint using borrowed underlyingTokens.\"},\"returns\":{\"_0\":\"Returns (amount, premium) of options purchased for total premium price.\"}},\"flashMintShortOptionsThenSwapWithETH(address,uint256,uint256)\":{\"details\":\"Pays `premium` in ether for `quantity` of `optionAddress` tokens.\",\"params\":{\"maxPremium\":\"The maximum quantity of underlyingTokens to pay for the optionTokens.\",\"optionAddress\":\"The address of the Option contract.\",\"quantity\":\"The quantity of options to mint using borrowed underlyingTokens.\"},\"returns\":{\"_0\":\"Returns (amount, premium) of options purchased for total premium price.\"}},\"getClosePremium(address,uint256)\":{\"details\":\"Calculates the effective premium, denominated in underlyingTokens, to sell `optionToken`s.\",\"params\":{\"optionToken\":\"The optionToken to get the premium cost of purchasing.\",\"quantity\":\"The quantity of short option tokens that will be closed.\"},\"returns\":{\"_0\":\"(uint, uint) Returns the `premium` to sell `quantity` of `optionToken` and the `negativePremium`.\"}},\"getOpenPremium(address,uint256)\":{\"details\":\"Calculates the effective premium, denominated in underlyingTokens, to buy `quantity` of `optionToken`s.\",\"params\":{\"optionToken\":\"The optionToken to get the premium cost of purchasing.\",\"quantity\":\"The quantity of long option tokens that will be purchased.\"},\"returns\":{\"_0\":\"(uint, uint) Returns the `premium` to buy `quantity` of `optionToken` and the `negativePremium`.\"}},\"getOptionPair(address)\":{\"params\":{\"option\":\"The option token to get the corresponding UniswapV2Pair market.\"},\"returns\":{\"_0\":\"The pair address, as well as the tokens of the pair.\"}},\"openFlashLong(address,uint256,uint256)\":{\"details\":\"Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.\",\"params\":{\"amountOptions\":\"The quantity of longOptionTokens to purchase.\",\"maxPremium\":\"The maximum quantity of underlyingTokens to pay for the optionTokens.\",\"optionToken\":\"The option address.\"},\"returns\":{\"_0\":\"Whether or not the call succeeded.\"}},\"openFlashLongWithETH(address,uint256)\":{\"details\":\"Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.\",\"params\":{\"amountOptions\":\"The quantity of longOptionTokens to purchase.\",\"optionToken\":\"The option address.\"}},\"uniswapV2Call(address,uint256,uint256,bytes)\":{\"details\":\"The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.\",\"params\":{\"amount0\":\"The quantity of token0 received to the `to` address in the swap() call.\",\"amount1\":\"The quantity of token1 received to the `to` address in the swap() call.\",\"data\":\"The payload passed in the `data` parameter of the swap() call.\",\"sender\":\"The original _msgSender() of the UniswapV2Pair.swap() call.\"}}}},\"userdoc\":{\"methods\":{\"checkApproval(address,address)\":{\"notice\":\"Approves the `spender` to pull `token` from this contract.\"},\"closeFlashLong(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain.\"},\"closeFlashLongForETH(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain.\"},\"flashCloseLongOptionsThenSwap(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs.\"},\"flashCloseLongOptionsThenSwapForETH(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: If minPayout is 0, the `getCaller()` address is liable for negative payouts *if* that occurs.\"},\"flashMintShortOptionsThenSwap(address,uint256,uint256)\":{\"notice\":\"Callback function executed in a UniswapV2Pair.swap() call for `openFlashLong`.\"},\"flashMintShortOptionsThenSwapWithETH(address,uint256,uint256)\":{\"notice\":\"Callback function executed in a UniswapV2Pair.swap() call for `openFlashLongWithETH`.\"},\"getCaller()\":{\"notice\":\"Returns the state variable `_CALLER` in the Primitive Router.\"},\"getFactory()\":{\"notice\":\"Gets the UniswapV2Factory contract address.\"},\"getOpenPremium(address,uint256)\":{\"notice\":\"UniswapV2 adds a 0.3009027% fee which is applied to the premium as 0.301%.         IMPORTANT: If the pair's reserve ratio is incorrect, there could be a 'negative' premium.         Buying negative premium options will pay out redeemTokens.         An 'incorrect' ratio occurs when the (reserves of redeemTokens / strike ratio) >= reserves of underlyingTokens.         Implicitly uses the `optionToken`'s underlying and redeem tokens for the pair.\"},\"getOptionPair(address)\":{\"notice\":\"Fetchs the Uniswap Pair for an option's redeemToken and underlyingToken params.\"},\"getPrimitiveRouter()\":{\"notice\":\"Returns the Primitive Router contract address.\"},\"getRouter()\":{\"notice\":\"Gets the UniswapV2Router02 contract address.\"},\"getWeth()\":{\"notice\":\"Returns the Weth contract address.\"},\"isApproved(address,address)\":{\"notice\":\"Returns whether or not `spender` is approved to spend `token`, from this contract.\"},\"openFlashLong(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.         IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid.\"},\"openFlashLongWithDAIPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Executes the same as `openFlashLongWithPermit`, but for DAI.\"},\"openFlashLongWithETH(address,uint256)\":{\"notice\":\"Uses Ether to pay to purchase the option tokens.         IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.         IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid.\"},\"openFlashLongWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Executes the same as `openFlashLong`, but calls `permit` to pull underlying tokens.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/PrimitiveSwaps.sol\":\"PrimitiveSwaps\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function pauseDeployments() external;\\r\\n\\r\\n    function unpauseDeployments() external;\\r\\n\\r\\n    function deployOption(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function setOptionFactory(address optionFactory_) external;\\r\\n\\r\\n    function setRedeemFactory(address redeemFactory_) external;\\r\\n\\r\\n    function optionFactory() external returns (address);\\r\\n\\r\\n    function redeemFactory() external returns (address);\\r\\n\\r\\n    function verifyToken(address tokenAddress) external;\\r\\n\\r\\n    function verifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function unverifyToken(address tokenAddress) external;\\r\\n\\r\\n    function unverifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function isVerifiedOption(address optionAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x02aeb84e8b748674bc31707899158885066923f203e7a3a58cee3c68a49ec96f\"},\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IOption } from \\\"./IOption.sol\\\";\\r\\n\\r\\ninterface ITrader {\\r\\n    function safeMint(\\r\\n        IOption optionToken,\\r\\n        uint256 mintQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeExercise(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeem(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function safeClose(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function safeUnwind(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xb8f9e6d923e556e137a606c76e9adf8fd07375c7ff0650f4a7932adc950df44f\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/connectors/PrimitiveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Connector\\r\\n * @author  Primitive\\r\\n * @notice  Low-level abstract contract for Primitive Connectors to inherit from.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {Context} from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n// Primitive\\r\\nimport {CoreLib, IOption} from \\\"../libraries/CoreLib.sol\\\";\\r\\nimport {\\r\\n    IPrimitiveConnector,\\r\\n    IPrimitiveRouter,\\r\\n    IWETH\\r\\n} from \\\"../interfaces/IPrimitiveConnector.sol\\\";\\r\\n\\r\\nabstract contract PrimitiveConnector is IPrimitiveConnector, Context {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n\\r\\n    IWETH internal _weth; // Canonical WETH9\\r\\n    IPrimitiveRouter internal _primitiveRouter; // The PrimitiveRouter contract which executes calls.\\r\\n    mapping(address => mapping(address => bool)) internal _approved; // Stores approvals for future checks.\\r\\n\\r\\n    // ===== Constructor =====\\r\\n\\r\\n    constructor(address weth_, address primitiveRouter_) public {\\r\\n        _weth = IWETH(weth_);\\r\\n        _primitiveRouter = IPrimitiveRouter(primitiveRouter_);\\r\\n        checkApproval(weth_, primitiveRouter_); // Approves this contract's weth to be spent by router.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Reverts if the `option` is not registered in the PrimitiveRouter contract.\\r\\n     * @dev     Any `option` which is deployed from the Primitive Registry can be registered with the Router.\\r\\n     * @param   option The Primitive Option to check if registered.\\r\\n     */\\r\\n    modifier onlyRegistered(IOption option) {\\r\\n        require(\\r\\n            _primitiveRouter.getRegisteredOption(address(option)),\\r\\n            \\\"PrimitiveSwaps: EVIL_OPTION\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ===== External =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Approves the `spender` to pull `token` from this contract.\\r\\n     * @dev     This contract does not hold funds, infinite approvals cannot be exploited for profit.\\r\\n     * @param   token The token to approve spending for.\\r\\n     * @param   spender The address to allow to spend `token`.\\r\\n     */\\r\\n    function checkApproval(address token, address spender)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (!_approved[token][spender]) {\\r\\n            IERC20(token).safeApprove(spender, uint256(-1));\\r\\n            _approved[token][spender] = true;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ===== Internal =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Deposits `msg.value` into the Weth contract for Weth tokens.\\r\\n     * @return  Whether or not ether was deposited into Weth.\\r\\n     */\\r\\n    function _depositETH() internal returns (bool) {\\r\\n        if (msg.value > 0) {\\r\\n            _weth.deposit.value(msg.value)();\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of Weth to withdraw Ether and send it to `getCaller()`.\\r\\n     */\\r\\n    function _withdrawETH() internal returns (bool) {\\r\\n        uint256 quantity = IERC20(address(_weth)).balanceOf(address(this));\\r\\n        if (quantity > 0) {\\r\\n            // Withdraw ethers with weth.\\r\\n            _weth.withdraw(quantity);\\r\\n            // Send ether.\\r\\n            (bool success, ) = getCaller().call.value(quantity)(\\\"\\\");\\r\\n            // Revert is call is unsuccessful.\\r\\n            require(success, \\\"Connector: ERR_SENDING_ETHER\\\");\\r\\n            return success;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls the Router to pull `token` from the getCaller() and send them to this contract.\\r\\n     * @dev     This eliminates the need for users to approve the Router and each connector.\\r\\n     * @param   token The token to pull from `getCaller()` into this contract.\\r\\n     * @param   quantity The amount of `token` to pull into this contract.\\r\\n     * @return  Whether or not the `token` was transferred into this contract.\\r\\n     */\\r\\n    function _transferFromCaller(address token, uint256 quantity)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (quantity > 0) {\\r\\n            _primitiveRouter.transferFromCaller(token, quantity);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pushes this contract's balance of `token` to `getCaller()`.\\r\\n     * @dev     getCaller() is the original `msg.sender` of the Router's `execute` fn.\\r\\n     * @param   token The token to transfer to `getCaller()`.\\r\\n     * @return  Whether or not the `token` was transferred to `getCaller()`.\\r\\n     */\\r\\n    function _transferToCaller(address token) internal returns (bool) {\\r\\n        uint256 quantity = IERC20(token).balanceOf(address(this));\\r\\n        if (quantity > 0) {\\r\\n            IERC20(token).safeTransfer(getCaller(), quantity);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls the Router to pull `token` from the getCaller() and send them to this contract.\\r\\n     * @dev     This eliminates the need for users to approve the Router and each connector.\\r\\n     * @param   token The token to pull from `getCaller()`.\\r\\n     * @param   quantity The amount of `token` to pull.\\r\\n     * @param   receiver The `to` address to send `quantity` of `token` to.\\r\\n     * @return  Whether or not `token` was transferred to `receiver`.\\r\\n     */\\r\\n    function _transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 quantity,\\r\\n        address receiver\\r\\n    ) internal returns (bool) {\\r\\n        if (quantity > 0) {\\r\\n            _primitiveRouter.transferFromCallerToReceiver(token, quantity, receiver);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of underlyingTokens to mint optionTokens to this contract.\\r\\n     * @param   optionToken The Primitive Option to mint.\\r\\n     * @return  (uint, uint) (longOptions, shortOptions)\\r\\n     */\\r\\n    function _mintOptions(IOption optionToken) internal returns (uint256, uint256) {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        _transferBalanceToReceiver(underlying, address(optionToken)); // Sends to option contract\\r\\n        return optionToken.mintOptions(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of underlyingTokens to mint optionTokens to `receiver`.\\r\\n     * @param   optionToken The Primitive Option to mint.\\r\\n     * @param   receiver The address that will received the minted long and short optionTokens.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function _mintOptionsToReceiver(IOption optionToken, address receiver)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        _transferBalanceToReceiver(underlying, address(optionToken)); // Sends to option contract\\r\\n        return optionToken.mintOptions(receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pulls underlying tokens from `getCaller()` to option contract, then invokes mintOptions().\\r\\n     * @param   optionToken The option token to mint.\\r\\n     * @param   quantity The amount of option tokens to mint.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function _mintOptionsFromCaller(IOption optionToken, uint256 quantity)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        require(quantity > 0, \\\"ERR_ZERO\\\");\\r\\n        _transferFromCallerToReceiver(\\r\\n            optionToken.getUnderlyingTokenAddress(),\\r\\n            quantity,\\r\\n            address(optionToken)\\r\\n        );\\r\\n        return optionToken.mintOptions(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Multi-step operation to close options.\\r\\n     *          1. Transfer balanceOf `redeem` option token to the option contract.\\r\\n     *          2. If NOT expired, pull `option` tokens from `getCaller()` and send to option contract.\\r\\n     *          3. Invoke `closeOptions()` to burn the options and release underlyings to this contract.\\r\\n     * @return  The amount of underlyingTokens released to this contract.\\r\\n     */\\r\\n    function _closeOptions(IOption optionToken) internal returns (uint256) {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        uint256 short = IERC20(redeem).balanceOf(address(this));\\r\\n        uint256 long = IERC20(address(optionToken)).balanceOf(getCaller());\\r\\n        uint256 proportional = CoreLib.getProportionalShortOptions(optionToken, long);\\r\\n        // IF user has more longs than proportional shorts, close the `short` amount.\\r\\n        if (proportional > short) {\\r\\n            proportional = short;\\r\\n        }\\r\\n\\r\\n        // If option is expired, transfer the amt of proportional thats larger.\\r\\n        if (optionToken.getExpiryTime() >= now) {\\r\\n            // Transfers the max proportional amount of short options to option contract.\\r\\n            IERC20(redeem).safeTransfer(address(optionToken), proportional);\\r\\n            // Pulls the max amount of long options and sends to option contract.\\r\\n            _transferFromCallerToReceiver(\\r\\n                address(optionToken),\\r\\n                CoreLib.getProportionalLongOptions(optionToken, proportional),\\r\\n                address(optionToken)\\r\\n            );\\r\\n        } else {\\r\\n            // If not expired, transfer all redeem in balance.\\r\\n            IERC20(redeem).safeTransfer(address(optionToken), short);\\r\\n        }\\r\\n\\r\\n        (, , uint256 outputUnderlyings) = optionToken.closeOptions(address(this));\\r\\n        return outputUnderlyings;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Multi-step operation to exercise options.\\r\\n     *          1. Transfer balanceOf `strike` token to option contract.\\r\\n     *          2. Transfer `amount` of options to exercise to option contract.\\r\\n     *          3. Invoke `exerciseOptions()` and specify `getCaller()` as the receiver.\\r\\n     * @dev     If the balanceOf `strike` and `amount` of options are not in correct proportions, call will fail.\\r\\n     * @param   optionToken The option to exercise.\\r\\n     * @param   amount The quantity of options to exercise.\\r\\n     */\\r\\n    function _exerciseOptions(IOption optionToken, uint256 amount)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address strike = optionToken.getStrikeTokenAddress();\\r\\n        _transferBalanceToReceiver(strike, address(optionToken));\\r\\n        IERC20(address(optionToken)).safeTransfer(address(optionToken), amount);\\r\\n        return optionToken.exerciseOptions(getCaller(), amount, new bytes(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Transfers this contract's balance of Redeem tokens and invokes the redemption function.\\r\\n     * @param   optionToken The optionToken to redeem, not the redeem token itself.\\r\\n     */\\r\\n    function _redeemOptions(IOption optionToken) internal returns (uint256) {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        _transferBalanceToReceiver(redeem, address(optionToken));\\r\\n        return optionToken.redeemStrikeTokens(getCaller());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Utility function to transfer this contract's balance of `token` to `receiver`.\\r\\n     * @param   token The token to transfer.\\r\\n     * @param   receiver The address that receives the token.\\r\\n     * @return  Returns the quantity of `token` transferred.\\r\\n     */\\r\\n    function _transferBalanceToReceiver(address token, address receiver)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 quantity = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).safeTransfer(receiver, quantity);\\r\\n        return quantity;\\r\\n    }\\r\\n\\r\\n    // ===== Fallback =====\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(_msgSender() == address(_weth)); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Weth contract address.\\r\\n     */\\r\\n    function getWeth() public view override returns (IWETH) {\\r\\n        return _weth;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the state variable `_CALLER` in the Primitive Router.\\r\\n     */\\r\\n    function getCaller() public view override returns (address) {\\r\\n        return _primitiveRouter.getCaller();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Primitive Router contract address.\\r\\n     */\\r\\n    function getPrimitiveRouter() public view override returns (IPrimitiveRouter) {\\r\\n        return _primitiveRouter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns whether or not `spender` is approved to spend `token`, from this contract.\\r\\n     */\\r\\n    function isApproved(address token, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _approved[token][spender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb88a6c6cbc78389733aeddc85cdc27da1491206220b8a3d821f3f442b37c1786\"},\"contracts/connectors/PrimitiveSwaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Router\\r\\n * @author  Primitive\\r\\n * @notice  Swap option tokens on Uniswap & Sushiswap venues.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n// Uniswap\\r\\nimport {\\r\\n    IUniswapV2Callee\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\r\\n// Primitive\\r\\nimport {\\r\\n    IPrimitiveSwaps,\\r\\n    IUniswapV2Router02,\\r\\n    IUniswapV2Factory,\\r\\n    IUniswapV2Pair,\\r\\n    IOption,\\r\\n    IERC20Permit\\r\\n} from \\\"../interfaces/IPrimitiveSwaps.sol\\\";\\r\\nimport {PrimitiveConnector} from \\\"./PrimitiveConnector.sol\\\";\\r\\nimport {SwapsLib, SafeMath} from \\\"../libraries/SwapsLib.sol\\\";\\r\\n\\r\\ninterface DaiPermit {\\r\\n    function permit(\\r\\n        address holder,\\r\\n        address spender,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        bool allowed,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract PrimitiveSwaps is\\r\\n    PrimitiveConnector,\\r\\n    IPrimitiveSwaps,\\r\\n    IUniswapV2Callee,\\r\\n    ReentrancyGuard\\r\\n{\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    event Initialized(address indexed from); // Emitted on deployment.\\r\\n    event Buy(\\r\\n        address indexed from,\\r\\n        address indexed option,\\r\\n        uint256 quantity,\\r\\n        uint256 premium\\r\\n    );\\r\\n    event Sell(\\r\\n        address indexed from,\\r\\n        address indexed option,\\r\\n        uint256 quantity,\\r\\n        uint256 payout\\r\\n    );\\r\\n\\r\\n    IUniswapV2Factory private _factory; // The Uniswap V2 _factory contract to get pair addresses from\\r\\n    IUniswapV2Router02 private _router; // The Uniswap contract used to interact with the protocol\\r\\n\\r\\n    modifier onlySelf() {\\r\\n        require(_msgSender() == address(this), \\\"PrimitiveSwaps: NOT_SELF\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ===== Constructor =====\\r\\n    constructor(\\r\\n        address weth_,\\r\\n        address primitiveRouter_,\\r\\n        address factory_,\\r\\n        address router_\\r\\n    ) public PrimitiveConnector(weth_, primitiveRouter_) {\\r\\n        _factory = IUniswapV2Factory(factory_);\\r\\n        _router = IUniswapV2Router02(router_);\\r\\n        emit Initialized(_msgSender());\\r\\n    }\\r\\n\\r\\n    // ===== Swap Operations =====\\r\\n\\r\\n    /**\\r\\n     * @notice  IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.\\r\\n     *          IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid.\\r\\n     * @dev     Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.\\r\\n     * @param   optionToken The option address.\\r\\n     * @param   amountOptions The quantity of longOptionTokens to purchase.\\r\\n     * @param   maxPremium The maximum quantity of underlyingTokens to pay for the optionTokens.\\r\\n     * @return  Whether or not the call succeeded.\\r\\n     */\\r\\n    function openFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium\\r\\n    ) public override nonReentrant onlyRegistered(optionToken) returns (bool) {\\r\\n        // Calls pair.swap(), and executes `flashMintShortOptionsThenSwap` in the `uniswapV2Callee` callback.\\r\\n        (IUniswapV2Pair pair, address underlying, ) = getOptionPair(optionToken);\\r\\n        SwapsLib._flashSwap(\\r\\n            pair, // Pair to flash swap from.\\r\\n            underlying, // Token to swap to, i.e. receive optimistically.\\r\\n            amountOptions, // Amount of underlying to optimistically receive to mint options with.\\r\\n            abi.encodeWithSelector( // Start: Function to call in the callback.\\r\\n                bytes4(\\r\\n                    keccak256(\\r\\n                        bytes(\\\"flashMintShortOptionsThenSwap(address,uint256,uint256)\\\")\\r\\n                    )\\r\\n                ),\\r\\n                optionToken, // Option token to mint with flash loaned tokens.\\r\\n                amountOptions, // Quantity of underlyingTokens from flash loan to use to mint options.\\r\\n                maxPremium // Total price paid (in underlyingTokens) for selling shortOptionTokens.\\r\\n            ) // End: Function to call in the callback.\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Executes the same as `openFlashLong`, but calls `permit` to pull underlying tokens.\\r\\n     */\\r\\n    function openFlashLongWithPermit(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override nonReentrant onlyRegistered(optionToken) returns (bool) {\\r\\n        // Calls pair.swap(), and executes `flashMintShortOptionsThenSwap` in the `uniswapV2Callee` callback.\\r\\n        (IUniswapV2Pair pair, address underlying, ) = getOptionPair(optionToken);\\r\\n        IERC20Permit(underlying).permit(\\r\\n            getCaller(),\\r\\n            address(_primitiveRouter),\\r\\n            maxPremium,\\r\\n            deadline,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        SwapsLib._flashSwap(\\r\\n            pair, // Pair to flash swap from.\\r\\n            underlying, // Token to swap to, i.e. receive optimistically.\\r\\n            amountOptions, // Amount of underlying to optimistically receive to mint options with.\\r\\n            abi.encodeWithSelector( // Start: Function to call in the callback.\\r\\n                bytes4(\\r\\n                    keccak256(\\r\\n                        bytes(\\\"flashMintShortOptionsThenSwap(address,uint256,uint256)\\\")\\r\\n                    )\\r\\n                ),\\r\\n                optionToken, // Option token to mint with flash loaned tokens.\\r\\n                amountOptions, // Quantity of underlyingTokens from flash loan to use to mint options.\\r\\n                maxPremium // Total price paid (in underlyingTokens) for selling shortOptionTokens.\\r\\n            ) // End: Function to call in the callback.\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Executes the same as `openFlashLongWithPermit`, but for DAI.\\r\\n     */\\r\\n    function openFlashLongWithDAIPermit(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override nonReentrant onlyRegistered(optionToken) returns (bool) {\\r\\n        // Calls pair.swap(), and executes `flashMintShortOptionsThenSwap` in the `uniswapV2Callee` callback.\\r\\n        (IUniswapV2Pair pair, address underlying, ) = getOptionPair(optionToken);\\r\\n        DaiPermit(underlying).permit(\\r\\n            getCaller(),\\r\\n            address(_primitiveRouter),\\r\\n            IERC20Permit(underlying).nonces(getCaller()),\\r\\n            deadline,\\r\\n            true,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        SwapsLib._flashSwap(\\r\\n            pair, // Pair to flash swap from.\\r\\n            underlying, // Token to swap to, i.e. receive optimistically.\\r\\n            amountOptions, // Amount of underlying to optimistically receive to mint options with.\\r\\n            abi.encodeWithSelector( // Start: Function to call in the callback.\\r\\n                bytes4(\\r\\n                    keccak256(\\r\\n                        bytes(\\\"flashMintShortOptionsThenSwap(address,uint256,uint256)\\\")\\r\\n                    )\\r\\n                ),\\r\\n                optionToken, // Option token to mint with flash loaned tokens.\\r\\n                amountOptions, // Quantity of underlyingTokens from flash loan to use to mint options.\\r\\n                maxPremium // Total price paid (in underlyingTokens) for selling shortOptionTokens.\\r\\n            ) // End: Function to call in the callback.\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses Ether to pay to purchase the option tokens.\\r\\n     *          IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.\\r\\n     *          IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid.\\r\\n     * @dev     Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.\\r\\n     * @param   optionToken The option address.\\r\\n     * @param   amountOptions The quantity of longOptionTokens to purchase.\\r\\n     */\\r\\n    function openFlashLongWithETH(IOption optionToken, uint256 amountOptions)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.value > 0, \\\"PrimitiveSwaps: ZERO\\\"); // Fail early if no Ether was sent.\\r\\n        // Calls pair.swap(), and executes `flashMintShortOptionsThenSwap` in the `uniswapV2Callee` callback.\\r\\n        (IUniswapV2Pair pair, address underlying, ) = getOptionPair(optionToken);\\r\\n        SwapsLib._flashSwap(\\r\\n            pair, // Pair to flash swap from.\\r\\n            underlying, // Token to swap to, i.e. receive optimistically.\\r\\n            amountOptions, // Amount of underlying to optimistically receive to mint options with.\\r\\n            abi.encodeWithSelector( // Start: Function to call in the callback.\\r\\n                bytes4(\\r\\n                    keccak256(\\r\\n                        bytes(\\r\\n                            \\\"flashMintShortOptionsThenSwapWithETH(address,uint256,uint256)\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                optionToken, // Option token to mint with flash loaned tokens\\r\\n                amountOptions, // Quantity of underlyingTokens from flash loan to use to mint options.\\r\\n                msg.value // total price paid (in underlyingTokens) for selling shortOptionTokens.\\r\\n            ) // End: Function to call in the callback.\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Closes a longOptionToken position by flash swapping in redeemTokens,\\r\\n     *          closing the option, and paying back in underlyingTokens.\\r\\n     * @notice  IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain.\\r\\n     * @param   optionToken The address of the longOptionTokens to close.\\r\\n     * @param   amountRedeems The quantity of redeemTokens to borrow to close the options.\\r\\n     * @param   minPayout The minimum payout of underlyingTokens sent out to the user.\\r\\n     */\\r\\n    function closeFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountRedeems,\\r\\n        uint256 minPayout\\r\\n    ) external override nonReentrant onlyRegistered(optionToken) returns (bool) {\\r\\n        // Calls pair.swap(), and executes `flashCloseLongOptionsThenSwap` in the `uniswapV2Callee` callback.\\r\\n        (IUniswapV2Pair pair, , address redeem) = getOptionPair(optionToken);\\r\\n        SwapsLib._flashSwap(\\r\\n            pair, // Pair to flash swap from.\\r\\n            redeem, // Token to swap to, i.e. receive optimistically.\\r\\n            amountRedeems, // Amount of underlying to optimistically receive to close options with.\\r\\n            abi.encodeWithSelector( // Start: Function to call in the callback.\\r\\n                bytes4(\\r\\n                    keccak256(\\r\\n                        bytes(\\\"flashCloseLongOptionsThenSwap(address,uint256,uint256)\\\")\\r\\n                    )\\r\\n                ),\\r\\n                optionToken, // Option token to close with flash loaned redeemTokens.\\r\\n                amountRedeems, // Quantity of redeemTokens from flash loan to use to close options.\\r\\n                minPayout // Total remaining underlyingTokens after flash loan is paid.\\r\\n            ) // End: Function to call in the callback.\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Closes a longOptionToken position by flash swapping in redeemTokens,\\r\\n     *          closing the option, and paying back in underlyingTokens.\\r\\n     * @notice  IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain.\\r\\n     * @param   optionToken The address of the longOptionTokens to close.\\r\\n     * @param   amountRedeems The quantity of redeemTokens to borrow to close the options.\\r\\n     * @param   minPayout The minimum payout of underlyingTokens sent out to the user.\\r\\n     */\\r\\n    function closeFlashLongForETH(\\r\\n        IOption optionToken,\\r\\n        uint256 amountRedeems,\\r\\n        uint256 minPayout\\r\\n    ) external override nonReentrant onlyRegistered(optionToken) returns (bool) {\\r\\n        // Calls pair.swap(), and executes `flashCloseLongOptionsThenSwapForETH` in the `uniswapV2Callee` callback.\\r\\n        (IUniswapV2Pair pair, , address redeem) = getOptionPair(optionToken);\\r\\n        SwapsLib._flashSwap(\\r\\n            pair, // Pair to flash swap from.\\r\\n            redeem, // Token to swap to, i.e. receive optimistically.\\r\\n            amountRedeems, // Amount of underlying to optimistically receive to close options with.\\r\\n            abi.encodeWithSelector( // Start: Function to call in the callback.\\r\\n                bytes4(\\r\\n                    keccak256(\\r\\n                        bytes(\\r\\n                            \\\"flashCloseLongOptionsThenSwapForETH(address,uint256,uint256)\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                optionToken, // Option token to close with flash loaned redeemTokens.\\r\\n                amountRedeems, // Quantity of redeemTokens from flash loan to use to close options.\\r\\n                minPayout // Total remaining underlyingTokens after flash loan is paid.\\r\\n            ) // End: Function to call in the callback.\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ===== Flash Callback Functions =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Callback function executed in a UniswapV2Pair.swap() call for `openFlashLong`.\\r\\n     * @dev     Pays underlying token `premium` for `quantity` of `optionAddress` tokens.\\r\\n     * @param   optionAddress The address of the Option contract.\\r\\n     * @param   quantity The quantity of options to mint using borrowed underlyingTokens.\\r\\n     * @param   maxPremium The maximum quantity of underlyingTokens to pay for the optionTokens.\\r\\n     * @return  Returns (amount, premium) of options purchased for total premium price.\\r\\n     */\\r\\n    function flashMintShortOptionsThenSwap(\\r\\n        address optionAddress,\\r\\n        uint256 quantity,\\r\\n        uint256 maxPremium\\r\\n    ) public onlySelf onlyRegistered(IOption(optionAddress)) returns (uint256, uint256) {\\r\\n        IOption optionToken = IOption(optionAddress);\\r\\n        (IUniswapV2Pair pair, address underlying, address redeem) =\\r\\n            getOptionPair(optionToken);\\r\\n        // Mint option and redeem tokens to this contract.\\r\\n        _mintOptions(optionToken);\\r\\n        // Get the repayment amounts.\\r\\n        (uint256 premium, uint256 redeemPremium) =\\r\\n            SwapsLib.repayOpen(_router, optionToken, quantity);\\r\\n        // If premium is non-zero and non-negative (most cases), send underlyingTokens to the pair as payment (premium).\\r\\n        if (premium > 0) {\\r\\n            // Check for users to not pay over their max desired value.\\r\\n            require(maxPremium >= premium, \\\"PrimitiveSwaps: MAX_PREMIUM\\\");\\r\\n            // Pull underlyingTokens from the `getCaller()` to pay the remainder of the flash swap.\\r\\n            _transferFromCaller(underlying, premium);\\r\\n            // Push underlying tokens back to the pair as repayment.\\r\\n            IERC20(underlying).safeTransfer(address(pair), premium);\\r\\n        }\\r\\n        // Pay pair in redeem tokens.\\r\\n        if (redeemPremium > 0) {\\r\\n            IERC20(redeem).safeTransfer(address(pair), redeemPremium);\\r\\n        }\\r\\n        // Return tokens to `getCaller()`.\\r\\n        _transferToCaller(redeem);\\r\\n        _transferToCaller(optionAddress);\\r\\n        emit Buy(getCaller(), optionAddress, quantity, premium);\\r\\n        return (quantity, premium);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Callback function executed in a UniswapV2Pair.swap() call for `openFlashLongWithETH`.\\r\\n     * @dev     Pays `premium` in ether for `quantity` of `optionAddress` tokens.\\r\\n     * @param   optionAddress The address of the Option contract.\\r\\n     * @param   quantity The quantity of options to mint using borrowed underlyingTokens.\\r\\n     * @param   maxPremium The maximum quantity of underlyingTokens to pay for the optionTokens.\\r\\n     * @return  Returns (amount, premium) of options purchased for total premium price.\\r\\n     */\\r\\n    function flashMintShortOptionsThenSwapWithETH(\\r\\n        address optionAddress,\\r\\n        uint256 quantity,\\r\\n        uint256 maxPremium\\r\\n    ) public onlySelf onlyRegistered(IOption(optionAddress)) returns (uint256, uint256) {\\r\\n        IOption optionToken = IOption(optionAddress);\\r\\n        (IUniswapV2Pair pair, address underlying, address redeem) =\\r\\n            getOptionPair(optionToken);\\r\\n        require(underlying == address(_weth), \\\"PrimitiveSwaps: NOT_WETH\\\"); // Ensure Weth Call.\\r\\n        // Mint option and redeem tokens to this contract.\\r\\n        _mintOptions(optionToken);\\r\\n        // Get the repayment amounts.\\r\\n        (uint256 premium, uint256 redeemPremium) =\\r\\n            SwapsLib.repayOpen(_router, optionToken, quantity);\\r\\n        // If premium is non-zero and non-negative (most cases), send underlyingTokens to the pair as payment (premium).\\r\\n        if (premium > 0) {\\r\\n            // Check for users to not pay over their max desired value.\\r\\n            require(maxPremium >= premium, \\\"PrimitiveSwaps: MAX_PREMIUM\\\");\\r\\n            // Wrap exact Ether amount of `premium`.\\r\\n            _weth.deposit.value(premium)();\\r\\n            // Transfer Weth to pair to pay for premium.\\r\\n            IERC20(address(_weth)).safeTransfer(address(pair), premium);\\r\\n            // Return remaining Ether to caller.\\r\\n            _withdrawETH();\\r\\n        }\\r\\n        // Pay pair in redeem.\\r\\n        if (redeemPremium > 0) {\\r\\n            IERC20(redeem).safeTransfer(address(pair), redeemPremium);\\r\\n        }\\r\\n        // Return tokens to `getCaller()`.\\r\\n        _transferToCaller(redeem);\\r\\n        _transferToCaller(optionAddress);\\r\\n        emit Buy(getCaller(), optionAddress, quantity, premium);\\r\\n        return (quantity, premium);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Sends shortOptionTokens to _msgSender(), and pays back the UniswapV2Pair in underlyingTokens.\\r\\n     * @notice  IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs.\\r\\n     * @param   optionAddress The address of the longOptionTokes to close.\\r\\n     * @param   flashLoanQuantity The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\\r\\n     * @param   minPayout The minimum payout of underlyingTokens sent to the `to` address.\\r\\n     */\\r\\n    function flashCloseLongOptionsThenSwap(\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 minPayout\\r\\n    ) public onlySelf onlyRegistered(IOption(optionAddress)) returns (uint256, uint256) {\\r\\n        IOption optionToken = IOption(optionAddress);\\r\\n        (IUniswapV2Pair pair, address underlying, address redeem) =\\r\\n            getOptionPair(optionToken);\\r\\n        // Close the options, releasing underlying tokens to this contract.\\r\\n        uint256 outputUnderlyings = _closeOptions(optionToken);\\r\\n        // Get repay amounts.\\r\\n        (uint256 payout, uint256 cost, uint256 outstanding) =\\r\\n            SwapsLib.repayClose(_router, optionToken, flashLoanQuantity);\\r\\n        if (payout > 0) {\\r\\n            cost = outputUnderlyings.sub(payout);\\r\\n        }\\r\\n        // Pay back the pair in underlyingTokens.\\r\\n        if (cost > 0) {\\r\\n            IERC20(underlying).safeTransfer(address(pair), cost);\\r\\n        }\\r\\n        if (outstanding > 0) {\\r\\n            // Pull underlyingTokens from the `getCaller()` to pay the remainder of the flash swap.\\r\\n            // Revert if the minPayout is less than or equal to the underlyingPayment of 0.\\r\\n            // There is 0 underlyingPayment in the case that outstanding > 0.\\r\\n            // This code branch can be successful by setting `minPayout` to 0.\\r\\n            // This means the user is willing to pay to close the position.\\r\\n            require(minPayout <= payout, \\\"PrimitiveSwaps: NEGATIVE_PAYOUT\\\");\\r\\n            _transferFromCallerToReceiver(underlying, outstanding, address(pair));\\r\\n        }\\r\\n        // If payout is non-zero and non-negative, send it to the `getCaller()` address.\\r\\n        if (payout > 0) {\\r\\n            // Revert if minPayout is greater than the actual payout.\\r\\n            require(payout >= minPayout, \\\"PrimitiveSwaps: MIN_PREMIUM\\\");\\r\\n            _transferToCaller(underlying);\\r\\n        }\\r\\n        emit Sell(getCaller(), optionAddress, flashLoanQuantity, payout);\\r\\n        return (payout, cost);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Sends shortOptionTokens to _msgSender(), and pays back the UniswapV2Pair in underlyingTokens.\\r\\n     * @notice  IMPORTANT: If minPayout is 0, the `getCaller()` address is liable for negative payouts *if* that occurs.\\r\\n     * @param   optionAddress The address of the longOptionTokes to close.\\r\\n     * @param   flashLoanQuantity The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\\r\\n     * @param   minPayout The minimum payout of underlyingTokens sent to the `to` address.\\r\\n     */\\r\\n    function flashCloseLongOptionsThenSwapForETH(\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 minPayout\\r\\n    ) public onlySelf onlyRegistered(IOption(optionAddress)) returns (uint256, uint256) {\\r\\n        IOption optionToken = IOption(optionAddress);\\r\\n        (IUniswapV2Pair pair, address underlying, address redeem) =\\r\\n            getOptionPair(optionToken);\\r\\n        require(underlying == address(_weth), \\\"PrimitiveSwaps: NOT_WETH\\\");\\r\\n        // Close the options, releasing underlying tokens to this contract.\\r\\n        _closeOptions(optionToken);\\r\\n        // Get repay amounts.\\r\\n        (uint256 payout, uint256 cost, uint256 outstanding) =\\r\\n            SwapsLib.repayClose(_router, optionToken, flashLoanQuantity);\\r\\n        // Pay back the pair in underlyingTokens.\\r\\n        if (cost > 0) {\\r\\n            IERC20(underlying).safeTransfer(address(pair), cost);\\r\\n        }\\r\\n        if (outstanding > 0) {\\r\\n            // Pull underlyingTokens from the `getCaller()` to pay the remainder of the flash swap.\\r\\n            // Revert if the minPayout is less than or equal to the underlyingPayment of 0.\\r\\n            // There is 0 underlyingPayment in the case that outstanding > 0.\\r\\n            // This code branch can be successful by setting `minPayout` to 0.\\r\\n            // This means the user is willing to pay to close the position.\\r\\n            require(minPayout <= payout, \\\"PrimitiveSwaps: NEGATIVE_PAYOUT\\\");\\r\\n            _transferFromCallerToReceiver(underlying, outstanding, address(pair));\\r\\n        }\\r\\n        // If payout is non-zero and non-negative, send it to the `getCaller()` address.\\r\\n        if (payout > 0) {\\r\\n            // Revert if minPayout is greater than the actual payout.\\r\\n            require(payout >= minPayout, \\\"PrimitiveSwaps: MIN_PREMIUM\\\");\\r\\n            _withdrawETH(); // Unwrap's this contract's balance of Weth and sends Ether to `getCaller()`.\\r\\n        }\\r\\n        emit Sell(getCaller(), optionAddress, flashLoanQuantity, payout);\\r\\n        return (payout, cost);\\r\\n    }\\r\\n\\r\\n    // ===== Flash Loans =====\\r\\n\\r\\n    /**\\r\\n     * @dev     The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.\\r\\n     * @param   sender The original _msgSender() of the UniswapV2Pair.swap() call.\\r\\n     * @param   amount0 The quantity of token0 received to the `to` address in the swap() call.\\r\\n     * @param   amount1 The quantity of token1 received to the `to` address in the swap() call.\\r\\n     * @param   data The payload passed in the `data` parameter of the swap() call.\\r\\n     */\\r\\n    function uniswapV2Call(\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external override(IPrimitiveSwaps, IUniswapV2Callee) {\\r\\n        assert(\\r\\n            _msgSender() ==\\r\\n                _factory.getPair(\\r\\n                    IUniswapV2Pair(_msgSender()).token0(),\\r\\n                    IUniswapV2Pair(_msgSender()).token1()\\r\\n                )\\r\\n        ); // Ensure that _msgSender() is actually a V2 pair.\\r\\n        require(sender == address(this), \\\"PrimitiveSwaps: NOT_SENDER\\\"); // Ensure called by this contract.\\r\\n        (bool success, bytes memory returnData) = address(this).call(data); // Execute the callback.\\r\\n        (uint256 amountA, uint256 amountB) = abi.decode(returnData, (uint256, uint256));\\r\\n        require(\\r\\n            success && (returnData.length == 0 || amountA > 0 || amountB > 0),\\r\\n            \\\"PrimitiveSwaps: CALLBACK\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Gets the UniswapV2Router02 contract address.\\r\\n     */\\r\\n    function getRouter() public view override returns (IUniswapV2Router02) {\\r\\n        return _router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Gets the UniswapV2Factory contract address.\\r\\n     */\\r\\n    function getFactory() public view override returns (IUniswapV2Factory) {\\r\\n        return _factory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Fetchs the Uniswap Pair for an option's redeemToken and underlyingToken params.\\r\\n     * @param   option The option token to get the corresponding UniswapV2Pair market.\\r\\n     * @return  The pair address, as well as the tokens of the pair.\\r\\n     */\\r\\n    function getOptionPair(IOption option)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            IUniswapV2Pair,\\r\\n            address,\\r\\n            address\\r\\n        )\\r\\n    {\\r\\n        address redeem = option.redeemToken();\\r\\n        address underlying = option.getUnderlyingTokenAddress();\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(_factory.getPair(redeem, underlying));\\r\\n        return (pair, underlying, redeem);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the effective premium, denominated in underlyingTokens, to buy `quantity` of `optionToken`s.\\r\\n     * @notice  UniswapV2 adds a 0.3009027% fee which is applied to the premium as 0.301%.\\r\\n     *          IMPORTANT: If the pair's reserve ratio is incorrect, there could be a 'negative' premium.\\r\\n     *          Buying negative premium options will pay out redeemTokens.\\r\\n     *          An 'incorrect' ratio occurs when the (reserves of redeemTokens / strike ratio) >= reserves of underlyingTokens.\\r\\n     *          Implicitly uses the `optionToken`'s underlying and redeem tokens for the pair.\\r\\n     * @param   optionToken The optionToken to get the premium cost of purchasing.\\r\\n     * @param   quantity The quantity of long option tokens that will be purchased.\\r\\n     * @return  (uint, uint) Returns the `premium` to buy `quantity` of `optionToken` and the `negativePremium`.\\r\\n     */\\r\\n    function getOpenPremium(IOption optionToken, uint256 quantity)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        return SwapsLib.getOpenPremium(_router, optionToken, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the effective premium, denominated in underlyingTokens, to sell `optionToken`s.\\r\\n     * @param   optionToken The optionToken to get the premium cost of purchasing.\\r\\n     * @param   quantity The quantity of short option tokens that will be closed.\\r\\n     * @return  (uint, uint) Returns the `premium` to sell `quantity` of `optionToken` and the `negativePremium`.\\r\\n     */\\r\\n    function getClosePremium(IOption optionToken, uint256 quantity)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        return SwapsLib.getClosePremium(_router, optionToken, quantity);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd353290639a5e990763425398e363e0ba56d388120db750dd620a608993def87\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20Permit {\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x447ed8e80f3cb568784903cf3c009c418e4668d6b27b0dce6e6f739211013329\"},\"contracts/interfaces/IPrimitiveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {IPrimitiveRouter} from \\\"../interfaces/IPrimitiveRouter.sol\\\";\\r\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveConnector {\\r\\n    // ===== External =====\\r\\n\\r\\n    function checkApproval(address token, address spender) external returns (bool);\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getPrimitiveRouter() external view returns (IPrimitiveRouter);\\r\\n\\r\\n    function isApproved(address token, address spender) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x78a5179263ac7372dce22475449513853adae2e09c18de19c8e56ee3b81bf3a2\"},\"contracts/interfaces/IPrimitiveRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IOption,\\r\\n    IERC20\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {\\r\\n    IRegistry\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\\\";\\r\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveRouter {\\r\\n    // ===== Admin =====\\r\\n\\r\\n    function halt() external;\\r\\n\\r\\n    // ===== Registration =====\\r\\n    function setRegisteredOptions(address[] calldata optionAddresses)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function setRegisteredConnectors(\\r\\n        address[] calldata connectors,\\r\\n        bool[] calldata isValid\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Operations =====\\r\\n\\r\\n    function transferFromCaller(address token, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Execution =====\\r\\n\\r\\n    function executeCall(address connector, bytes calldata params) external payable;\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getRoute() external view returns (address);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getRegistry() external view returns (IRegistry);\\r\\n\\r\\n    function getRegisteredOption(address option) external view returns (bool);\\r\\n\\r\\n    function getRegisteredConnector(address connector) external view returns (bool);\\r\\n\\r\\n    function apiVersion() external pure returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xaac255f6b4eafe624838014095e6b86ccf32e1993df339455cf662b9a0c1b277\"},\"contracts/interfaces/IPrimitiveSwaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IUniswapV2Router02\\r\\n} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Factory\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {IOption} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\r\\n\\r\\ninterface IPrimitiveSwaps {\\r\\n    // ==== External Functions ====\\r\\n\\r\\n    function openFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function openFlashLongWithPermit(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function openFlashLongWithDAIPermit(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function openFlashLongWithETH(IOption optionToken, uint256 amountOptions)\\r\\n        external\\r\\n        payable\\r\\n        returns (bool);\\r\\n\\r\\n    function closeFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountRedeems,\\r\\n        uint256 minPayout\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function closeFlashLongForETH(\\r\\n        IOption optionToken,\\r\\n        uint256 amountRedeems,\\r\\n        uint256 minPayout\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Callback =====\\r\\n\\r\\n    function uniswapV2Call(\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getRouter() external view returns (IUniswapV2Router02);\\r\\n\\r\\n    function getFactory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function getOptionPair(IOption option)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IUniswapV2Pair,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getOpenPremium(IOption optionToken, uint256 quantity)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getClosePremium(IOption optionToken, uint256 quantity)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x9b5fee3f8e35546765deec5f2e7facca2fc6d2793217a6753b07df9139070da3\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x37c262ad0aadf51acdff4ee5711841e0beb6030f9d750e23943b2d759144af0c\"},\"contracts/libraries/CoreLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Swaps Lib\\r\\n * @author  Primitive\\r\\n * @notice  Library for calculating different proportions of long and short option tokens.\\r\\n * @dev     @primitivefi/v1-connectors@2.0.0\\r\\n */\\r\\n\\r\\nimport {IOption} from \\\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary CoreLib {\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the proportional quantity of long option tokens per short option token.\\r\\n     * @notice  For each long option token, there is quoteValue / baseValue quantity of short option tokens.\\r\\n     * @param   optionToken The Option to use to calculate proportional amounts. Each option has different proportions.\\r\\n     * @param   short The amount of short options used to calculate the proportional amount of long option tokens.\\r\\n     * @return  The proportional amount of long option tokens based on `short`.\\r\\n     */\\r\\n    function getProportionalLongOptions(IOption optionToken, uint256 short)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return short.mul(optionToken.getBaseValue()).div(optionToken.getQuoteValue());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the proportional quantity of short option tokens per long option token.\\r\\n     * @notice  For each short option token, there is baseValue / quoteValue quantity of long option tokens.\\r\\n     * @param   optionToken The Option to use to calculate proportional amounts. Each option has different proportions.\\r\\n     * @param   long The amount of long options used to calculate the proportional amount of short option tokens.\\r\\n     * @return  The proportional amount of short option tokens based on `long`.\\r\\n     */\\r\\n    function getProportionalShortOptions(IOption optionToken, uint256 long)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return long.mul(optionToken.getQuoteValue()).div(optionToken.getBaseValue());\\r\\n    }\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address token0, address token1)\\r\\n    {\\r\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3fc6c02bd467a5183cc2ac0ae5e7d32a265e2d41a9e0ae62cb879bfb1c002dd8\"},\"contracts/libraries/SwapsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Swaps Lib\\r\\n * @author  Primitive\\r\\n * @notice  Library for Swap Logic for Uniswap AMM.\\r\\n * @dev     @primitivefi/v1-connectors@2.0.0\\r\\n */\\r\\n\\r\\nimport {\\r\\n    IUniswapV2Router02\\r\\n} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {CoreLib, IOption, SafeMath} from \\\"./CoreLib.sol\\\";\\r\\n\\r\\nlibrary SwapsLib {\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    /**\\r\\n     * @notice  Passes in `params` to the UniswapV2Pair.swap() function to trigger the callback.\\r\\n     * @param   pair The Uniswap Pair to call.\\r\\n     * @param   token The token in the Pair to swap to, and thus optimistically receive.\\r\\n     * @param   amount The quantity of `token`s to optimistically receive first.\\r\\n     * @param   params  The data to call from this contract, using the `uniswapV2Callee` callback.\\r\\n     * @return  Whether or not the swap() call suceeded.\\r\\n     */\\r\\n    function _flashSwap(\\r\\n        IUniswapV2Pair pair,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bytes memory params\\r\\n    ) internal returns (bool) {\\r\\n        // Receives `amount` of `token` to this contract address.\\r\\n        uint256 amount0Out = pair.token0() == token ? amount : 0;\\r\\n        uint256 amount1Out = pair.token0() == token ? 0 : amount;\\r\\n        // Execute the callback function in params.\\r\\n        pair.swap(amount0Out, amount1Out, address(this), params);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Gets the amounts to pay out, pay back, and outstanding cost.\\r\\n     * @param   router The UniswapV2Router02 to use for calculating `amountsOut`.\\r\\n     * @param   optionToken The option token to use for fetching its corresponding Uniswap Pair.\\r\\n     * @param   redeemAmount The quantity of REDEEM tokens, with `quoteValue` units, needed to close the options.\\r\\n     */\\r\\n    function repayClose(\\r\\n        IUniswapV2Router02 router,\\r\\n        IOption optionToken,\\r\\n        uint256 redeemAmount\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // Outstanding is the cost remaining, should be 0 in most cases.\\r\\n        // Payout is the `premium` that the original caller receives in underlyingTokens.\\r\\n        (uint256 payout, uint256 outstanding) =\\r\\n            getClosePremium(router, optionToken, redeemAmount);\\r\\n\\r\\n        // In most cases there will be an underlying payout, which is subtracted from the redeemAmount.\\r\\n        uint256 cost = CoreLib.getProportionalLongOptions(optionToken, redeemAmount);\\r\\n        if (payout > 0) {\\r\\n            cost = cost.sub(payout);\\r\\n        }\\r\\n        return (payout, cost, outstanding);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the swap amounts required to return to repay the flash loan used to open a long position.\\r\\n     * @param   router The UniswapV2Router02 to use for calculating `amountsOut`.\\r\\n     * @param   optionToken The option token to use for fetching its corresponding Uniswap Pair.\\r\\n     * @param   underlyingAmount The quantity of UNDERLYING tokens, with `baseValue` units, needed to open the options.\\r\\n     */\\r\\n    function repayOpen(\\r\\n        IUniswapV2Router02 router,\\r\\n        IOption optionToken,\\r\\n        uint256 underlyingAmount\\r\\n    ) internal view returns (uint256, uint256) {\\r\\n        // Premium is the `underlyingTokens` required to buy the `optionToken`.\\r\\n        // ExtraRedeems is the `redeemTokens` that are remaining.\\r\\n        // If `premium` is not 0, `extraRedeems` should be 0, else `extraRedeems` is the payout (a negative premium).\\r\\n        (uint256 premium, uint256 extraRedeems) =\\r\\n            getOpenPremium(router, optionToken, underlyingAmount);\\r\\n\\r\\n        uint256 redeemPremium =\\r\\n            CoreLib.getProportionalShortOptions(optionToken, underlyingAmount);\\r\\n\\r\\n        if (extraRedeems > 0) {\\r\\n            redeemPremium = redeemPremium.sub(extraRedeems);\\r\\n        }\\r\\n        return (premium, redeemPremium);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev    Calculates the effective premium, denominated in underlyingTokens, to buy `quantity` of `optionToken`s.\\r\\n     * @notice UniswapV2 adds a 0.3009027% fee which is applied to the premium as 0.301%.\\r\\n     *         IMPORTANT: If the pair's reserve ratio is incorrect, there could be a 'negative' premium.\\r\\n     *         Buying negative premium options will pay out redeemTokens.\\r\\n     *         An 'incorrect' ratio occurs when the (reserves of redeemTokens / strike ratio) >= reserves of underlyingTokens.\\r\\n     *         Implicitly uses the `optionToken`'s underlying and redeem tokens for the pair.\\r\\n     * @param  router The UniswapV2Router02 contract.\\r\\n     * @param  optionToken The optionToken to get the premium cost of purchasing.\\r\\n     * @param  quantity The quantity of long option tokens that will be purchased.\\r\\n     */\\r\\n    function getOpenPremium(\\r\\n        IUniswapV2Router02 router,\\r\\n        IOption optionToken,\\r\\n        uint256 quantity\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            /* override */\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // longOptionTokens are opened by doing a swap from redeemTokens to underlyingTokens effectively.\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = optionToken.redeemToken();\\r\\n        path[1] = optionToken.getUnderlyingTokenAddress();\\r\\n\\r\\n        // `quantity` of underlyingTokens are output from the swap.\\r\\n        // They are used to mint options, which will mint `quantity` * quoteValue / baseValue amount of redeemTokens.\\r\\n        uint256 redeemsMinted =\\r\\n            CoreLib.getProportionalShortOptions(optionToken, quantity);\\r\\n\\r\\n        // The loanRemainderInUnderlyings will be the amount of underlyingTokens that are needed from the original\\r\\n        // transaction caller in order to pay the flash swap.\\r\\n        // IMPORTANT: THIS IS EFFECTIVELY THE PREMIUM PAID IN UNDERLYINGTOKENS TO PURCHASE THE OPTIONTOKEN.\\r\\n        uint256 loanRemainderInUnderlyings;\\r\\n\\r\\n        // Economically, negativePremiumPaymentInRedeems value should always be 0.\\r\\n        // In the case that we minted more redeemTokens than are needed to pay back the flash swap,\\r\\n        // (short -> underlying is a positive trade), there is an effective negative premium.\\r\\n        // In that case, this function will send out `negativePremiumAmount` of redeemTokens to the original caller.\\r\\n        // This means the user gets to keep the extra redeemTokens for free.\\r\\n        // Negative premium amount is the opposite difference of the loan remainder: (paid - flash loan amount)\\r\\n        uint256 negativePremiumPaymentInRedeems;\\r\\n\\r\\n        // Since the borrowed amount is underlyingTokens, and we are paying back in redeemTokens,\\r\\n        // we need to see how much redeemTokens must be returned for the borrowed amount.\\r\\n        // We can find that value by doing the normal swap math, getAmountsIn will give us the amount\\r\\n        // of redeemTokens are needed for the output amount of the flash loan.\\r\\n        // IMPORTANT: amountsIn[0] is how many short tokens we need to pay back.\\r\\n        // This value is most likely greater than the amount of redeemTokens minted.\\r\\n        uint256[] memory amountsIn = router.getAmountsIn(quantity, path);\\r\\n        uint256 redeemsRequired = amountsIn[0]; // the amountIn of redeemTokens based on the amountOut of `quantity`.\\r\\n        // If redeemsMinted is greater than redeems required, there is a cost of 0, implying a negative premium.\\r\\n        uint256 redeemCostRemaining =\\r\\n            redeemsRequired > redeemsMinted ? redeemsRequired.sub(redeemsMinted) : 0;\\r\\n        // If there is a negative premium, calculate the quantity of remaining redeemTokens after the `redeemsMinted` is spent.\\r\\n        negativePremiumPaymentInRedeems = redeemsMinted > redeemsRequired\\r\\n            ? redeemsMinted.sub(redeemsRequired)\\r\\n            : 0;\\r\\n\\r\\n        // In most cases, there will be an outstanding cost (assuming we minted less redeemTokens than the\\r\\n        // required amountIn of redeemTokens for the swap).\\r\\n        if (redeemCostRemaining > 0) {\\r\\n            // The user won't want to pay back the remaining cost in redeemTokens,\\r\\n            // because they borrowed underlyingTokens to mint them in the first place.\\r\\n            // So instead, we get the quantity of underlyingTokens that could be paid instead.\\r\\n            // We can calculate this using normal swap math.\\r\\n            // getAmountsOut will return the quantity of underlyingTokens that are output,\\r\\n            // based on some input of redeemTokens.\\r\\n            // The input redeemTokens is the remaining redeemToken cost, and the output\\r\\n            // underlyingTokens is the proportional amount of underlyingTokens.\\r\\n            // amountsOut[1] is then the outstanding flash loan value denominated in underlyingTokens.\\r\\n            uint256[] memory amountsOut = router.getAmountsOut(redeemCostRemaining, path);\\r\\n\\r\\n            // Returning withdrawn tokens to the pair has a fee of .003 / .997 = 0.3009027% which must be applied.\\r\\n            loanRemainderInUnderlyings = (\\r\\n                amountsOut[1].mul(100000).add(amountsOut[1].mul(301))\\r\\n            )\\r\\n                .div(100000);\\r\\n        }\\r\\n        return (loanRemainderInUnderlyings, negativePremiumPaymentInRedeems);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev    Calculates the effective premium, denominated in underlyingTokens, to sell `optionToken`s.\\r\\n     * @param  router The UniswapV2Router02 contract.\\r\\n     * @param  optionToken The optionToken to get the premium cost of purchasing.\\r\\n     * @param  quantity The quantity of short option tokens that will be closed.\\r\\n     */\\r\\n    function getClosePremium(\\r\\n        IUniswapV2Router02 router,\\r\\n        IOption optionToken,\\r\\n        uint256 quantity\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            /* override */\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // longOptionTokens are closed by doing a swap from underlyingTokens to redeemTokens.\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = optionToken.getUnderlyingTokenAddress();\\r\\n        path[1] = optionToken.redeemToken();\\r\\n        uint256 outputUnderlyings =\\r\\n            CoreLib.getProportionalLongOptions(optionToken, quantity);\\r\\n        // The loanRemainder will be the amount of underlyingTokens that are needed from the original\\r\\n        // transaction caller in order to pay the flash swap.\\r\\n        uint256 loanRemainder;\\r\\n\\r\\n        // Economically, underlyingPayout value should always be greater than 0, or this trade shouldn't be made.\\r\\n        // If an underlyingPayout is greater than 0, it means that the redeemTokens borrowed are worth less than the\\r\\n        // underlyingTokens received from closing the redeemToken<>optionTokens.\\r\\n        // If the redeemTokens are worth more than the underlyingTokens they are entitled to,\\r\\n        // then closing the redeemTokens will cost additional underlyingTokens. In this case,\\r\\n        // the transaction should be reverted. Or else, the user is paying extra at the expense of\\r\\n        // rebalancing the pool.\\r\\n        uint256 underlyingPayout;\\r\\n\\r\\n        // Since the borrowed amount is redeemTokens, and we are paying back in underlyingTokens,\\r\\n        // we need to see how much underlyingTokens must be returned for the borrowed amount.\\r\\n        // We can find that value by doing the normal swap math, getAmountsIn will give us the amount\\r\\n        // of underlyingTokens are needed for the output amount of the flash loan.\\r\\n        // IMPORTANT: amountsIn 0 is how many underlyingTokens we need to pay back.\\r\\n        // This value is most likely greater than the amount of underlyingTokens received from closing.\\r\\n        uint256[] memory amountsIn = router.getAmountsIn(quantity, path);\\r\\n\\r\\n        uint256 underlyingsRequired = amountsIn[0]; // the amountIn required of underlyingTokens based on the amountOut of flashloanQuantity\\r\\n        // If outputUnderlyings (received from closing) is greater than underlyings required,\\r\\n        // there is a positive payout.\\r\\n        underlyingPayout = outputUnderlyings > underlyingsRequired\\r\\n            ? outputUnderlyings.sub(underlyingsRequired)\\r\\n            : 0;\\r\\n\\r\\n        // If there is a negative payout, calculate the remaining cost of underlyingTokens.\\r\\n        uint256 underlyingCostRemaining =\\r\\n            underlyingsRequired > outputUnderlyings\\r\\n                ? underlyingsRequired.sub(outputUnderlyings)\\r\\n                : 0;\\r\\n\\r\\n        // In the case that there is a negative payout (additional underlyingTokens are required),\\r\\n        // get the remaining cost into the `loanRemainder` variable and also check to see\\r\\n        // if a user is willing to pay the negative cost. There is no rational economic incentive for this.\\r\\n        if (underlyingCostRemaining > 0) {\\r\\n            loanRemainder = underlyingCostRemaining;\\r\\n        }\\r\\n        return (underlyingPayout, loanRemainder);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38c0ce5146bb6f5a57b38d292e8e065389645551040f1a3789839e5c296eec14\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c8063904f91dc116100ab578063b09a828a1161006f578063b09a828a1461054f578063b0f479a11461057b578063cd04552414610590578063d2f9ff9d146105cf578063dd2c704e1461060e578063fc7aab0a1461064757610159565b8063904f91dc146104485780639245d58314610481578063a389783e146104c0578063a74528a5146104fb578063ab470f051461053a57610159565b806344534d57116100f257806344534d57146102ec5780635cda4b41146103445780635cda7b871461037f57806367ca0bc3146103d957806388cc58e41461043357610159565b8063107c279f1461015e57806310d1e85c1461018f57806320af09621461022657806322ef3f851461027957806327fb8380146102d757610159565b36610159576000546001600160a01b0316610147610686565b6001600160a01b03161461015757fe5b005b600080fd5b34801561016a57600080fd5b5061017361068b565b604080516001600160a01b039092168252519081900360200190f35b34801561019b57600080fd5b50610157600480360360808110156101b257600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156101e857600080fd5b8201836020820111156101fa57600080fd5b803590602001918460018302840111600160201b8311171561021b57600080fd5b50909250905061069a565b34801561023257600080fd5b506102656004803603606081101561024957600080fd5b506001600160a01b038135169060208101359060400135610988565b604080519115158252519081900360200190f35b34801561028557600080fd5b506102ac6004803603602081101561029c57600080fd5b50356001600160a01b0316610b35565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190f35b3480156102e357600080fd5b50610173610caa565b3480156102f857600080fd5b5061032b6004803603606081101561030f57600080fd5b506001600160a01b038135169060208101359060400135610cb9565b6040805192835260208301919091528051918290030190f35b34801561035057600080fd5b506102656004803603604081101561036757600080fd5b506001600160a01b0381358116916020013516610f91565b34801561038b57600080fd5b50610265600480360360e08110156103a257600080fd5b506001600160a01b038135169060208101359060408101359060608101359060ff6080820135169060a08101359060c00135611017565b3480156103e557600080fd5b50610265600480360360e08110156103fc57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060ff6080820135169060a08101359060c00135611313565b34801561043f57600080fd5b506101736114ba565b34801561045457600080fd5b5061032b6004803603604081101561046b57600080fd5b506001600160a01b0381351690602001356114c9565b34801561048d57600080fd5b50610265600480360360608110156104a457600080fd5b506001600160a01b0381351690602081013590604001356114f0565b3480156104cc57600080fd5b50610265600480360360408110156104e357600080fd5b506001600160a01b0381358116916020013516611689565b34801561050757600080fd5b5061032b6004803603606081101561051e57600080fd5b506001600160a01b0381351690602081013590604001356116b7565b34801561054657600080fd5b506101736119cf565b6102656004803603604081101561056557600080fd5b506001600160a01b038135169060200135611a45565b34801561058757600080fd5b50610173611c3f565b34801561059c57600080fd5b50610265600480360360608110156105b357600080fd5b506001600160a01b038135169060208101359060400135611c4e565b3480156105db57600080fd5b5061032b600480360360608110156105f257600080fd5b506001600160a01b038135169060208101359060400135611de7565b34801561061a57600080fd5b5061032b6004803603604081101561063157600080fd5b506001600160a01b038135169060200135612123565b34801561065357600080fd5b5061032b6004803603606081101561066a57600080fd5b506001600160a01b03813516906020810135906040013561213f565b335b90565b6000546001600160a01b031690565b6004546001600160a01b031663e6a439056106b3610686565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d602081101561071557600080fd5b505161071f610686565b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561075757600080fd5b505afa15801561076b573d6000803e3d6000fd5b505050506040513d602081101561078157600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152516044808301926020929190829003018186803b1580156107d157600080fd5b505afa1580156107e5573d6000803e3d6000fd5b505050506040513d60208110156107fb57600080fd5b50516001600160a01b031661080e610686565b6001600160a01b03161461081e57fe5b6001600160a01b038516301461087b576040805162461bcd60e51b815260206004820152601a60248201527f5072696d697469766553776170733a204e4f545f53454e444552000000000000604482015290519081900360640190fd5b60006060306001600160a01b03168484604051808383808284376040519201945060009350909150508083038183865af19150503d80600081146108db576040519150601f19603f3d011682016040523d82523d6000602084013e6108e0565b606091505b50915091506000808280602001905160408110156108fd57600080fd5b508051602090910151909250905083801561092c5750825115806109215750600082115b8061092c5750600081115b61097d576040805162461bcd60e51b815260206004820152601860248201527f5072696d697469766553776170733a2043414c4c4241434b0000000000000000604482015290519081900360640190fd5b505050505050505050565b6000600260035414156109d0576040805162461bcd60e51b815260206004820152601f6024820152600080516020613d16833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380881660048301529151879392909216916394669bf591602480820192602092909190829003018186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d6020811015610a4f57600080fd5b5051610a90576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b600080610a9c87610b35565b9250509150610b218282886040518060600160405280603c8152602001613dad603c91398051602091820120604080516001600160a01b038f166024820152604481018e905260648082018e905282518083039091018152608490910190915291820180516001600160e01b03166001600160e01b031990921691909117905261231c565b506001935050505060016003559392505050565b600080600080846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7457600080fd5b505afa158015610b88573d6000803e3d6000fd5b505050506040513d6020811015610b9e57600080fd5b505160408051632207afe960e11b815290519192506000916001600160a01b0388169163440f5fd2916004808301926020929190829003018186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d6020811015610c1057600080fd5b5051600480546040805163e6a4390560e01b81526001600160a01b038781169482019490945283851660248201529051939450600093929091169163e6a4390591604480820192602092909190829003018186803b158015610c7157600080fd5b505afa158015610c85573d6000803e3d6000fd5b505050506040513d6020811015610c9b57600080fd5b50519791965091945092505050565b6001546001600160a01b031690565b60008030610cc5610686565b6001600160a01b031614610d1b576040805162461bcd60e51b8152602060048201526018602482015277283934b6b4ba34bb32a9bbb0b8399d102727aa2fa9a2a62360411b604482015290519081900360640190fd5b600154604080516394669bf560e01b81526001600160a01b0380891660048301529151889392909216916394669bf591602480820192602092909190829003018186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d6020811015610d9557600080fd5b5051610dd6576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b8560008080610de484610b35565b9250925092506000610df58561252a565b60055490915060009081908190610e16906001600160a01b0316898f6127f2565b919450925090508215610e3657610e33848463ffffffff61283e16565b91505b8115610e5657610e566001600160a01b038716888463ffffffff61288716565b8015610ebe57828c1115610eb1576040805162461bcd60e51b815260206004820152601f60248201527f5072696d697469766553776170733a204e454741544956455f5041594f555400604482015290519081900360640190fd5b610ebc8682896128de565b505b8215610f24578b831015610f19576040805162461bcd60e51b815260206004820152601b60248201527f5072696d697469766553776170733a204d494e5f5052454d49554d0000000000604482015290519081900360640190fd5b610f2286612984565b505b8d6001600160a01b0316610f366119cf565b6001600160a01b03167fa082022e93cfcd9f1da5f9236718053910f7e840da080c789c7845698dc032ff8f86604051808381526020018281526020019250505060405180910390a350909c909b509950505050505050505050565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205460ff1661100d57610fdc6001600160a01b0384168360001963ffffffff612a3816565b6001600160a01b038084166000908152600260209081526040808320938616835292905220805460ff191660011790555b5060015b92915050565b60006002600354141561105f576040805162461bcd60e51b815260206004820152601f6024820152600080516020613d16833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808c16600483015291518b9392909216916394669bf591602480820192602092909190829003018186803b1580156110b457600080fd5b505afa1580156110c8573d6000803e3d6000fd5b505050506040513d60208110156110de57600080fd5b505161111f576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b60008061112b8b610b35565b5091509150806001600160a01b0316638fcbaf0c6111476119cf565b6001546001600160a01b03908116908516637ecebe006111656119cf565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156111ab57600080fd5b505afa1580156111bf573d6000803e3d6000fd5b505050506040513d60208110156111d557600080fd5b5051604080516001600160e01b031960e087901b1681526001600160a01b0394851660048201529290931660248301526044820152606481018c90526001608482015260ff8b1660a482015260c481018a905260e48101899052905161010480830192600092919082900301818387803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b505050506112fb82828c604051806060016040528060368152602001613e8660369139805190602001208f8f8f60405160240180846001600160a01b03166001600160a01b031681526020018381526020018281526020019350505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505061231c565b50600193505050506001600355979650505050505050565b60006002600354141561135b576040805162461bcd60e51b815260206004820152601f6024820152600080516020613d16833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808c16600483015291518b9392909216916394669bf591602480820192602092909190829003018186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d60208110156113da57600080fd5b505161141b576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b6000806114278b610b35565b5091509150806001600160a01b031663d505accf6114436119cf565b600154604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482018d9052606482018c905260ff8b16608483015260a482018a905260c482018990525160e480830192600092919082900301818387803b15801561125257600080fd5b6004546001600160a01b031690565b60055460009081906114e5906001600160a01b03168585612b4b565b915091509250929050565b600060026003541415611538576040805162461bcd60e51b815260206004820152601f6024820152600080516020613d16833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380881660048301529151879392909216916394669bf591602480820192602092909190829003018186803b15801561158d57600080fd5b505afa1580156115a1573d6000803e3d6000fd5b505050506040513d60208110156115b757600080fd5b50516115f8576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b60008061160487610b35565b9250509150610b21828288604051806060016040528060368152602001613d36603691398051602091820120604080516001600160a01b038f166024820152604481018e905260648082018e905282518083039091018152608490910190915291820180516001600160e01b03166001600160e01b031990921691909117905261231c565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b600080306116c3610686565b6001600160a01b031614611719576040805162461bcd60e51b8152602060048201526018602482015277283934b6b4ba34bb32a9bbb0b8399d102727aa2fa9a2a62360411b604482015290519081900360640190fd5b600154604080516394669bf560e01b81526001600160a01b0380891660048301529151889392909216916394669bf591602480820192602092909190829003018186803b15801561176957600080fd5b505afa15801561177d573d6000803e3d6000fd5b505050506040513d602081101561179357600080fd5b50516117d4576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b85600080806117e284610b35565b60005492955090935091506001600160a01b03808416911614611847576040805162461bcd60e51b81526020600482015260186024820152770a0e4d2dad2e8d2eccaa6eec2e0e674409c9ea8beae8aa8960431b604482015290519081900360640190fd5b6118508461252a565b506005546000908190819061186f906001600160a01b0316888e6127f2565b919450925090508115611896576118966001600160a01b038616878463ffffffff61288716565b80156118fe57828b11156118f1576040805162461bcd60e51b815260206004820152601f60248201527f5072696d697469766553776170733a204e454741544956455f5041594f555400604482015290519081900360640190fd5b6118fc8582886128de565b505b8215611963578a831015611959576040805162461bcd60e51b815260206004820152601b60248201527f5072696d697469766553776170733a204d494e5f5052454d49554d0000000000604482015290519081900360640190fd5b611961612e75565b505b8c6001600160a01b03166119756119cf565b6001600160a01b03167fa082022e93cfcd9f1da5f9236718053910f7e840da080c789c7845698dc032ff8e86604051808381526020018281526020019250505060405180910390a350909b909a5098505050505050505050565b6001546040805163ab470f0560e01b815290516000926001600160a01b03169163ab470f05916004808301926020929190829003018186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d6020811015611a3e57600080fd5b5051905090565b600060026003541415611a8d576040805162461bcd60e51b815260206004820152601f6024820152600080516020613d16833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d6020811015611b0c57600080fd5b5051611b4d576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b60003411611b99576040805162461bcd60e51b81526020600482015260146024820152735072696d697469766553776170733a205a45524f60601b604482015290519081900360640190fd5b600080611ba586610b35565b5091509150611c2c8282876040518060600160405280603d8152602001613de9603d91398051602091820120604080516001600160a01b038e166024820152604481018d90523460648083019190915282518083039091018152608490910190915291820180516001600160e01b03166001600160e01b031990921691909117905261231c565b5060019350505050600160035592915050565b6005546001600160a01b031690565b600060026003541415611c96576040805162461bcd60e51b815260206004820152601f6024820152600080516020613d16833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380881660048301529151879392909216916394669bf591602480820192602092909190829003018186803b158015611ceb57600080fd5b505afa158015611cff573d6000803e3d6000fd5b505050506040513d6020811015611d1557600080fd5b5051611d56576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b600080611d6287610b35565b5091509150610b21828288604051806060016040528060368152602001613e86603691398051602091820120604080516001600160a01b038f166024820152604481018e905260648082018e905282518083039091018152608490910190915291820180516001600160e01b03166001600160e01b031990921691909117905261231c565b60008030611df3610686565b6001600160a01b031614611e49576040805162461bcd60e51b8152602060048201526018602482015277283934b6b4ba34bb32a9bbb0b8399d102727aa2fa9a2a62360411b604482015290519081900360640190fd5b600154604080516394669bf560e01b81526001600160a01b0380891660048301529151889392909216916394669bf591602480820192602092909190829003018186803b158015611e9957600080fd5b505afa158015611ead573d6000803e3d6000fd5b505050506040513d6020811015611ec357600080fd5b5051611f04576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b8560008080611f1284610b35565b60005492955090935091506001600160a01b03808416911614611f77576040805162461bcd60e51b81526020600482015260186024820152770a0e4d2dad2e8d2eccaa6eec2e0e674409c9ea8beae8aa8960431b604482015290519081900360640190fd5b611f8084613015565b50506005546000908190611f9e906001600160a01b0316878d61310e565b9092509050811561208557818a1015611ffe576040805162461bcd60e51b815260206004820152601b60248201527f5072696d697469766553776170733a204d41585f5052454d49554d0000000000604482015290519081900360640190fd5b6000805460408051630d0e30db60e41b815290516001600160a01b039092169263d0e30db0928692600480820193929182900301818588803b15801561204357600080fd5b505af1158015612057573d6000803e3d6000fd5b505060005461207b93506001600160a01b031691508790508463ffffffff61288716565b612083612e75565b505b80156120a5576120a56001600160a01b038416868363ffffffff61288716565b6120ae83612984565b506120b88c612984565b508b6001600160a01b03166120cb6119cf565b6001600160a01b03167f89f5adc174562e07c9c9b1cae7109bbecb21cf9d1b2847e550042b8653c54a0e8d85604051808381526020018281526020019250505060405180910390a350989a9899505050505050505050565b60055460009081906114e5906001600160a01b03168585613158565b6000803061214b610686565b6001600160a01b0316146121a1576040805162461bcd60e51b8152602060048201526018602482015277283934b6b4ba34bb32a9bbb0b8399d102727aa2fa9a2a62360411b604482015290519081900360640190fd5b600154604080516394669bf560e01b81526001600160a01b0380891660048301529151889392909216916394669bf591602480820192602092909190829003018186803b1580156121f157600080fd5b505afa158015612205573d6000803e3d6000fd5b505050506040513d602081101561221b57600080fd5b505161225c576040805162461bcd60e51b815260206004820152601b6024820152600080516020613d8d833981519152604482015290519081900360640190fd5b856000808061226a84610b35565b92509250925061227984613015565b50506005546000908190612297906001600160a01b0316878d61310e565b9092509050811561208557818a10156122f7576040805162461bcd60e51b815260206004820152601b60248201527f5072696d697469766553776170733a204d41585f5052454d49554d0000000000604482015290519081900360640190fd5b6123018483613636565b506120856001600160a01b038516868463ffffffff61288716565b600080846001600160a01b0316866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561236257600080fd5b505afa158015612376573d6000803e3d6000fd5b505050506040513d602081101561238c57600080fd5b50516001600160a01b0316146123a35760006123a5565b835b90506000856001600160a01b0316876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ec57600080fd5b505afa158015612400573d6000803e3d6000fd5b505050506040513d602081101561241657600080fd5b50516001600160a01b03161461242c578461242f565b60005b9050866001600160a01b031663022c0d9f838330886040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156124b457818101518382015260200161249c565b50505050905090810190601f1680156124e15780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561250357600080fd5b505af1158015612517573d6000803e3d6000fd5b505050506001925050505b949350505050565b600080826001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561256657600080fd5b505afa15801561257a573d6000803e3d6000fd5b505050506040513d602081101561259057600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156125de57600080fd5b505afa1580156125f2573d6000803e3d6000fd5b505050506040513d602081101561260857600080fd5b5051905060006001600160a01b0385166370a082316126256119cf565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561266b57600080fd5b505afa15801561267f573d6000803e3d6000fd5b505050506040513d602081101561269557600080fd5b5051905060006126a586836136ca565b9050828111156126b25750815b42866001600160a01b03166325cb5bc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ec57600080fd5b505afa158015612700573d6000803e3d6000fd5b505050506040513d602081101561271657600080fd5b505110612751576127376001600160a01b038516878363ffffffff61288716565b61274b8661274588846137b0565b886128de565b5061276b565b61276b6001600160a01b038516878563ffffffff61288716565b60408051638349980560e01b815230600482015290516000916001600160a01b0389169163834998059160248082019260609290919082900301818787803b1580156127b657600080fd5b505af11580156127ca573d6000803e3d6000fd5b505050506040513d60608110156127e057600080fd5b5060400151955050505050505b919050565b6000806000806000612805888888612b4b565b91509150600061281588886137b0565b905082156128305761282d818463ffffffff61283e16565b90505b919891975095509350505050565b600061288083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061385e565b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526128d99084906138f5565b505050565b6000821561297a576001546040805163a2e49f1760e01b81526001600160a01b0387811660048301526024820187905285811660448301529151919092169163a2e49f179160648083019260209291908290030181600087803b15801561294457600080fd5b505af1158015612958573d6000803e3d6000fd5b505050506040513d602081101561296e57600080fd5b50600191506128809050565b5060009392505050565b604080516370a0823160e01b8152306004820152905160009182916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156129cf57600080fd5b505afa1580156129e3573d6000803e3d6000fd5b505050506040513d60208110156129f957600080fd5b505190508015612a2f57612a25612a0e6119cf565b6001600160a01b038516908363ffffffff61288716565b60019150506127ed565b50600092915050565b801580612abe575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612a9057600080fd5b505afa158015612aa4573d6000803e3d6000fd5b505050506040513d6020811015612aba57600080fd5b5051155b612af95760405162461bcd60e51b8152600401808060200182810382526036815260200180613e506036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526128d99084906138f5565b604080516002808252606080830184526000938493919290602083019080388339019050509050846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015612bab57600080fd5b505afa158015612bbf573d6000803e3d6000fd5b505050506040513d6020811015612bd557600080fd5b505181518290600090612be457fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3d57600080fd5b505afa158015612c51573d6000803e3d6000fd5b505050506040513d6020811015612c6757600080fd5b5051815182906001908110612c7857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000612ca486866137b0565b90506000806060896001600160a01b0316631f00ca7489876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612d11578181015183820152602001612cf9565b50505050905001935050505060006040518083038186803b158015612d3557600080fd5b505afa158015612d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612d7257600080fd5b8101908080516040519392919084600160201b821115612d9157600080fd5b908301906020820185811115612da657600080fd5b82518660208202830111600160201b82111715612dc257600080fd5b82525081516020918201928201910280838360005b83811015612def578181015183820152602001612dd7565b505050509050016040525050509050600081600081518110612e0d57fe5b60200260200101519050808511612e25576000612e35565b612e35858263ffffffff61283e16565b92506000858211612e47576000612e57565b612e57828763ffffffff61283e16565b90508015612e63578094505b50919a92995091975050505050505050565b60008054604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612ec057600080fd5b505afa158015612ed4573d6000803e3d6000fd5b505050506040513d6020811015612eea57600080fd5b50519050801561300d576000805460408051632e1a7d4d60e01b81526004810185905290516001600160a01b0390921692632e1a7d4d9260248084019382900301818387803b158015612f3c57600080fd5b505af1158015612f50573d6000803e3d6000fd5b505050506000612f5e6119cf565b6040516001600160a01b0391909116908390600081818185875af1925050503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b5050905080613004576040805162461bcd60e51b815260206004820152601c60248201527f436f6e6e6563746f723a204552525f53454e44494e475f455448455200000000604482015290519081900360640190fd5b91506106889050565b600191505090565b6000806000836001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561305357600080fd5b505afa158015613067573d6000803e3d6000fd5b505050506040513d602081101561307d57600080fd5b5051905061308b81856139a6565b5060408051633ea6b5f160e21b815230600482015281516001600160a01b0387169263fa9ad7c492602480820193918290030181600087803b1580156130d057600080fd5b505af11580156130e4573d6000803e3d6000fd5b505050506040513d60408110156130fa57600080fd5b508051602090910151909350915050915091565b60008060008061311f878787613158565b91509150600061312f87876136ca565b9050811561314a57613147818363ffffffff61283e16565b90505b919791965090945050505050565b604080516002808252606080830184526000938493919290602083019080388339019050509050846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156131b857600080fd5b505afa1580156131cc573d6000803e3d6000fd5b505050506040513d60208110156131e257600080fd5b5051815182906000906131f157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561324a57600080fd5b505afa15801561325e573d6000803e3d6000fd5b505050506040513d602081101561327457600080fd5b505181518290600190811061328557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006132b186866136ca565b90506000806060896001600160a01b0316631f00ca7489876040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561331e578181015183820152602001613306565b50505050905001935050505060006040518083038186803b15801561334257600080fd5b505afa158015613356573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561337f57600080fd5b8101908080516040519392919084600160201b82111561339e57600080fd5b9083019060208201858111156133b357600080fd5b82518660208202830111600160201b821117156133cf57600080fd5b82525081516020918201928201910280838360005b838110156133fc5781810151838201526020016133e4565b50505050905001604052505050905060008160008151811061341a57fe5b602002602001015190506000858211613434576000613444565b613444828763ffffffff61283e16565b9050818611613454576000613464565b613464868363ffffffff61283e16565b935080156136245760608c6001600160a01b031663d06ca61f838a6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156134d45781810151838201526020016134bc565b50505050905001935050505060006040518083038186803b1580156134f857600080fd5b505afa15801561350c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561353557600080fd5b8101908080516040519392919084600160201b82111561355457600080fd5b90830190602082018581111561356957600080fd5b82518660208202830111600160201b8211171561358557600080fd5b82525081516020918201928201910280838360005b838110156135b257818101518382015260200161359a565b505050509050016040525050509050613620620186a06136146135f461012d856001815181106135de57fe5b6020026020010151613a3990919063ffffffff16565b613608620186a0866001815181106135de57fe5b9063ffffffff613a9216565b9063ffffffff613aec16565b9550505b50929a91995090975050505050505050565b60008115612a2f576001546040805163a3e3808f60e01b81526001600160a01b038681166004830152602482018690529151919092169163a3e3808f9160448083019260209291908290030181600087803b15801561369457600080fd5b505af11580156136a8573d6000803e3d6000fd5b505050506040513d60208110156136be57600080fd5b50600191506110119050565b6000612880836001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b15801561370857600080fd5b505afa15801561371c573d6000803e3d6000fd5b505050506040513d602081101561373257600080fd5b505160408051627f0cfd60e11b81529051613614916001600160a01b0388169162fe19fa91600480820192602092909190829003018186803b15801561377757600080fd5b505afa15801561378b573d6000803e3d6000fd5b505050506040513d60208110156137a157600080fd5b5051859063ffffffff613a3916565b6000612880836001600160a01b031662fe19fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ed57600080fd5b505afa158015613801573d6000803e3d6000fd5b505050506040513d602081101561381757600080fd5b5051604080516316b2542760e31b81529051613614916001600160a01b0388169163b592a13891600480820192602092909190829003018186803b15801561377757600080fd5b600081848411156138ed5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156138b257818101518382015260200161389a565b50505050905090810190601f1680156138df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b606061394a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b2e9092919063ffffffff16565b8051909150156128d95780806020019051602081101561396957600080fd5b50516128d95760405162461bcd60e51b815260040180806020018281038252602a815260200180613e26602a913960400191505060405180910390fd5b604080516370a0823160e01b8152306004820152905160009182916001600160a01b038616916370a08231916024808301926020929190829003018186803b1580156139f157600080fd5b505afa158015613a05573d6000803e3d6000fd5b505050506040513d6020811015613a1b57600080fd5b505190506128806001600160a01b038516848363ffffffff61288716565b600082613a4857506000611011565b82820282848281613a5557fe5b04146128805760405162461bcd60e51b8152600401808060200182810382526021815260200180613d6c6021913960400191505060405180910390fd5b600082820183811015612880576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061288083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613b3d565b60606125228484600085613ba2565b60008183613b8c5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156138b257818101518382015260200161389a565b506000838581613b9857fe5b0495945050505050565b6060613bad85613d0f565b613bfe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613c3d5780518252601f199092019160209182019101613c1e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613c9f576040519150601f19603f3d011682016040523d82523d6000602084013e613ca4565b606091505b50915091508115613cb85791506125229050565b805115613cc85780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156138b257818101518382015260200161389a565b3b15159056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00666c617368436c6f73654c6f6e674f7074696f6e735468656e5377617028616464726573732c75696e743235362c75696e7432353629536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775072696d697469766553776170733a204556494c5f4f5054494f4e0000000000666c617368436c6f73654c6f6e674f7074696f6e735468656e53776170466f7245544828616464726573732c75696e743235362c75696e7432353629666c6173684d696e7453686f72744f7074696f6e735468656e537761705769746845544828616464726573732c75696e743235362c75696e74323536295361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365666c6173684d696e7453686f72744f7074696f6e735468656e5377617028616464726573732c75696e743235362c75696e7432353629a26469706673582212205609e9809369b4df24358a575acead0483f07d422f358e653542660cb0547d4564736f6c63430006020033",
  "devdoc": {
    "methods": {
      "checkApproval(address,address)": {
        "details": "This contract does not hold funds, infinite approvals cannot be exploited for profit.",
        "params": {
          "spender": "The address to allow to spend `token`.",
          "token": "The token to approve spending for."
        }
      },
      "closeFlashLong(address,uint256,uint256)": {
        "details": "Closes a longOptionToken position by flash swapping in redeemTokens,         closing the option, and paying back in underlyingTokens.",
        "params": {
          "amountRedeems": "The quantity of redeemTokens to borrow to close the options.",
          "minPayout": "The minimum payout of underlyingTokens sent out to the user.",
          "optionToken": "The address of the longOptionTokens to close."
        }
      },
      "closeFlashLongForETH(address,uint256,uint256)": {
        "details": "Closes a longOptionToken position by flash swapping in redeemTokens,         closing the option, and paying back in underlyingTokens.",
        "params": {
          "amountRedeems": "The quantity of redeemTokens to borrow to close the options.",
          "minPayout": "The minimum payout of underlyingTokens sent out to the user.",
          "optionToken": "The address of the longOptionTokens to close."
        }
      },
      "flashCloseLongOptionsThenSwap(address,uint256,uint256)": {
        "details": "Sends shortOptionTokens to _msgSender(), and pays back the UniswapV2Pair in underlyingTokens.",
        "params": {
          "flashLoanQuantity": "The quantity of shortOptionTokens borrowed to use to close longOptionTokens.",
          "minPayout": "The minimum payout of underlyingTokens sent to the `to` address.",
          "optionAddress": "The address of the longOptionTokes to close."
        }
      },
      "flashCloseLongOptionsThenSwapForETH(address,uint256,uint256)": {
        "details": "Sends shortOptionTokens to _msgSender(), and pays back the UniswapV2Pair in underlyingTokens.",
        "params": {
          "flashLoanQuantity": "The quantity of shortOptionTokens borrowed to use to close longOptionTokens.",
          "minPayout": "The minimum payout of underlyingTokens sent to the `to` address.",
          "optionAddress": "The address of the longOptionTokes to close."
        }
      },
      "flashMintShortOptionsThenSwap(address,uint256,uint256)": {
        "details": "Pays underlying token `premium` for `quantity` of `optionAddress` tokens.",
        "params": {
          "maxPremium": "The maximum quantity of underlyingTokens to pay for the optionTokens.",
          "optionAddress": "The address of the Option contract.",
          "quantity": "The quantity of options to mint using borrowed underlyingTokens."
        },
        "returns": {
          "_0": "Returns (amount, premium) of options purchased for total premium price."
        }
      },
      "flashMintShortOptionsThenSwapWithETH(address,uint256,uint256)": {
        "details": "Pays `premium` in ether for `quantity` of `optionAddress` tokens.",
        "params": {
          "maxPremium": "The maximum quantity of underlyingTokens to pay for the optionTokens.",
          "optionAddress": "The address of the Option contract.",
          "quantity": "The quantity of options to mint using borrowed underlyingTokens."
        },
        "returns": {
          "_0": "Returns (amount, premium) of options purchased for total premium price."
        }
      },
      "getClosePremium(address,uint256)": {
        "details": "Calculates the effective premium, denominated in underlyingTokens, to sell `optionToken`s.",
        "params": {
          "optionToken": "The optionToken to get the premium cost of purchasing.",
          "quantity": "The quantity of short option tokens that will be closed."
        },
        "returns": {
          "_0": "(uint, uint) Returns the `premium` to sell `quantity` of `optionToken` and the `negativePremium`."
        }
      },
      "getOpenPremium(address,uint256)": {
        "details": "Calculates the effective premium, denominated in underlyingTokens, to buy `quantity` of `optionToken`s.",
        "params": {
          "optionToken": "The optionToken to get the premium cost of purchasing.",
          "quantity": "The quantity of long option tokens that will be purchased."
        },
        "returns": {
          "_0": "(uint, uint) Returns the `premium` to buy `quantity` of `optionToken` and the `negativePremium`."
        }
      },
      "getOptionPair(address)": {
        "params": {
          "option": "The option token to get the corresponding UniswapV2Pair market."
        },
        "returns": {
          "_0": "The pair address, as well as the tokens of the pair."
        }
      },
      "openFlashLong(address,uint256,uint256)": {
        "details": "Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.",
        "params": {
          "amountOptions": "The quantity of longOptionTokens to purchase.",
          "maxPremium": "The maximum quantity of underlyingTokens to pay for the optionTokens.",
          "optionToken": "The option address."
        },
        "returns": {
          "_0": "Whether or not the call succeeded."
        }
      },
      "openFlashLongWithETH(address,uint256)": {
        "details": "Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.",
        "params": {
          "amountOptions": "The quantity of longOptionTokens to purchase.",
          "optionToken": "The option address."
        }
      },
      "uniswapV2Call(address,uint256,uint256,bytes)": {
        "details": "The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.",
        "params": {
          "amount0": "The quantity of token0 received to the `to` address in the swap() call.",
          "amount1": "The quantity of token1 received to the `to` address in the swap() call.",
          "data": "The payload passed in the `data` parameter of the swap() call.",
          "sender": "The original _msgSender() of the UniswapV2Pair.swap() call."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "checkApproval(address,address)": {
        "notice": "Approves the `spender` to pull `token` from this contract."
      },
      "closeFlashLong(address,uint256,uint256)": {
        "notice": "IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain."
      },
      "closeFlashLongForETH(address,uint256,uint256)": {
        "notice": "IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain."
      },
      "flashCloseLongOptionsThenSwap(address,uint256,uint256)": {
        "notice": "IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs."
      },
      "flashCloseLongOptionsThenSwapForETH(address,uint256,uint256)": {
        "notice": "IMPORTANT: If minPayout is 0, the `getCaller()` address is liable for negative payouts *if* that occurs."
      },
      "flashMintShortOptionsThenSwap(address,uint256,uint256)": {
        "notice": "Callback function executed in a UniswapV2Pair.swap() call for `openFlashLong`."
      },
      "flashMintShortOptionsThenSwapWithETH(address,uint256,uint256)": {
        "notice": "Callback function executed in a UniswapV2Pair.swap() call for `openFlashLongWithETH`."
      },
      "getCaller()": {
        "notice": "Returns the state variable `_CALLER` in the Primitive Router."
      },
      "getFactory()": {
        "notice": "Gets the UniswapV2Factory contract address."
      },
      "getOpenPremium(address,uint256)": {
        "notice": "UniswapV2 adds a 0.3009027% fee which is applied to the premium as 0.301%.         IMPORTANT: If the pair's reserve ratio is incorrect, there could be a 'negative' premium.         Buying negative premium options will pay out redeemTokens.         An 'incorrect' ratio occurs when the (reserves of redeemTokens / strike ratio) >= reserves of underlyingTokens.         Implicitly uses the `optionToken`'s underlying and redeem tokens for the pair."
      },
      "getOptionPair(address)": {
        "notice": "Fetchs the Uniswap Pair for an option's redeemToken and underlyingToken params."
      },
      "getPrimitiveRouter()": {
        "notice": "Returns the Primitive Router contract address."
      },
      "getRouter()": {
        "notice": "Gets the UniswapV2Router02 contract address."
      },
      "getWeth()": {
        "notice": "Returns the Weth contract address."
      },
      "isApproved(address,address)": {
        "notice": "Returns whether or not `spender` is approved to spend `token`, from this contract."
      },
      "openFlashLong(address,uint256,uint256)": {
        "notice": "IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.         IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid."
      },
      "openFlashLongWithDAIPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Executes the same as `openFlashLongWithPermit`, but for DAI."
      },
      "openFlashLongWithETH(address,uint256)": {
        "notice": "Uses Ether to pay to purchase the option tokens.         IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.         IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid."
      },
      "openFlashLongWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Executes the same as `openFlashLong`, but calls `permit` to pull underlying tokens."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3000,
        "contract": "contracts/connectors/PrimitiveSwaps.sol:PrimitiveSwaps",
        "label": "_weth",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IWETH)6960"
      },
      {
        "astId": 3002,
        "contract": "contracts/connectors/PrimitiveSwaps.sol:PrimitiveSwaps",
        "label": "_primitiveRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPrimitiveRouter)6793"
      },
      {
        "astId": 3008,
        "contract": "contracts/connectors/PrimitiveSwaps.sol:PrimitiveSwaps",
        "label": "_approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1358,
        "contract": "contracts/connectors/PrimitiveSwaps.sol:PrimitiveSwaps",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5267,
        "contract": "contracts/connectors/PrimitiveSwaps.sol:PrimitiveSwaps",
        "label": "_factory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Factory)1767"
      },
      {
        "astId": 5269,
        "contract": "contracts/connectors/PrimitiveSwaps.sol:PrimitiveSwaps",
        "label": "_router",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUniswapV2Router02)2405"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPrimitiveRouter)6793": {
        "encoding": "inplace",
        "label": "contract IPrimitiveRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)1767": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)2405": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)6960": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}