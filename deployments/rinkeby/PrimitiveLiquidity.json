{
  "address": "0xBc42ff40230CF715245831236925Da2c6894e3aA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "primitiveRouter_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUnderlying",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantityOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addShortLiquidityWithETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantityOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addShortLiquidityWithUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantityOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "addShortLiquidityWithUnderlyingWithDaiPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantityOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "addShortLiquidityWithUnderlyingWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "checkApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "option",
          "type": "address"
        }
      ],
      "name": "getOptionPair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrimitiveRouter",
      "outputs": [
        {
          "internalType": "contract IPrimitiveRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeShortLiquidityThenCloseOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeShortLiquidityThenCloseOptionsWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdde3d109c6722fe7e451b2c6cd8ae7a2d8e22146628b0a784375bd0f1e5439bc",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0xBc42ff40230CF715245831236925Da2c6894e3aA",
    "transactionIndex": 5,
    "gasUsed": "2423335",
    "logsBloom": "0x
    "blockHash": "0x091802814608833fafd4ab818e14fd2d58d8c6e7d49a93864bb22c36b6f012fc",
    "transactionHash": "0xdde3d109c6722fe7e451b2c6cd8ae7a2d8e22146628b0a784375bd0f1e5439bc",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 8189180,
        "transactionHash": "0xdde3d109c6722fe7e451b2c6cd8ae7a2d8e22146628b0a784375bd0f1e5439bc",
        "address": "0xc45c339313533a6c9B05184CD8B5486BC53F75Fb",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000bc42ff40230cf715245831236925da2c6894e3aa",
          "0x0000000000000000000000003f8316d3ed3d934277e4b0ba3a7ec5328ad3ef9f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x091802814608833fafd4ab818e14fd2d58d8c6e7d49a93864bb22c36b6f012fc"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 8189180,
        "transactionHash": "0xdde3d109c6722fe7e451b2c6cd8ae7a2d8e22146628b0a784375bd0f1e5439bc",
        "address": "0xBc42ff40230CF715245831236925Da2c6894e3aA",
        "topics": [
          "0x908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x091802814608833fafd4ab818e14fd2d58d8c6e7d49a93864bb22c36b6f012fc"
      }
    ],
    "blockNumber": 8189180,
    "cumulativeGasUsed": "3137337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc45c339313533a6c9B05184CD8B5486BC53F75Fb",
    "0x3F8316D3ed3d934277e4b0BA3A7ec5328Ad3ef9F",
    "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
    "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F"
  ],
  "solcInputHash": "18a9efaa166d10d3cc32ddcdf1a02460",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primitiveRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUnderlying\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addShortLiquidityWithETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addShortLiquidityWithUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addShortLiquidityWithUnderlyingWithDaiPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addShortLiquidityWithUnderlyingWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"checkApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"option\",\"type\":\"address\"}],\"name\":\"getOptionPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitiveRouter\",\"outputs\":[{\"internalType\":\"contract IPrimitiveRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeShortLiquidityThenCloseOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeShortLiquidityThenCloseOptionsWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"addShortLiquidityWithETH(address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting shortOptionTokens with underlyingTokens.\",\"params\":{\"amountBMax\":\"The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.\",\"amountBMin\":\"The minimum quantity of underlyingTokens expected to provide liquidity with.\",\"deadline\":\"The timestamp to expire a pending transaction.\",\"optionAddress\":\"The address of the optionToken to get the redeemToken to mint then provide liquidity for.\",\"quantityOptions\":\"The quantity of underlyingTokens to use to mint option + redeem tokens.\",\"to\":\"The address that receives UNI-V2 shares.\"}},\"addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting redeemTokens with underlyingTokens.\",\"params\":{\"amountBMax\":\"The quantity of underlyingTokens to add with redeemTokens to the Uniswap V2 Pair.\",\"amountBMin\":\"The minimum quantity of underlyingTokens expected to provide liquidity with.\",\"deadline\":\"The timestamp to expire a pending transaction.\",\"optionAddress\":\"The address of the optionToken to get the redeemToken to mint then provide liquidity for.\",\"quantityOptions\":\"The quantity of underlyingTokens to use to mint option + redeem tokens.\",\"to\":\"The address that receives UNI-V2 shares.\"}},\"addShortLiquidityWithUnderlyingWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting shortOptionTokens with underlyingTokens.\",\"params\":{\"amountBMax\":\"The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.\",\"amountBMin\":\"The minimum quantity of underlyingTokens expected to provide liquidity with.\",\"deadline\":\"The timestamp to expire a pending transaction.\",\"optionAddress\":\"The address of the optionToken to get the redeemToken to mint then provide liquidity for.\",\"quantityOptions\":\"The quantity of underlyingTokens to use to mint option + redeem tokens.\",\"to\":\"The address that receives UNI-V2 shares.\"}},\"checkApproval(address,address)\":{\"details\":\"This contract does not hold funds, infinite approvals cannot be exploited for profit.\",\"params\":{\"spender\":\"The address to allow to spend `token`.\",\"token\":\"The token to approve spending for.\"}},\"getOptionPair(address)\":{\"params\":{\"option\":\"The option token to get the corresponding UniswapV2Pair market.\"},\"returns\":{\"_0\":\"The pair address, as well as the tokens of the pair.\"}},\"removeShortLiquidityThenCloseOptions(address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Combines Uniswap V2 Router \\\"removeLiquidity\\\" function with Primitive \\\"closeOptions\\\" function.\",\"params\":{\"amountAMin\":\"The minimum quantity of shortOptionTokens to receive from removing liquidity.\",\"amountBMin\":\"The minimum quantity of underlyingTokens to receive from removing liquidity.\",\"deadline\":\"The timestamp to expire a pending transaction.\",\"liquidity\":\"The quantity of liquidity tokens to pull from _msgSender() and burn.\",\"optionAddress\":\"The address of the option that will be closed from burned UNI-V2 liquidity shares.\",\"to\":\"The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options.\"}},\"removeShortLiquidityThenCloseOptionsWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Uses permit to pull LP tokens.\",\"params\":{\"amountAMin\":\"The minimum quantity of shortOptionTokens to receive from removing liquidity.\",\"amountBMin\":\"The minimum quantity of underlyingTokens to receive from removing liquidity.\",\"deadline\":\"The timestamp to expire a pending transaction and `permit` call.\",\"liquidity\":\"The quantity of liquidity tokens to pull from _msgSender() and burn.\",\"optionAddress\":\"The address of the option that will be closed from burned UNI-V2 liquidity shares.\",\"to\":\"The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options.\"}}}},\"userdoc\":{\"methods\":{\"addShortLiquidityWithETH(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \\\"getCaller()\\\" address.         underlyingToken -> redeemToken -> UNI-V2.\"},\"addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \\\"getCaller()\\\" address.         underlyingToken -> redeemToken -> UNI-V2.\"},\"addShortLiquidityWithUnderlyingWithDaiPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Specialized function for `permit` calling on Put options (DAI).\"},\"addShortLiquidityWithUnderlyingWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \\\"getCaller()\\\" address.         underlyingToken -> redeemToken -> UNI-V2. Uses permit so user does not need to `approve()` our contracts.\"},\"checkApproval(address,address)\":{\"notice\":\"Approves the `spender` to pull `token` from this contract.\"},\"getCaller()\":{\"notice\":\"Returns the state variable `_CALLER` in the Primitive Router.\"},\"getFactory()\":{\"notice\":\"Gets the UniswapV2Factory contract address.\"},\"getOptionPair(address)\":{\"notice\":\"Fetchs the Uniswap Pair for an option's redeemToken and underlyingToken params.\"},\"getPrimitiveRouter()\":{\"notice\":\"Returns the Primitive Router contract address.\"},\"getRouter()\":{\"notice\":\"Gets the UniswapV2Router02 contract address.\"},\"getWeth()\":{\"notice\":\"Returns the Weth contract address.\"},\"isApproved(address,address)\":{\"notice\":\"Returns whether or not `spender` is approved to spend `token`, from this contract.\"},\"removeShortLiquidityThenCloseOptions(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Pulls UNI-V2 liquidity shares with shortOption<>underlying token, and optionTokens from _msgSender().         Then closes the longOptionTokens and withdraws underlyingTokens to the \\\"getCaller()\\\" address.         Sends underlyingTokens from the burned UNI-V2 liquidity shares to the \\\"getCaller()\\\" address.         UNI-V2 -> optionToken -> underlyingToken.\"},\"removeShortLiquidityThenCloseOptionsWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Pulls LP tokens, burns them, removes liquidity, pull option token, burns then, pushes all underlying tokens.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/PrimitiveLiquidity.sol\":\"PrimitiveLiquidity\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function pauseDeployments() external;\\r\\n\\r\\n    function unpauseDeployments() external;\\r\\n\\r\\n    function deployOption(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function setOptionFactory(address optionFactory_) external;\\r\\n\\r\\n    function setRedeemFactory(address redeemFactory_) external;\\r\\n\\r\\n    function optionFactory() external returns (address);\\r\\n\\r\\n    function redeemFactory() external returns (address);\\r\\n\\r\\n    function verifyToken(address tokenAddress) external;\\r\\n\\r\\n    function verifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function unverifyToken(address tokenAddress) external;\\r\\n\\r\\n    function unverifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function isVerifiedOption(address optionAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x02aeb84e8b748674bc31707899158885066923f203e7a3a58cee3c68a49ec96f\"},\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IOption } from \\\"./IOption.sol\\\";\\r\\n\\r\\ninterface ITrader {\\r\\n    function safeMint(\\r\\n        IOption optionToken,\\r\\n        uint256 mintQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeExercise(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeem(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function safeClose(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function safeUnwind(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xb8f9e6d923e556e137a606c76e9adf8fd07375c7ff0650f4a7932adc950df44f\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/connectors/PrimitiveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Connector\\r\\n * @author  Primitive\\r\\n * @notice  Low-level abstract contract for Primitive Connectors to inherit from.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {Context} from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n// Primitive\\r\\nimport {CoreLib, IOption} from \\\"../libraries/CoreLib.sol\\\";\\r\\nimport {\\r\\n    IPrimitiveConnector,\\r\\n    IPrimitiveRouter,\\r\\n    IWETH\\r\\n} from \\\"../interfaces/IPrimitiveConnector.sol\\\";\\r\\n\\r\\nabstract contract PrimitiveConnector is IPrimitiveConnector, Context {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n\\r\\n    IWETH internal _weth; // Canonical WETH9\\r\\n    IPrimitiveRouter internal _primitiveRouter; // The PrimitiveRouter contract which executes calls.\\r\\n    mapping(address => mapping(address => bool)) internal _approved; // Stores approvals for future checks.\\r\\n\\r\\n    // ===== Constructor =====\\r\\n\\r\\n    constructor(address weth_, address primitiveRouter_) public {\\r\\n        _weth = IWETH(weth_);\\r\\n        _primitiveRouter = IPrimitiveRouter(primitiveRouter_);\\r\\n        checkApproval(weth_, primitiveRouter_); // Approves this contract's weth to be spent by router.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Reverts if the `option` is not registered in the PrimitiveRouter contract.\\r\\n     * @dev     Any `option` which is deployed from the Primitive Registry can be registered with the Router.\\r\\n     * @param   option The Primitive Option to check if registered.\\r\\n     */\\r\\n    modifier onlyRegistered(IOption option) {\\r\\n        require(\\r\\n            _primitiveRouter.getRegisteredOption(address(option)),\\r\\n            \\\"PrimitiveSwaps: EVIL_OPTION\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ===== External =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Approves the `spender` to pull `token` from this contract.\\r\\n     * @dev     This contract does not hold funds, infinite approvals cannot be exploited for profit.\\r\\n     * @param   token The token to approve spending for.\\r\\n     * @param   spender The address to allow to spend `token`.\\r\\n     */\\r\\n    function checkApproval(address token, address spender)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (!_approved[token][spender]) {\\r\\n            IERC20(token).safeApprove(spender, uint256(-1));\\r\\n            _approved[token][spender] = true;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ===== Internal =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Deposits `msg.value` into the Weth contract for Weth tokens.\\r\\n     * @return  Whether or not ether was deposited into Weth.\\r\\n     */\\r\\n    function _depositETH() internal returns (bool) {\\r\\n        if (msg.value > 0) {\\r\\n            _weth.deposit.value(msg.value)();\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of Weth to withdraw Ether and send it to `getCaller()`.\\r\\n     */\\r\\n    function _withdrawETH() internal returns (bool) {\\r\\n        uint256 quantity = IERC20(address(_weth)).balanceOf(address(this));\\r\\n        if (quantity > 0) {\\r\\n            // Withdraw ethers with weth.\\r\\n            _weth.withdraw(quantity);\\r\\n            // Send ether.\\r\\n            (bool success, ) = getCaller().call.value(quantity)(\\\"\\\");\\r\\n            // Revert is call is unsuccessful.\\r\\n            require(success, \\\"Connector: ERR_SENDING_ETHER\\\");\\r\\n            return success;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls the Router to pull `token` from the getCaller() and send them to this contract.\\r\\n     * @dev     This eliminates the need for users to approve the Router and each connector.\\r\\n     * @param   token The token to pull from `getCaller()` into this contract.\\r\\n     * @param   quantity The amount of `token` to pull into this contract.\\r\\n     * @return  Whether or not the `token` was transferred into this contract.\\r\\n     */\\r\\n    function _transferFromCaller(address token, uint256 quantity)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (quantity > 0) {\\r\\n            _primitiveRouter.transferFromCaller(token, quantity);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pushes this contract's balance of `token` to `getCaller()`.\\r\\n     * @dev     getCaller() is the original `msg.sender` of the Router's `execute` fn.\\r\\n     * @param   token The token to transfer to `getCaller()`.\\r\\n     * @return  Whether or not the `token` was transferred to `getCaller()`.\\r\\n     */\\r\\n    function _transferToCaller(address token) internal returns (bool) {\\r\\n        uint256 quantity = IERC20(token).balanceOf(address(this));\\r\\n        if (quantity > 0) {\\r\\n            IERC20(token).safeTransfer(getCaller(), quantity);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls the Router to pull `token` from the getCaller() and send them to this contract.\\r\\n     * @dev     This eliminates the need for users to approve the Router and each connector.\\r\\n     * @param   token The token to pull from `getCaller()`.\\r\\n     * @param   quantity The amount of `token` to pull.\\r\\n     * @param   receiver The `to` address to send `quantity` of `token` to.\\r\\n     * @return  Whether or not `token` was transferred to `receiver`.\\r\\n     */\\r\\n    function _transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 quantity,\\r\\n        address receiver\\r\\n    ) internal returns (bool) {\\r\\n        if (quantity > 0) {\\r\\n            _primitiveRouter.transferFromCallerToReceiver(token, quantity, receiver);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of underlyingTokens to mint optionTokens to this contract.\\r\\n     * @param   optionToken The Primitive Option to mint.\\r\\n     * @return  (uint, uint) (longOptions, shortOptions)\\r\\n     */\\r\\n    function _mintOptions(IOption optionToken) internal returns (uint256, uint256) {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        _transferBalanceToReceiver(underlying, address(optionToken)); // Sends to option contract\\r\\n        return optionToken.mintOptions(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of underlyingTokens to mint optionTokens to `receiver`.\\r\\n     * @param   optionToken The Primitive Option to mint.\\r\\n     * @param   receiver The address that will received the minted long and short optionTokens.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function _mintOptionsToReceiver(IOption optionToken, address receiver)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        _transferBalanceToReceiver(underlying, address(optionToken)); // Sends to option contract\\r\\n        return optionToken.mintOptions(receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pulls underlying tokens from `getCaller()` to option contract, then invokes mintOptions().\\r\\n     * @param   optionToken The option token to mint.\\r\\n     * @param   quantity The amount of option tokens to mint.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function _mintOptionsFromCaller(IOption optionToken, uint256 quantity)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        require(quantity > 0, \\\"ERR_ZERO\\\");\\r\\n        _transferFromCallerToReceiver(\\r\\n            optionToken.getUnderlyingTokenAddress(),\\r\\n            quantity,\\r\\n            address(optionToken)\\r\\n        );\\r\\n        return optionToken.mintOptions(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Multi-step operation to close options.\\r\\n     *          1. Transfer balanceOf `redeem` option token to the option contract.\\r\\n     *          2. If NOT expired, pull `option` tokens from `getCaller()` and send to option contract.\\r\\n     *          3. Invoke `closeOptions()` to burn the options and release underlyings to this contract.\\r\\n     * @return  The amount of underlyingTokens released to this contract.\\r\\n     */\\r\\n    function _closeOptions(IOption optionToken) internal returns (uint256) {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        uint256 quantity = _transferBalanceToReceiver(redeem, address(optionToken));\\r\\n\\r\\n        if (optionToken.getExpiryTime() >= now) {\\r\\n            _transferFromCallerToReceiver(\\r\\n                address(optionToken),\\r\\n                CoreLib.getProportionalLongOptions(optionToken, quantity),\\r\\n                address(optionToken)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (, , uint256 outputUnderlyings) = optionToken.closeOptions(address(this));\\r\\n        return outputUnderlyings;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Multi-step operation to exercise options.\\r\\n     *          1. Transfer balanceOf `strike` token to option contract.\\r\\n     *          2. Transfer `amount` of options to exercise to option contract.\\r\\n     *          3. Invoke `exerciseOptions()` and specify `getCaller()` as the receiver.\\r\\n     * @dev     If the balanceOf `strike` and `amount` of options are not in correct proportions, call will fail.\\r\\n     * @param   optionToken The option to exercise.\\r\\n     * @param   amount The quantity of options to exercise.\\r\\n     */\\r\\n    function _exerciseOptions(IOption optionToken, uint256 amount)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address strike = optionToken.getStrikeTokenAddress();\\r\\n        _transferBalanceToReceiver(strike, address(optionToken));\\r\\n        IERC20(address(optionToken)).safeTransfer(address(optionToken), amount);\\r\\n        return optionToken.exerciseOptions(getCaller(), amount, new bytes(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Transfers this contract's balance of Redeem tokens and invokes the redemption function.\\r\\n     * @param   optionToken The optionToken to redeem, not the redeem token itself.\\r\\n     */\\r\\n    function _redeemOptions(IOption optionToken) internal returns (uint256) {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        _transferBalanceToReceiver(redeem, address(optionToken));\\r\\n        return optionToken.redeemStrikeTokens(getCaller());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Utility function to transfer this contract's balance of `token` to `receiver`.\\r\\n     * @param   token The token to transfer.\\r\\n     * @param   receiver The address that receives the token.\\r\\n     * @return  Returns the quantity of `token` transferred.\\r\\n     */\\r\\n    function _transferBalanceToReceiver(address token, address receiver)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 quantity = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).safeTransfer(receiver, quantity);\\r\\n        return quantity;\\r\\n    }\\r\\n\\r\\n    // ===== Fallback =====\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(_msgSender() == address(_weth)); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Weth contract address.\\r\\n     */\\r\\n    function getWeth() public view override returns (IWETH) {\\r\\n        return _weth;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the state variable `_CALLER` in the Primitive Router.\\r\\n     */\\r\\n    function getCaller() public view override returns (address) {\\r\\n        return _primitiveRouter.getCaller();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Primitive Router contract address.\\r\\n     */\\r\\n    function getPrimitiveRouter() public view override returns (IPrimitiveRouter) {\\r\\n        return _primitiveRouter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns whether or not `spender` is approved to spend `token`, from this contract.\\r\\n     */\\r\\n    function isApproved(address token, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _approved[token][spender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcddc8f0221374d6108635f23027af7eba1084988609bf452e0ddc36c22dc1c94\"},\"contracts/connectors/PrimitiveLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Liquidity\\r\\n * @author  Primitive\\r\\n * @notice  Manage liquidity on Uniswap & Sushiswap Venues.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n// Interfaces\\r\\nimport {\\r\\n    IPrimitiveLiquidity,\\r\\n    IUniswapV2Router02,\\r\\n    IUniswapV2Factory,\\r\\n    IUniswapV2Pair,\\r\\n    IERC20Permit,\\r\\n    IOption\\r\\n} from \\\"../interfaces/IPrimitiveLiquidity.sol\\\";\\r\\n// Primitive\\r\\nimport {PrimitiveConnector} from \\\"./PrimitiveConnector.sol\\\";\\r\\nimport {CoreLib, SafeMath} from \\\"../libraries/CoreLib.sol\\\";\\r\\n\\r\\ninterface DaiPermit {\\r\\n    function permit(\\r\\n        address holder,\\r\\n        address spender,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        bool allowed,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract PrimitiveLiquidity is PrimitiveConnector, IPrimitiveLiquidity, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    event Initialized(address indexed from); // Emitted on deployment.\\r\\n    event AddLiquidity(address indexed from, address indexed option, uint256 liquidity);\\r\\n    event RemoveLiquidity(\\r\\n        address indexed from,\\r\\n        address indexed option,\\r\\n        uint256 totalUnderlying\\r\\n    );\\r\\n\\r\\n    IUniswapV2Factory private _factory; // The Uniswap V2 factory contract to get pair addresses from.\\r\\n    IUniswapV2Router02 private _router; // The Uniswap Router contract used to interact with the protocol.\\r\\n\\r\\n    // ===== Constructor =====\\r\\n    constructor(\\r\\n        address weth_,\\r\\n        address primitiveRouter_,\\r\\n        address factory_,\\r\\n        address router_\\r\\n    ) public PrimitiveConnector(weth_, primitiveRouter_) {\\r\\n        _factory = IUniswapV2Factory(factory_);\\r\\n        _router = IUniswapV2Router02(router_);\\r\\n        emit Initialized(_msgSender());\\r\\n    }\\r\\n\\r\\n    // ===== Liquidity Operations =====\\r\\n\\r\\n    /**\\r\\n     * @dev     Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting redeemTokens with underlyingTokens.\\r\\n     * @notice  Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \\\"getCaller()\\\" address.\\r\\n     *          underlyingToken -> redeemToken -> UNI-V2.\\r\\n     * @param   optionAddress The address of the optionToken to get the redeemToken to mint then provide liquidity for.\\r\\n     * @param   quantityOptions The quantity of underlyingTokens to use to mint option + redeem tokens.\\r\\n     * @param   amountBMax The quantity of underlyingTokens to add with redeemTokens to the Uniswap V2 Pair.\\r\\n     * @param   amountBMin The minimum quantity of underlyingTokens expected to provide liquidity with.\\r\\n     * @param   to The address that receives UNI-V2 shares.\\r\\n     * @param   deadline The timestamp to expire a pending transaction.\\r\\n     */\\r\\n    function addShortLiquidityWithUnderlying(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(IOption(optionAddress))\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        uint256 liquidity;\\r\\n        address underlying = IOption(optionAddress).getUnderlyingTokenAddress();\\r\\n        // Pulls total = (quantityOptions + amountBMax) of underlyingTokens from `getCaller()` to this contract.\\r\\n        {\\r\\n            uint256 sum = quantityOptions.add(amountBMax);\\r\\n            _transferFromCaller(underlying, sum);\\r\\n        }\\r\\n        // Pushes underlyingTokens to option contract and mints option + redeem tokens to this contract.\\r\\n        IERC20(underlying).safeTransfer(optionAddress, quantityOptions);\\r\\n        (, uint256 outputRedeems) = IOption(optionAddress).mintOptions(address(this));\\r\\n\\r\\n        {\\r\\n            // scope for adding exact liquidity, avoids stack too deep errors\\r\\n            IOption optionToken = IOption(optionAddress);\\r\\n            address redeem = optionToken.redeemToken();\\r\\n            AddAmounts memory params;\\r\\n            params.amountAMax = outputRedeems;\\r\\n            params.amountBMax = amountBMax;\\r\\n            params.amountAMin = outputRedeems;\\r\\n            params.amountBMin = amountBMin;\\r\\n            params.deadline = deadline;\\r\\n            // Approves Uniswap V2 Pair pull tokens from this contract.\\r\\n            checkApproval(redeem, address(_router));\\r\\n            checkApproval(underlying, address(_router));\\r\\n            // Adds liquidity to Uniswap V2 Pair and returns liquidity shares to the \\\"getCaller()\\\" address.\\r\\n            (amountA, amountB, liquidity) = _addLiquidity(redeem, underlying, params);\\r\\n            // Check for exact liquidity provided.\\r\\n            assert(amountA == outputRedeems);\\r\\n            // Return remaining tokens\\r\\n            _transferToCaller(underlying);\\r\\n            _transferToCaller(redeem);\\r\\n            _transferToCaller(address(optionToken));\\r\\n        }\\r\\n        emit AddLiquidity(getCaller(), optionAddress, liquidity);\\r\\n        return (amountA, amountB, liquidity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting shortOptionTokens with underlyingTokens.\\r\\n     * @notice  Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \\\"getCaller()\\\" address.\\r\\n     *          underlyingToken -> redeemToken -> UNI-V2. Uses permit so user does not need to `approve()` our contracts.\\r\\n     * @param   optionAddress The address of the optionToken to get the redeemToken to mint then provide liquidity for.\\r\\n     * @param   quantityOptions The quantity of underlyingTokens to use to mint option + redeem tokens.\\r\\n     * @param   amountBMax The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.\\r\\n     * @param   amountBMin The minimum quantity of underlyingTokens expected to provide liquidity with.\\r\\n     * @param   to The address that receives UNI-V2 shares.\\r\\n     * @param   deadline The timestamp to expire a pending transaction.\\r\\n     */\\r\\n    function addShortLiquidityWithUnderlyingWithPermit(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyRegistered(IOption(optionAddress))\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        {\\r\\n            // avoids stack too deep errors\\r\\n            address underlying = IOption(optionAddress).getUnderlyingTokenAddress();\\r\\n            uint256 sum = quantityOptions.add(amountBMax);\\r\\n            IERC20Permit(underlying).permit(\\r\\n                getCaller(),\\r\\n                address(_primitiveRouter),\\r\\n                sum,\\r\\n                deadline,\\r\\n                v,\\r\\n                r,\\r\\n                s\\r\\n            );\\r\\n        }\\r\\n        return\\r\\n            addShortLiquidityWithUnderlying(\\r\\n                optionAddress,\\r\\n                quantityOptions,\\r\\n                amountBMax,\\r\\n                amountBMin,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Specialized function for `permit` calling on Put options (DAI).\\r\\n     */\\r\\n    function addShortLiquidityWithUnderlyingWithDaiPermit(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyRegistered(IOption(optionAddress))\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        address underlying = IOption(optionAddress).getUnderlyingTokenAddress();\\r\\n        DaiPermit(underlying).permit(\\r\\n            getCaller(),\\r\\n            address(_primitiveRouter),\\r\\n            IERC20Permit(underlying).nonces(getCaller()),\\r\\n            deadline,\\r\\n            true,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        return\\r\\n            addShortLiquidityWithUnderlying(\\r\\n                optionAddress,\\r\\n                quantityOptions,\\r\\n                amountBMax,\\r\\n                amountBMin,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting shortOptionTokens with underlyingTokens.\\r\\n     * @notice  Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \\\"getCaller()\\\" address.\\r\\n     *          underlyingToken -> redeemToken -> UNI-V2.\\r\\n     * @param   optionAddress The address of the optionToken to get the redeemToken to mint then provide liquidity for.\\r\\n     * @param   quantityOptions The quantity of underlyingTokens to use to mint option + redeem tokens.\\r\\n     * @param   amountBMax The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.\\r\\n     * @param   amountBMin The minimum quantity of underlyingTokens expected to provide liquidity with.\\r\\n     * @param   to The address that receives UNI-V2 shares.\\r\\n     * @param   deadline The timestamp to expire a pending transaction.\\r\\n     */\\r\\n    function addShortLiquidityWithETH(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        public\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(IOption(optionAddress))\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            quantityOptions.add(amountBMax) >= msg.value,\\r\\n            \\\"PrimitiveLiquidity: INSUFFICIENT\\\"\\r\\n        );\\r\\n\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        uint256 liquidity;\\r\\n        address underlying = IOption(optionAddress).getUnderlyingTokenAddress();\\r\\n        require(underlying == address(_weth), \\\"PrimitiveLiquidity: NOT_WETH\\\");\\r\\n\\r\\n        _depositETH(); // Wraps `msg.value` to Weth.\\r\\n        // Pushes Weth to option contract and mints option + redeem tokens to this contract.\\r\\n        IERC20(underlying).safeTransfer(optionAddress, quantityOptions);\\r\\n        (, uint256 outputRedeems) = IOption(optionAddress).mintOptions(address(this));\\r\\n\\r\\n        {\\r\\n            // scope for adding exact liquidity, avoids stack too deep errors\\r\\n            IOption optionToken = IOption(optionAddress);\\r\\n            address redeem = optionToken.redeemToken();\\r\\n            AddAmounts memory params;\\r\\n            params.amountAMax = outputRedeems;\\r\\n            params.amountBMax = amountBMax;\\r\\n            params.amountAMin = outputRedeems;\\r\\n            params.amountBMin = amountBMin;\\r\\n            params.deadline = deadline;\\r\\n\\r\\n            // Approves Uniswap V2 Pair pull tokens from this contract.\\r\\n            checkApproval(redeem, address(_router));\\r\\n            checkApproval(underlying, address(_router));\\r\\n            // Adds liquidity to Uniswap V2 Pair.\\r\\n            (amountA, amountB, liquidity) = _addLiquidity(redeem, underlying, params);\\r\\n            assert(amountA == outputRedeems); // Check for exact liquidity provided.\\r\\n            // Return remaining tokens and ether.\\r\\n            _withdrawETH();\\r\\n            _transferToCaller(redeem);\\r\\n            _transferToCaller(address(optionToken));\\r\\n        }\\r\\n        emit AddLiquidity(getCaller(), optionAddress, liquidity);\\r\\n        return (amountA, amountB, liquidity);\\r\\n    }\\r\\n\\r\\n    struct AddAmounts {\\r\\n        uint256 amountAMax;\\r\\n        uint256 amountBMax;\\r\\n        uint256 amountAMin;\\r\\n        uint256 amountBMin;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls UniswapV2Router02.addLiquidity() function using this contract's tokens.\\r\\n     * @param   tokenA The first token of the Uniswap Pair to add as liquidity.\\r\\n     * @param   tokenB The second token of the Uniswap Pair to add as liquidity.\\r\\n     * @param   params The amounts specified to be added as liquidity. Adds exact short options.\\r\\n     * @return  Returns the (amountTokenA, amountTokenB, liquidity).\\r\\n     */\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        AddAmounts memory params\\r\\n    )\\r\\n        internal\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            _router.addLiquidity(\\r\\n                tokenA,\\r\\n                tokenB,\\r\\n                params.amountAMax,\\r\\n                params.amountBMax,\\r\\n                params.amountAMin,\\r\\n                params.amountBMin,\\r\\n                getCaller(),\\r\\n                params.deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Combines Uniswap V2 Router \\\"removeLiquidity\\\" function with Primitive \\\"closeOptions\\\" function.\\r\\n     * @notice  Pulls UNI-V2 liquidity shares with shortOption<>underlying token, and optionTokens from _msgSender().\\r\\n     *          Then closes the longOptionTokens and withdraws underlyingTokens to the \\\"getCaller()\\\" address.\\r\\n     *          Sends underlyingTokens from the burned UNI-V2 liquidity shares to the \\\"getCaller()\\\" address.\\r\\n     *          UNI-V2 -> optionToken -> underlyingToken.\\r\\n     * @param   optionAddress The address of the option that will be closed from burned UNI-V2 liquidity shares.\\r\\n     * @param   liquidity The quantity of liquidity tokens to pull from _msgSender() and burn.\\r\\n     * @param   amountAMin The minimum quantity of shortOptionTokens to receive from removing liquidity.\\r\\n     * @param   amountBMin The minimum quantity of underlyingTokens to receive from removing liquidity.\\r\\n     * @param   to The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options.\\r\\n     * @param   deadline The timestamp to expire a pending transaction.\\r\\n     */\\r\\n    function removeShortLiquidityThenCloseOptions(\\r\\n        address optionAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(IOption(optionAddress))\\r\\n        returns (uint256)\\r\\n    {\\r\\n        IOption optionToken = IOption(optionAddress);\\r\\n        (IUniswapV2Pair pair, address underlying, address redeem) =\\r\\n            getOptionPair(optionToken);\\r\\n        // Gets amounts struct.\\r\\n        RemoveAmounts memory params;\\r\\n        params.liquidity = liquidity;\\r\\n        params.amountAMin = amountAMin;\\r\\n        params.amountBMin = amountBMin;\\r\\n        params.deadline = deadline;\\r\\n        _transferFromCaller(address(pair), liquidity); // Pulls lp tokens from `getCaller()`.\\r\\n        checkApproval(address(pair), address(_router)); // Checks lp tokens can be pulled from here.\\r\\n        // Calls removeLiquidity on the UniswapV2Router02.\\r\\n        (, uint256 underlyingAmount) = _removeLiquidity(redeem, underlying, params);\\r\\n        uint256 underlyingProceeds = _closeOptions(optionToken); // Returns amount of underlying tokens released.\\r\\n        // Return remaining tokens/ether.\\r\\n        _transferToCaller(redeem); // Push any remaining redeemTokens from removing liquidity (dust).\\r\\n        if (underlying == address(_weth)) {\\r\\n            _withdrawETH(); // Unwraps Weth and sends ether to `getCaller()`.\\r\\n        } else {\\r\\n            _transferToCaller(underlying); // Pushes underlying token to `getCaller()`.\\r\\n        }\\r\\n        uint256 sum = underlyingProceeds.add(underlyingAmount); // Total underlyings sent to `getCaller()`.\\r\\n        emit RemoveLiquidity(getCaller(), address(optionToken), sum);\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pulls LP tokens, burns them, removes liquidity, pull option token, burns then, pushes all underlying tokens.\\r\\n     * @dev     Uses permit to pull LP tokens.\\r\\n     * @param   optionAddress The address of the option that will be closed from burned UNI-V2 liquidity shares.\\r\\n     * @param   liquidity The quantity of liquidity tokens to pull from _msgSender() and burn.\\r\\n     * @param   amountAMin The minimum quantity of shortOptionTokens to receive from removing liquidity.\\r\\n     * @param   amountBMin The minimum quantity of underlyingTokens to receive from removing liquidity.\\r\\n     * @param   to The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options.\\r\\n     * @param   deadline The timestamp to expire a pending transaction and `permit` call.\\r\\n     */\\r\\n    function removeShortLiquidityThenCloseOptionsWithPermit(\\r\\n        address optionAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override onlyRegistered(IOption(optionAddress)) returns (uint256) {\\r\\n        IOption optionToken = IOption(optionAddress);\\r\\n        uint256 liquidity_ = liquidity;\\r\\n        uint256 deadline_ = deadline;\\r\\n        uint256 amountAMin_ = amountAMin;\\r\\n        uint256 amountBMin_ = amountBMin;\\r\\n        address to_ = to;\\r\\n        {\\r\\n            uint8 v_ = v;\\r\\n            bytes32 r_ = r;\\r\\n            bytes32 s_ = s;\\r\\n            (IUniswapV2Pair pair, , ) = getOptionPair(optionToken);\\r\\n            pair.permit(\\r\\n                getCaller(),\\r\\n                address(_primitiveRouter),\\r\\n                liquidity_,\\r\\n                deadline_,\\r\\n                v_,\\r\\n                r_,\\r\\n                s_\\r\\n            );\\r\\n        }\\r\\n        return\\r\\n            removeShortLiquidityThenCloseOptions(\\r\\n                address(optionToken),\\r\\n                liquidity_,\\r\\n                amountAMin_,\\r\\n                amountBMin_,\\r\\n                to_,\\r\\n                deadline_\\r\\n            );\\r\\n    }\\r\\n\\r\\n    struct RemoveAmounts {\\r\\n        uint256 liquidity;\\r\\n        uint256 amountAMin;\\r\\n        uint256 amountBMin;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls UniswapV2Router02.removeLiquidity() to burn LP tokens for pair tokens.\\r\\n     * @param   tokenA The first token of the pair.\\r\\n     * @param   tokenB The second token of the pair.\\r\\n     * @param   params The amounts to specify the amount to remove and minAmounts to withdraw.\\r\\n     * @return  Returns (amountTokenA, amountTokenB) to this contract.\\r\\n     */\\r\\n    function _removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        RemoveAmounts memory params\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        return\\r\\n            _router.removeLiquidity(\\r\\n                tokenA,\\r\\n                tokenB,\\r\\n                params.liquidity,\\r\\n                params.amountAMin,\\r\\n                params.amountBMin,\\r\\n                address(this),\\r\\n                params.deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Gets the UniswapV2Router02 contract address.\\r\\n     */\\r\\n    function getRouter() public view override returns (IUniswapV2Router02) {\\r\\n        return _router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Gets the UniswapV2Factory contract address.\\r\\n     */\\r\\n    function getFactory() public view override returns (IUniswapV2Factory) {\\r\\n        return _factory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Fetchs the Uniswap Pair for an option's redeemToken and underlyingToken params.\\r\\n     * @param   option The option token to get the corresponding UniswapV2Pair market.\\r\\n     * @return  The pair address, as well as the tokens of the pair.\\r\\n     */\\r\\n    function getOptionPair(IOption option)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            IUniswapV2Pair,\\r\\n            address,\\r\\n            address\\r\\n        )\\r\\n    {\\r\\n        address redeem = option.redeemToken();\\r\\n        address underlying = option.getUnderlyingTokenAddress();\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(_factory.getPair(redeem, underlying));\\r\\n        return (pair, underlying, redeem);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48a3243c6eee51c3af4d3a35dbc01bef0b1f5ab7ccea133d89d91ea3a48c8ffb\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20Permit {\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x447ed8e80f3cb568784903cf3c009c418e4668d6b27b0dce6e6f739211013329\"},\"contracts/interfaces/IPrimitiveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {IPrimitiveRouter} from \\\"../interfaces/IPrimitiveRouter.sol\\\";\\r\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveConnector {\\r\\n    // ===== External =====\\r\\n\\r\\n    function checkApproval(address token, address spender) external returns (bool);\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getPrimitiveRouter() external view returns (IPrimitiveRouter);\\r\\n\\r\\n    function isApproved(address token, address spender) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x78a5179263ac7372dce22475449513853adae2e09c18de19c8e56ee3b81bf3a2\"},\"contracts/interfaces/IPrimitiveLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IUniswapV2Router02\\r\\n} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Factory\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {IOption} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\r\\n\\r\\ninterface IPrimitiveLiquidity {\\r\\n    // ==== External ====\\r\\n\\r\\n    function addShortLiquidityWithUnderlying(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function addShortLiquidityWithETH(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function addShortLiquidityWithUnderlyingWithPermit(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function addShortLiquidityWithUnderlyingWithDaiPermit(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function removeShortLiquidityThenCloseOptions(\\r\\n        address optionAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeShortLiquidityThenCloseOptionsWithPermit(\\r\\n        address optionAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getRouter() external view returns (IUniswapV2Router02);\\r\\n\\r\\n    function getFactory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function getOptionPair(IOption option)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IUniswapV2Pair,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x02a51108562b73d56ae16cc4720ed9e003d89e7595fcdf82b9a71f39faf75433\"},\"contracts/interfaces/IPrimitiveRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IOption,\\r\\n    IERC20\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {\\r\\n    IRegistry\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\\\";\\r\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveRouter {\\r\\n    // ===== Admin =====\\r\\n\\r\\n    function halt() external;\\r\\n\\r\\n    // ===== Registration =====\\r\\n    function setRegisteredOptions(address[] calldata optionAddresses)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function setRegisteredConnectors(\\r\\n        address[] calldata connectors,\\r\\n        bool[] calldata isValid\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Operations =====\\r\\n\\r\\n    function transferFromCaller(address token, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Execution =====\\r\\n\\r\\n    function executeCall(address connector, bytes calldata params) external payable;\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getRoute() external view returns (address);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getRegistry() external view returns (IRegistry);\\r\\n\\r\\n    function getRegisteredOption(address option) external view returns (bool);\\r\\n\\r\\n    function getRegisteredConnector(address connector) external view returns (bool);\\r\\n\\r\\n    function apiVersion() external pure returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xaac255f6b4eafe624838014095e6b86ccf32e1993df339455cf662b9a0c1b277\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x37c262ad0aadf51acdff4ee5711841e0beb6030f9d750e23943b2d759144af0c\"},\"contracts/libraries/CoreLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Swaps Lib\\r\\n * @author  Primitive\\r\\n * @notice  Library for calculating different proportions of long and short option tokens.\\r\\n * @dev     @primitivefi/v1-connectors@2.0.0\\r\\n */\\r\\n\\r\\nimport {IOption} from \\\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary CoreLib {\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the proportional quantity of long option tokens per short option token.\\r\\n     * @notice  For each long option token, there is quoteValue / baseValue quantity of short option tokens.\\r\\n     * @param   optionToken The Option to use to calculate proportional amounts. Each option has different proportions.\\r\\n     * @param   short The amount of short options used to calculate the proportional amount of long option tokens.\\r\\n     * @return  The proportional amount of long option tokens based on `short`.\\r\\n     */\\r\\n    function getProportionalLongOptions(IOption optionToken, uint256 short)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return short.mul(optionToken.getBaseValue()).div(optionToken.getQuoteValue());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the proportional quantity of short option tokens per long option token.\\r\\n     * @notice  For each short option token, there is baseValue / quoteValue quantity of long option tokens.\\r\\n     * @param   optionToken The Option to use to calculate proportional amounts. Each option has different proportions.\\r\\n     * @param   long The amount of long options used to calculate the proportional amount of short option tokens.\\r\\n     * @return  The proportional amount of short option tokens based on `long`.\\r\\n     */\\r\\n    function getProportionalShortOptions(IOption optionToken, uint256 long)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return long.mul(optionToken.getQuoteValue()).div(optionToken.getBaseValue());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb6d1095ad2208d2d3aefacc4664fc85420c690abd5c14a7c7b317d7a1b20979\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80635cda4b411161007f578063ab470f0511610059578063ab470f05146103fe578063b0f479a114610413578063d0d853b914610428578063e69cb2461461046e5761010c565b80635cda4b411461035f57806388cc58e4146103ae578063a389783e146103c35761010c565b806322ef3f85116100bb57806322ef3f851461022f57806327fb83801461028d5780632e16cab3146102a2578063573123a9146102f55761010c565b806307f2490614610111578063107c279f1461017657806311fbac05146101a75761010c565b3661010c576000546001600160a01b03166100fa6104d8565b6001600160a01b03161461010a57fe5b005b600080fd5b34801561011d57600080fd5b50610164600480360360c081101561013457600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a001356104dd565b60408051918252519081900360200190f35b34801561018257600080fd5b5061018b610722565b604080516001600160a01b039092168252519081900360200190f35b3480156101b357600080fd5b5061021160048036036101208110156101cb57600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a08101359060ff60c0820135169060e0810135906101000135610731565b60408051938452602084019290925282820152519081900360600190f35b34801561023b57600080fd5b506102626004803603602081101561025257600080fd5b50356001600160a01b03166109ba565b604080516001600160a01b039485168152928416602084015292168183015290519081900360600190f35b34801561029957600080fd5b5061018b610b2f565b3480156102ae57600080fd5b50610211600480360360c08110156102c557600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a00135610b3e565b34801561030157600080fd5b50610164600480360361012081101561031957600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a08101359060ff60c0820135169060e0810135906101000135610f2c565b34801561036b57600080fd5b5061039a6004803603604081101561038257600080fd5b506001600160a01b03813581169160200135166110cc565b604080519115158252519081900360200190f35b3480156103ba57600080fd5b5061018b611152565b3480156103cf57600080fd5b5061039a600480360360408110156103e657600080fd5b506001600160a01b0381358116916020013516611161565b34801561040a57600080fd5b5061018b61118f565b34801561041f57600080fd5b5061018b611205565b610211600480360360c081101561043e57600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a00135611214565b34801561047a57600080fd5b50610211600480360361012081101561049257600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a08101359060ff60c0820135169060e081013590610100013561162c565b335b90565b600060026003541415610537576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808b16600483015291518a9392909216916394669bf591602480820192602092909190829003018186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d60208110156105b657600080fd5b50516105f7576040805162461bcd60e51b815260206004820152601b60248201526000805160206126ef833981519152604482015290519081900360640190fd5b8760008080610605846109ba565b925092509250610613612676565b8b8152602081018b9052604081018a905260608101889052610635848d611836565b5060055461064d9085906001600160a01b03166110cc565b50600061065b8385846118d3565b91505060006106698761199a565b905061067484611b18565b506000546001600160a01b038681169116141561069957610693611bc3565b506106a4565b6106a285611b18565b505b60006106b6828463ffffffff611d6316565b9050876001600160a01b03166106ca61118f565b6001600160a01b03167fd8ae9b9ba89e637bcb66a69ac91e8f688018e81d6f92c57e02226425c8efbdf6836040518082815260200191505060405180910390a360016003559f9e505050505050505050505050505050565b6000546001600160a01b031690565b600154604080516394669bf560e01b81526001600160a01b03808d1660048301529151600093849384938f9391909216916394669bf5916024808301926020929190829003018186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d60208110156107b157600080fd5b50516107f2576040805162461bcd60e51b815260206004820152601b60248201526000805160206126ef833981519152604482015290519081900360640190fd5b60008d6001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d602081101561085757600080fd5b505190506001600160a01b038116638fcbaf0c61087261118f565b6001546001600160a01b03908116908516637ecebe0061089061118f565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156108d657600080fd5b505afa1580156108ea573d6000803e3d6000fd5b505050506040513d602081101561090057600080fd5b5051604080516001600160e01b031960e087901b1681526001600160a01b0394851660048201529290931660248301526044820152606481018d90526001608482015260ff8c1660a482015260c481018b905260e481018a9052905161010480830192600092919082900301818387803b15801561097d57600080fd5b505af1158015610991573d6000803e3d6000fd5b505050506109a38e8e8e8e8e8e610b3e565b945094509450505099509950999650505050505050565b600080600080846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d6020811015610a2357600080fd5b505160408051632207afe960e11b815290519192506000916001600160a01b0388169163440f5fd2916004808301926020929190829003018186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d6020811015610a9557600080fd5b5051600480546040805163e6a4390560e01b81526001600160a01b038781169482019490945283851660248201529051939450600093929091169163e6a4390591604480820192602092909190829003018186803b158015610af657600080fd5b505afa158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b50519791965091945092505050565b6001546001600160a01b031690565b600080600060026003541415610b9b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808d16600483015291518c9392909216916394669bf591602480820192602092909190829003018186803b158015610bf057600080fd5b505afa158015610c04573d6000803e3d6000fd5b505050506040513d6020811015610c1a57600080fd5b5051610c5b576040805162461bcd60e51b815260206004820152601b60248201526000805160206126ef833981519152604482015290519081900360640190fd5b6000806000808d6001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9a57600080fd5b505afa158015610cae573d6000803e3d6000fd5b505050506040513d6020811015610cc457600080fd5b505190506000610cda8e8e63ffffffff611d6316565b9050610ce68282611836565b50610d0390506001600160a01b0382168f8f63ffffffff611dc416565b60008e6001600160a01b031663fa9ad7c4306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b031681526020019150506040805180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d6040811015610d8657600080fd5b81019080805190602001909291908051906020019092919050505091505060008f90506000816001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610de457600080fd5b505afa158015610df8573d6000803e3d6000fd5b505050506040513d6020811015610e0e57600080fd5b50519050610e1a61269e565b838160000181815250508f816020018181525050838160400181815250508e8160600181815250508c816080018181525050610e6b82600560009054906101000a90046001600160a01b03166110cc565b50600554610e839086906001600160a01b03166110cc565b50610e8f828683611e1b565b91995097509550838814610e9f57fe5b610ea885611b18565b50610eb282611b18565b50610ebc83611b18565b505050508e6001600160a01b0316610ed261118f565b6001600160a01b03167f668256213e6a9a0247adc238fcbf44cc6b98921642fca93479c5dc3873660837856040518082815260200191505060405180910390a350506001600355919c909b50909950975050505050505050565b600154604080516394669bf560e01b81526001600160a01b03808d16600483015291516000938d9316916394669bf5916024808301926020929190829003018186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d6020811015610fa557600080fd5b5051610fe6576040805162461bcd60e51b815260206004820152601b60248201526000805160206126ef833981519152604482015290519081900360640190fd5b8a8a878b8b8b8a8a8a6000610ffa8a6109ba565b50509050806001600160a01b031663d505accf61101561118f565b600154604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482018d9052606482018c905260ff8816608483015260a4820187905260c482018690525160e480830192600092919082900301818387803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b50505050505050506110b68686858585896104dd565b9750505050505050509998505050505050505050565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205460ff16611148576111176001600160a01b0384168360001963ffffffff611f4a16565b6001600160a01b038084166000908152600260209081526040808320938616835292905220805460ff191660011790555b5060015b92915050565b6004546001600160a01b031690565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001546040805163ab470f0560e01b815290516000926001600160a01b03169163ab470f05916004808301926020929190829003018186803b1580156111d457600080fd5b505afa1580156111e8573d6000803e3d6000fd5b505050506040513d60208110156111fe57600080fd5b5051905090565b6005546001600160a01b031690565b600080600060026003541415611271576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808d16600483015291518c9392909216916394669bf591602480820192602092909190829003018186803b1580156112c657600080fd5b505afa1580156112da573d6000803e3d6000fd5b505050506040513d60208110156112f057600080fd5b5051611331576040805162461bcd60e51b815260206004820152601b60248201526000805160206126ef833981519152604482015290519081900360640190fd5b346113428a8a63ffffffff611d6316565b1015611395576040805162461bcd60e51b815260206004820181905260248201527f5072696d69746976654c69717569646974793a20494e53554646494349454e54604482015290519081900360640190fd5b6000806000808d6001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113d457600080fd5b505afa1580156113e8573d6000803e3d6000fd5b505050506040513d60208110156113fe57600080fd5b50516000549091506001600160a01b03808316911614611465576040805162461bcd60e51b815260206004820152601c60248201527f5072696d69746976654c69717569646974793a204e4f545f5745544800000000604482015290519081900360640190fd5b61146d61205d565b506114886001600160a01b0382168f8f63ffffffff611dc416565b60008e6001600160a01b031663fa9ad7c4306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b031681526020019150506040805180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505050506040513d604081101561150b57600080fd5b81019080805190602001909291908051906020019092919050505091505060008f90506000816001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b5051905061159f61269e565b838160000181815250508f816020018181525050838160400181815250508e8160600181815250508c8160800181815250506115f082600560009054906101000a90046001600160a01b03166110cc565b506005546116089086906001600160a01b03166110cc565b50611614828683611e1b565b9199509750955083881461162457fe5b610ea8611bc3565b600154604080516394669bf560e01b81526001600160a01b03808d1660048301529151600093849384938f9391909216916394669bf5916024808301926020929190829003018186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d60208110156116ac57600080fd5b50516116ed576040805162461bcd60e51b815260206004820152601b60248201526000805160206126ef833981519152604482015290519081900360640190fd5b60008d6001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561172857600080fd5b505afa15801561173c573d6000803e3d6000fd5b505050506040513d602081101561175257600080fd5b5051905060006117688e8e63ffffffff611d6316565b9050816001600160a01b031663d505accf61178161118f565b600154604080516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201859052606482018e905260ff8d16608483015260a482018c905260c482018b90525160e480830192600092919082900301818387803b1580156117f857600080fd5b505af115801561180c573d6000803e3d6000fd5b5050505050506118208d8d8d8d8d8d610b3e565b9350935093505099509950999650505050505050565b600081156118ca576001546040805163a3e3808f60e01b81526001600160a01b038681166004830152602482018690529151919092169163a3e3808f9160448083019260209291908290030181600087803b15801561189457600080fd5b505af11580156118a8573d6000803e3d6000fd5b505050506040513d60208110156118be57600080fd5b506001915061114c9050565b50600092915050565b6005548151602083015160408085015160608601518251635d5155ef60e11b81526001600160a01b038a8116600483015289811660248301526044820196909652606481019490945260848401919091523060a484015260c483015280516000948594169263baa2abde9260e480830193919282900301818787803b15801561195b57600080fd5b505af115801561196f573d6000803e3d6000fd5b505050506040513d604081101561198557600080fd5b50805160209091015190969095509350505050565b600080826001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d657600080fd5b505afa1580156119ea573d6000803e3d6000fd5b505050506040513d6020811015611a0057600080fd5b505190506000611a1082856120d2565b905042846001600160a01b03166325cb5bc06040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4c57600080fd5b505afa158015611a60573d6000803e3d6000fd5b505050506040513d6020811015611a7657600080fd5b505110611a9357611a9184611a8b8684612165565b86612258565b505b60408051638349980560e01b815230600482015290516000916001600160a01b0387169163834998059160248082019260609290919082900301818787803b158015611ade57600080fd5b505af1158015611af2573d6000803e3d6000fd5b505050506040513d6060811015611b0857600080fd5b506040015193505050505b919050565b604080516370a0823160e01b8152306004820152905160009182916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015611b6357600080fd5b505afa158015611b77573d6000803e3d6000fd5b505050506040513d6020811015611b8d57600080fd5b5051905080156118ca57611bb9611ba261118f565b6001600160a01b038516908363ffffffff611dc416565b6001915050611b13565b60008054604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611c0e57600080fd5b505afa158015611c22573d6000803e3d6000fd5b505050506040513d6020811015611c3857600080fd5b505190508015611d5b576000805460408051632e1a7d4d60e01b81526004810185905290516001600160a01b0390921692632e1a7d4d9260248084019382900301818387803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505050506000611cac61118f565b6040516001600160a01b0391909116908390600081818185875af1925050503d8060008114611cf7576040519150601f19603f3d011682016040523d82523d6000602084013e611cfc565b606091505b5050905080611d52576040805162461bcd60e51b815260206004820152601c60248201527f436f6e6e6563746f723a204552525f53454e44494e475f455448455200000000604482015290519081900360640190fd5b91506104da9050565b600191505090565b600082820183811015611dbd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e169084906122fe565b505050565b6000806000600560009054906101000a90046001600160a01b03166001600160a01b031663e8e3370087878760000151886020015189604001518a60600151611e6261118f565b8c608001516040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200198505050505050505050606060405180830381600087803b158015611f0457600080fd5b505af1158015611f18573d6000803e3d6000fd5b505050506040513d6060811015611f2e57600080fd5b5080516020820151604090920151909891975095509350505050565b801580611fd0575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611fa257600080fd5b505afa158015611fb6573d6000803e3d6000fd5b505050506040513d6020811015611fcc57600080fd5b5051155b61200b5760405162461bcd60e51b81526004018080602001828103825260368152602001806127396036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611e169084906122fe565b600034156120cc576000805460408051630d0e30db60e41b815290516001600160a01b039092169263d0e30db0923492600480820193929182900301818588803b1580156120aa57600080fd5b505af11580156120be573d6000803e3d6000fd5b5050505050600190506104da565b50600090565b604080516370a0823160e01b8152306004820152905160009182916001600160a01b038616916370a08231916024808301926020929190829003018186803b15801561211d57600080fd5b505afa158015612131573d6000803e3d6000fd5b505050506040513d602081101561214757600080fd5b50519050611dbd6001600160a01b038516848363ffffffff611dc416565b6000611dbd836001600160a01b031662fe19fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121a257600080fd5b505afa1580156121b6573d6000803e3d6000fd5b505050506040513d60208110156121cc57600080fd5b5051604080516316b2542760e31b8152905161224c916001600160a01b0388169163b592a13891600480820192602092909190829003018186803b15801561221357600080fd5b505afa158015612227573d6000803e3d6000fd5b505050506040513d602081101561223d57600080fd5b5051859063ffffffff6123af16565b9063ffffffff61240816565b600082156122f4576001546040805163a2e49f1760e01b81526001600160a01b0387811660048301526024820187905285811660448301529151919092169163a2e49f179160648083019260209291908290030181600087803b1580156122be57600080fd5b505af11580156122d2573d6000803e3d6000fd5b505050506040513d60208110156122e857600080fd5b5060019150611dbd9050565b5060009392505050565b6060612353826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661244a9092919063ffffffff16565b805190915015611e165780806020019051602081101561237257600080fd5b5051611e165760405162461bcd60e51b815260040180806020018281038252602a81526020018061270f602a913960400191505060405180910390fd5b6000826123be5750600061114c565b828202828482816123cb57fe5b0414611dbd5760405162461bcd60e51b81526004018080602001828103825260218152602001806126ce6021913960400191505060405180910390fd5b6000611dbd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612461565b60606124598484600085612503565b949350505050565b600081836124ed5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124b257818101518382015260200161249a565b50505050905090810190601f1680156124df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816124f957fe5b0495945050505050565b606061250e85612670565b61255f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061259e5780518252601f19909201916020918201910161257f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612600576040519150601f19603f3d011682016040523d82523d6000602084013e612605565b606091505b509150915081156126195791506124599050565b8051156126295780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156124b257818101518382015260200161249a565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775072696d697469766553776170733a204556494c5f4f5054494f4e00000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220fc7c3b26801b5a08741372c028e240fd136d909ced4dbe571c26a1b47f11a55764736f6c63430006020033",
  "devdoc": {
    "methods": {
      "addShortLiquidityWithETH(address,uint256,uint256,uint256,address,uint256)": {
        "details": "Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting shortOptionTokens with underlyingTokens.",
        "params": {
          "amountBMax": "The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.",
          "amountBMin": "The minimum quantity of underlyingTokens expected to provide liquidity with.",
          "deadline": "The timestamp to expire a pending transaction.",
          "optionAddress": "The address of the optionToken to get the redeemToken to mint then provide liquidity for.",
          "quantityOptions": "The quantity of underlyingTokens to use to mint option + redeem tokens.",
          "to": "The address that receives UNI-V2 shares."
        }
      },
      "addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)": {
        "details": "Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting redeemTokens with underlyingTokens.",
        "params": {
          "amountBMax": "The quantity of underlyingTokens to add with redeemTokens to the Uniswap V2 Pair.",
          "amountBMin": "The minimum quantity of underlyingTokens expected to provide liquidity with.",
          "deadline": "The timestamp to expire a pending transaction.",
          "optionAddress": "The address of the optionToken to get the redeemToken to mint then provide liquidity for.",
          "quantityOptions": "The quantity of underlyingTokens to use to mint option + redeem tokens.",
          "to": "The address that receives UNI-V2 shares."
        }
      },
      "addShortLiquidityWithUnderlyingWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "Adds redeemToken liquidity to a redeem<>underlyingToken pair by minting shortOptionTokens with underlyingTokens.",
        "params": {
          "amountBMax": "The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.",
          "amountBMin": "The minimum quantity of underlyingTokens expected to provide liquidity with.",
          "deadline": "The timestamp to expire a pending transaction.",
          "optionAddress": "The address of the optionToken to get the redeemToken to mint then provide liquidity for.",
          "quantityOptions": "The quantity of underlyingTokens to use to mint option + redeem tokens.",
          "to": "The address that receives UNI-V2 shares."
        }
      },
      "checkApproval(address,address)": {
        "details": "This contract does not hold funds, infinite approvals cannot be exploited for profit.",
        "params": {
          "spender": "The address to allow to spend `token`.",
          "token": "The token to approve spending for."
        }
      },
      "getOptionPair(address)": {
        "params": {
          "option": "The option token to get the corresponding UniswapV2Pair market."
        },
        "returns": {
          "_0": "The pair address, as well as the tokens of the pair."
        }
      },
      "removeShortLiquidityThenCloseOptions(address,uint256,uint256,uint256,address,uint256)": {
        "details": "Combines Uniswap V2 Router \"removeLiquidity\" function with Primitive \"closeOptions\" function.",
        "params": {
          "amountAMin": "The minimum quantity of shortOptionTokens to receive from removing liquidity.",
          "amountBMin": "The minimum quantity of underlyingTokens to receive from removing liquidity.",
          "deadline": "The timestamp to expire a pending transaction.",
          "liquidity": "The quantity of liquidity tokens to pull from _msgSender() and burn.",
          "optionAddress": "The address of the option that will be closed from burned UNI-V2 liquidity shares.",
          "to": "The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options."
        }
      },
      "removeShortLiquidityThenCloseOptionsWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "Uses permit to pull LP tokens.",
        "params": {
          "amountAMin": "The minimum quantity of shortOptionTokens to receive from removing liquidity.",
          "amountBMin": "The minimum quantity of underlyingTokens to receive from removing liquidity.",
          "deadline": "The timestamp to expire a pending transaction and `permit` call.",
          "liquidity": "The quantity of liquidity tokens to pull from _msgSender() and burn.",
          "optionAddress": "The address of the option that will be closed from burned UNI-V2 liquidity shares.",
          "to": "The address that receives underlyingTokens from burned UNI-V2, and underlyingTokens from closed options."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addShortLiquidityWithETH(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \"getCaller()\" address.         underlyingToken -> redeemToken -> UNI-V2."
      },
      "addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \"getCaller()\" address.         underlyingToken -> redeemToken -> UNI-V2."
      },
      "addShortLiquidityWithUnderlyingWithDaiPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Specialized function for `permit` calling on Put options (DAI)."
      },
      "addShortLiquidityWithUnderlyingWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Pulls underlying tokens from _msgSender() and pushes UNI-V2 liquidity tokens to the \"getCaller()\" address.         underlyingToken -> redeemToken -> UNI-V2. Uses permit so user does not need to `approve()` our contracts."
      },
      "checkApproval(address,address)": {
        "notice": "Approves the `spender` to pull `token` from this contract."
      },
      "getCaller()": {
        "notice": "Returns the state variable `_CALLER` in the Primitive Router."
      },
      "getFactory()": {
        "notice": "Gets the UniswapV2Factory contract address."
      },
      "getOptionPair(address)": {
        "notice": "Fetchs the Uniswap Pair for an option's redeemToken and underlyingToken params."
      },
      "getPrimitiveRouter()": {
        "notice": "Returns the Primitive Router contract address."
      },
      "getRouter()": {
        "notice": "Gets the UniswapV2Router02 contract address."
      },
      "getWeth()": {
        "notice": "Returns the Weth contract address."
      },
      "isApproved(address,address)": {
        "notice": "Returns whether or not `spender` is approved to spend `token`, from this contract."
      },
      "removeShortLiquidityThenCloseOptions(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Pulls UNI-V2 liquidity shares with shortOption<>underlying token, and optionTokens from _msgSender().         Then closes the longOptionTokens and withdraws underlyingTokens to the \"getCaller()\" address.         Sends underlyingTokens from the burned UNI-V2 liquidity shares to the \"getCaller()\" address.         UNI-V2 -> optionToken -> underlyingToken."
      },
      "removeShortLiquidityThenCloseOptionsWithPermit(address,uint256,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Pulls LP tokens, burns them, removes liquidity, pull option token, burns then, pushes all underlying tokens."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3000,
        "contract": "contracts/connectors/PrimitiveLiquidity.sol:PrimitiveLiquidity",
        "label": "_weth",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IWETH)6843"
      },
      {
        "astId": 3002,
        "contract": "contracts/connectors/PrimitiveLiquidity.sol:PrimitiveLiquidity",
        "label": "_primitiveRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPrimitiveRouter)6695"
      },
      {
        "astId": 3008,
        "contract": "contracts/connectors/PrimitiveLiquidity.sol:PrimitiveLiquidity",
        "label": "_approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1358,
        "contract": "contracts/connectors/PrimitiveLiquidity.sol:PrimitiveLiquidity",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4179,
        "contract": "contracts/connectors/PrimitiveLiquidity.sol:PrimitiveLiquidity",
        "label": "_factory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Factory)1767"
      },
      {
        "astId": 4181,
        "contract": "contracts/connectors/PrimitiveLiquidity.sol:PrimitiveLiquidity",
        "label": "_router",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUniswapV2Router02)2405"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPrimitiveRouter)6695": {
        "encoding": "inplace",
        "label": "contract IPrimitiveRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)1767": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)2405": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)6843": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}