{
  "address": "0xF7d9cB5fC4F55f26bC1d8640eDc5fd36469422a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "primitiveRouter_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Closed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Exercised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortQuantity",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "option",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "checkApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrimitiveRouter",
      "outputs": [
        {
          "internalType": "contract IPrimitiveRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "closeQuantity",
          "type": "uint256"
        }
      ],
      "name": "safeCloseForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exerciseQuantity",
          "type": "uint256"
        }
      ],
      "name": "safeExerciseForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        }
      ],
      "name": "safeExerciseWithETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        }
      ],
      "name": "safeMintWithETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "safeMintWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemQuantity",
          "type": "uint256"
        }
      ],
      "name": "safeRedeemForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd7a04ad98f091b55690692c772261a1e1e909d8ac15e2adc0bb7aece560b31b2",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0xF7d9cB5fC4F55f26bC1d8640eDc5fd36469422a8",
    "transactionIndex": 2,
    "gasUsed": "2123465",
    "logsBloom": "0x000000000000000400000000000000000000000000000000000000000000000000000000000000000020000000000000000000028000000000000000002000000000000000400000000000000000000000000000000003000000000000000000000000000000000000000000000000000000004000000000000200040000000000000000000000000000400000000000000000000000000000000000040000000a0040000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000400000000000000008000000000000000000000000000000000000000",
    "blockHash": "0x6c738911ca63ab4283108779aa6e643923e950f3f96b7f066257f60f16c8dbb4",
    "transactionHash": "0xd7a04ad98f091b55690692c772261a1e1e909d8ac15e2adc0bb7aece560b31b2",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 23890613,
        "transactionHash": "0xd7a04ad98f091b55690692c772261a1e1e909d8ac15e2adc0bb7aece560b31b2",
        "address": "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f7d9cb5fc4f55f26bc1d8640edc5fd36469422a8",
          "0x0000000000000000000000006a713071dcc5ddd5f5f36e9b92f15f5fbe9d7ec5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x6c738911ca63ab4283108779aa6e643923e950f3f96b7f066257f60f16c8dbb4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 23890613,
        "transactionHash": "0xd7a04ad98f091b55690692c772261a1e1e909d8ac15e2adc0bb7aece560b31b2",
        "address": "0xF7d9cB5fC4F55f26bC1d8640eDc5fd36469422a8",
        "topics": [
          "0x908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x6c738911ca63ab4283108779aa6e643923e950f3f96b7f066257f60f16c8dbb4"
      }
    ],
    "blockNumber": 23890613,
    "cumulativeGasUsed": "2333962",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "0x6A713071dcc5dDd5F5f36e9B92f15f5fBe9d7EC5"
  ],
  "solcInputHash": "c9dcfba636be70a61fb642f1ed49c33f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primitiveRouter_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Exercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortQuantity\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"option\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"checkApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitiveRouter\",\"outputs\":[{\"internalType\":\"contract IPrimitiveRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"closeQuantity\",\"type\":\"uint256\"}],\"name\":\"safeCloseForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exerciseQuantity\",\"type\":\"uint256\"}],\"name\":\"safeExerciseForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"}],\"name\":\"safeExerciseWithETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"}],\"name\":\"safeMintWithETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"safeMintWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemQuantity\",\"type\":\"uint256\"}],\"name\":\"safeRedeemForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"checkApproval(address,address)\":{\"details\":\"This contract does not hold funds, infinite approvals cannot be exploited for profit.\",\"params\":{\"spender\":\"The address to allow to spend `token`.\",\"token\":\"The token to approve spending for.\"}},\"safeCloseForETH(address,uint256)\":{\"details\":\"Burn optionTokens and redeemTokens to withdraw underlyingTokens (ethers).\",\"params\":{\"closeQuantity\":\"Quantity of optionTokens to burn and an input to calculate how many redeems to burn.\",\"optionToken\":\"The address of the option contract.\"}},\"safeExerciseForETH(address,uint256)\":{\"details\":\"Swaps strikeTokens to underlyingTokens, WETH, which is converted to ethers before withdrawn.         Uses the strike ratio as the exchange rate. Strike ratio = base / quote.\",\"params\":{\"exerciseQuantity\":\"Quantity of optionTokens to exercise.\",\"optionToken\":\"The address of the option contract.\"}},\"safeExerciseWithETH(address)\":{\"details\":\"Swaps msg.value of strikeTokens (ethers) to underlyingTokens.         Uses the strike ratio as the exchange rate. Strike ratio = base / quote.         Msg.value (quote units) * base / quote = base units (underlyingTokens) to withdraw.\",\"params\":{\"optionToken\":\"The address of the option contract.\"}},\"safeMintWithETH(address)\":{\"details\":\"Mints msg.value quantity of options and \\\"quote\\\" (option parameter) quantity of redeem tokens.\",\"params\":{\"optionToken\":\"The address of the option token to mint.\"},\"returns\":{\"_0\":\"(uint, uint) Returns the (long, short) option tokens minted\"}},\"safeMintWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Mints \\\"amount\\\" quantity of options and \\\"quote\\\" (option parameter) quantity of redeem tokens.\",\"params\":{\"amount\":\"The quantity of options to mint.\",\"deadline\":\"The timestamp which expires the `permit` call.\",\"optionToken\":\"The address of the option token to mint.\"},\"returns\":{\"_0\":\"(uint, uint) Returns the (long, short) option tokens minted\"}},\"safeRedeemForETH(address,uint256)\":{\"details\":\"Burns redeem tokens to withdraw strike tokens (ethers) at a 1:1 ratio.\",\"params\":{\"optionToken\":\"The address of the option contract.\",\"redeemQuantity\":\"The quantity of redeemTokens to burn.\"}}}},\"userdoc\":{\"methods\":{\"checkApproval(address,address)\":{\"notice\":\"Approves the `spender` to pull `token` from this contract.\"},\"getCaller()\":{\"notice\":\"Returns the state variable `_CALLER` in the Primitive Router.\"},\"getPrimitiveRouter()\":{\"notice\":\"Returns the Primitive Router contract address.\"},\"getWeth()\":{\"notice\":\"Returns the Weth contract address.\"},\"isApproved(address,address)\":{\"notice\":\"Returns whether or not `spender` is approved to spend `token`, from this contract.\"},\"safeCloseForETH(address,uint256)\":{\"notice\":\"This function is for options with WETH as the underlying asset. WETH underlyingTokens are converted to ethers before being sent to receiver. The redeemTokens to burn is equal to the optionTokens * strike ratio. inputOptions = inputRedeems / strike ratio = outUnderlyings\"},\"safeExerciseForETH(address,uint256)\":{\"notice\":\"This function is for options with WETH as the underlying asset.         Burns option tokens, pulls strikeTokens, and pushes out ethers.\"},\"safeExerciseWithETH(address)\":{\"notice\":\"This function is for options with WETH as the strike asset.         Burns option tokens, accepts ethers, and pushes out underlyingTokens.\"},\"safeMintWithETH(address)\":{\"notice\":\"This function is for options that have WETH as the underlying asset.\"},\"safeMintWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"This function is for options that have an EIP2612 (permit) enabled token as the underlying asset.\"},\"safeRedeemForETH(address,uint256)\":{\"notice\":\"This function is for options that have WETH as the strike asset.         Converts WETH to ethers, and withdraws ethers to the receiver address.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/PrimitiveCore.sol\":\"PrimitiveCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function pauseDeployments() external;\\r\\n\\r\\n    function unpauseDeployments() external;\\r\\n\\r\\n    function deployOption(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external returns (address);\\r\\n\\r\\n    function setOptionFactory(address optionFactory_) external;\\r\\n\\r\\n    function setRedeemFactory(address redeemFactory_) external;\\r\\n\\r\\n    function optionFactory() external returns (address);\\r\\n\\r\\n    function redeemFactory() external returns (address);\\r\\n\\r\\n    function verifyToken(address tokenAddress) external;\\r\\n\\r\\n    function verifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function unverifyToken(address tokenAddress) external;\\r\\n\\r\\n    function unverifyExpiry(uint256 expiry) external;\\r\\n\\r\\n    function calculateOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function getOptionAddress(\\r\\n        address underlyingToken,\\r\\n        address strikeToken,\\r\\n        uint256 base,\\r\\n        uint256 quote,\\r\\n        uint256 expiry\\r\\n    ) external view returns (address);\\r\\n\\r\\n    function isVerifiedOption(address optionAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x02aeb84e8b748674bc31707899158885066923f203e7a3a58cee3c68a49ec96f\"},\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IOption } from \\\"./IOption.sol\\\";\\r\\n\\r\\ninterface ITrader {\\r\\n    function safeMint(\\r\\n        IOption optionToken,\\r\\n        uint256 mintQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeExercise(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeem(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function safeClose(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function safeUnwind(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xb8f9e6d923e556e137a606c76e9adf8fd07375c7ff0650f4a7932adc950df44f\"},\"contracts/connectors/PrimitiveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Connector\\r\\n * @author  Primitive\\r\\n * @notice  Low-level abstract contract for Primitive Connectors to inherit from.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {Context} from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n// Primitive\\r\\nimport {CoreLib, IOption} from \\\"../libraries/CoreLib.sol\\\";\\r\\nimport {\\r\\n    IPrimitiveConnector,\\r\\n    IPrimitiveRouter,\\r\\n    IWETH\\r\\n} from \\\"../interfaces/IPrimitiveConnector.sol\\\";\\r\\n\\r\\nabstract contract PrimitiveConnector is IPrimitiveConnector, Context {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n\\r\\n    IWETH internal _weth; // Canonical WETH9\\r\\n    IPrimitiveRouter internal _primitiveRouter; // The PrimitiveRouter contract which executes calls.\\r\\n    mapping(address => mapping(address => bool)) internal _approved; // Stores approvals for future checks.\\r\\n\\r\\n    // ===== Constructor =====\\r\\n\\r\\n    constructor(address weth_, address primitiveRouter_) public {\\r\\n        _weth = IWETH(weth_);\\r\\n        _primitiveRouter = IPrimitiveRouter(primitiveRouter_);\\r\\n        checkApproval(weth_, primitiveRouter_); // Approves this contract's weth to be spent by router.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Reverts if the `option` is not registered in the PrimitiveRouter contract.\\r\\n     * @dev     Any `option` which is deployed from the Primitive Registry can be registered with the Router.\\r\\n     * @param   option The Primitive Option to check if registered.\\r\\n     */\\r\\n    modifier onlyRegistered(IOption option) {\\r\\n        require(\\r\\n            _primitiveRouter.getRegisteredOption(address(option)),\\r\\n            \\\"PrimitiveSwaps: EVIL_OPTION\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ===== External =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Approves the `spender` to pull `token` from this contract.\\r\\n     * @dev     This contract does not hold funds, infinite approvals cannot be exploited for profit.\\r\\n     * @param   token The token to approve spending for.\\r\\n     * @param   spender The address to allow to spend `token`.\\r\\n     */\\r\\n    function checkApproval(address token, address spender)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (!_approved[token][spender]) {\\r\\n            IERC20(token).safeApprove(spender, uint256(-1));\\r\\n            _approved[token][spender] = true;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ===== Internal =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Deposits `msg.value` into the Weth contract for Weth tokens.\\r\\n     * @return  Whether or not ether was deposited into Weth.\\r\\n     */\\r\\n    function _depositETH() internal returns (bool) {\\r\\n        if (msg.value > 0) {\\r\\n            _weth.deposit.value(msg.value)();\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of Weth to withdraw Ether and send it to `getCaller()`.\\r\\n     */\\r\\n    function _withdrawETH() internal returns (bool) {\\r\\n        uint256 quantity = IERC20(address(_weth)).balanceOf(address(this));\\r\\n        if (quantity > 0) {\\r\\n            // Withdraw ethers with weth.\\r\\n            _weth.withdraw(quantity);\\r\\n            // Send ether.\\r\\n            (bool success, ) = getCaller().call.value(quantity)(\\\"\\\");\\r\\n            // Revert is call is unsuccessful.\\r\\n            require(success, \\\"Connector: ERR_SENDING_ETHER\\\");\\r\\n            return success;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls the Router to pull `token` from the getCaller() and send them to this contract.\\r\\n     * @dev     This eliminates the need for users to approve the Router and each connector.\\r\\n     * @param   token The token to pull from `getCaller()` into this contract.\\r\\n     * @param   quantity The amount of `token` to pull into this contract.\\r\\n     * @return  Whether or not the `token` was transferred into this contract.\\r\\n     */\\r\\n    function _transferFromCaller(address token, uint256 quantity)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (quantity > 0) {\\r\\n            _primitiveRouter.transferFromCaller(token, quantity);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pushes this contract's balance of `token` to `getCaller()`.\\r\\n     * @dev     getCaller() is the original `msg.sender` of the Router's `execute` fn.\\r\\n     * @param   token The token to transfer to `getCaller()`.\\r\\n     * @return  Whether or not the `token` was transferred to `getCaller()`.\\r\\n     */\\r\\n    function _transferToCaller(address token) internal returns (bool) {\\r\\n        uint256 quantity = IERC20(token).balanceOf(address(this));\\r\\n        if (quantity > 0) {\\r\\n            IERC20(token).safeTransfer(getCaller(), quantity);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Calls the Router to pull `token` from the getCaller() and send them to this contract.\\r\\n     * @dev     This eliminates the need for users to approve the Router and each connector.\\r\\n     * @param   token The token to pull from `getCaller()`.\\r\\n     * @param   quantity The amount of `token` to pull.\\r\\n     * @param   receiver The `to` address to send `quantity` of `token` to.\\r\\n     * @return  Whether or not `token` was transferred to `receiver`.\\r\\n     */\\r\\n    function _transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 quantity,\\r\\n        address receiver\\r\\n    ) internal returns (bool) {\\r\\n        if (quantity > 0) {\\r\\n            _primitiveRouter.transferFromCallerToReceiver(token, quantity, receiver);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of underlyingTokens to mint optionTokens to this contract.\\r\\n     * @param   optionToken The Primitive Option to mint.\\r\\n     * @return  (uint, uint) (longOptions, shortOptions)\\r\\n     */\\r\\n    function _mintOptions(IOption optionToken) internal returns (uint256, uint256) {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        _transferBalanceToReceiver(underlying, address(optionToken)); // Sends to option contract\\r\\n        return optionToken.mintOptions(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Uses this contract's balance of underlyingTokens to mint optionTokens to `receiver`.\\r\\n     * @param   optionToken The Primitive Option to mint.\\r\\n     * @param   receiver The address that will received the minted long and short optionTokens.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function _mintOptionsToReceiver(IOption optionToken, address receiver)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        _transferBalanceToReceiver(underlying, address(optionToken)); // Sends to option contract\\r\\n        return optionToken.mintOptions(receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Pulls underlying tokens from `getCaller()` to option contract, then invokes mintOptions().\\r\\n     * @param   optionToken The option token to mint.\\r\\n     * @param   quantity The amount of option tokens to mint.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function _mintOptionsFromCaller(IOption optionToken, uint256 quantity)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        require(quantity > 0, \\\"ERR_ZERO\\\");\\r\\n        _transferFromCallerToReceiver(\\r\\n            optionToken.getUnderlyingTokenAddress(),\\r\\n            quantity,\\r\\n            address(optionToken)\\r\\n        );\\r\\n        return optionToken.mintOptions(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Multi-step operation to close options.\\r\\n     *          1. Transfer balanceOf `redeem` option token to the option contract.\\r\\n     *          2. If NOT expired, pull `option` tokens from `getCaller()` and send to option contract.\\r\\n     *          3. Invoke `closeOptions()` to burn the options and release underlyings to this contract.\\r\\n     * @return  The amount of underlyingTokens released to this contract.\\r\\n     */\\r\\n    function _closeOptions(IOption optionToken) internal returns (uint256) {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        uint256 short = IERC20(redeem).balanceOf(address(this));\\r\\n        uint256 long = IERC20(address(optionToken)).balanceOf(getCaller());\\r\\n        uint256 proportional = CoreLib.getProportionalShortOptions(optionToken, long);\\r\\n        // IF user has more longs than proportional shorts, close the `short` amount.\\r\\n        if (proportional > short) {\\r\\n            proportional = short;\\r\\n        }\\r\\n\\r\\n        // If option is expired, transfer the amt of proportional thats larger.\\r\\n        if (optionToken.getExpiryTime() >= now) {\\r\\n            // Transfers the max proportional amount of short options to option contract.\\r\\n            IERC20(redeem).safeTransfer(address(optionToken), proportional);\\r\\n            // Pulls the max amount of long options and sends to option contract.\\r\\n            _transferFromCallerToReceiver(\\r\\n                address(optionToken),\\r\\n                CoreLib.getProportionalLongOptions(optionToken, proportional),\\r\\n                address(optionToken)\\r\\n            );\\r\\n        } else {\\r\\n            // If not expired, transfer all redeem in balance.\\r\\n            IERC20(redeem).safeTransfer(address(optionToken), short);\\r\\n        }\\r\\n        uint outputUnderlyings;\\r\\n        if(proportional > 0) {\\r\\n            (, ,  outputUnderlyings) = optionToken.closeOptions(address(this));\\r\\n        }\\r\\n        return outputUnderlyings;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Multi-step operation to exercise options.\\r\\n     *          1. Transfer balanceOf `strike` token to option contract.\\r\\n     *          2. Transfer `amount` of options to exercise to option contract.\\r\\n     *          3. Invoke `exerciseOptions()` and specify `getCaller()` as the receiver.\\r\\n     * @dev     If the balanceOf `strike` and `amount` of options are not in correct proportions, call will fail.\\r\\n     * @param   optionToken The option to exercise.\\r\\n     * @param   amount The quantity of options to exercise.\\r\\n     */\\r\\n    function _exerciseOptions(IOption optionToken, uint256 amount)\\r\\n        internal\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address strike = optionToken.getStrikeTokenAddress();\\r\\n        _transferBalanceToReceiver(strike, address(optionToken));\\r\\n        IERC20(address(optionToken)).safeTransfer(address(optionToken), amount);\\r\\n        return optionToken.exerciseOptions(getCaller(), amount, new bytes(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Transfers this contract's balance of Redeem tokens and invokes the redemption function.\\r\\n     * @param   optionToken The optionToken to redeem, not the redeem token itself.\\r\\n     */\\r\\n    function _redeemOptions(IOption optionToken) internal returns (uint256) {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        _transferBalanceToReceiver(redeem, address(optionToken));\\r\\n        return optionToken.redeemStrikeTokens(getCaller());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Utility function to transfer this contract's balance of `token` to `receiver`.\\r\\n     * @param   token The token to transfer.\\r\\n     * @param   receiver The address that receives the token.\\r\\n     * @return  Returns the quantity of `token` transferred.\\r\\n     */\\r\\n    function _transferBalanceToReceiver(address token, address receiver)\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 quantity = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).safeTransfer(receiver, quantity);\\r\\n        return quantity;\\r\\n    }\\r\\n\\r\\n    // ===== Fallback =====\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(_msgSender() == address(_weth)); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Weth contract address.\\r\\n     */\\r\\n    function getWeth() public view override returns (IWETH) {\\r\\n        return _weth;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the state variable `_CALLER` in the Primitive Router.\\r\\n     */\\r\\n    function getCaller() public view override returns (address) {\\r\\n        return _primitiveRouter.getCaller();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns the Primitive Router contract address.\\r\\n     */\\r\\n    function getPrimitiveRouter() public view override returns (IPrimitiveRouter) {\\r\\n        return _primitiveRouter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Returns whether or not `spender` is approved to spend `token`, from this contract.\\r\\n     */\\r\\n    function isApproved(address token, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _approved[token][spender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc5b728832a2a155cf8d903755114d47ad698eedb2940efd2b0b46f0cc74c4b5b\"},\"contracts/connectors/PrimitiveCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Core\\r\\n * @author  Primitive\\r\\n * @notice  A Connector with Ether abstractions for Primitive Option tokens.\\r\\n * @dev     @primitivefi/v1-connectors@v2.0.0\\r\\n */\\r\\n\\r\\n// Open Zeppelin\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n// Primitive\\r\\nimport {CoreLib, SafeMath} from \\\"../libraries/CoreLib.sol\\\";\\r\\nimport {IPrimitiveCore, IERC20Permit, IOption} from \\\"../interfaces/IPrimitiveCore.sol\\\";\\r\\nimport {PrimitiveConnector} from \\\"./PrimitiveConnector.sol\\\";\\r\\n\\r\\ncontract PrimitiveCore is PrimitiveConnector, IPrimitiveCore, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    event Initialized(address indexed from); // Emmitted on deployment\\r\\n    event Minted(\\r\\n        address indexed from,\\r\\n        address indexed option,\\r\\n        uint256 longQuantity,\\r\\n        uint256 shortQuantity\\r\\n    );\\r\\n    event Exercised(address indexed from, address indexed option, uint256 quantity);\\r\\n    event Redeemed(address indexed from, address indexed option, uint256 quantity);\\r\\n    event Closed(address indexed from, address indexed option, uint256 quantity);\\r\\n\\r\\n    // ===== Constructor =====\\r\\n\\r\\n    constructor(address weth_, address primitiveRouter_)\\r\\n        public\\r\\n        PrimitiveConnector(weth_, primitiveRouter_)\\r\\n    {\\r\\n        emit Initialized(_msgSender());\\r\\n    }\\r\\n\\r\\n    // ===== Weth Abstraction =====\\r\\n\\r\\n    /**\\r\\n     * @dev     Mints msg.value quantity of options and \\\"quote\\\" (option parameter) quantity of redeem tokens.\\r\\n     * @notice  This function is for options that have WETH as the underlying asset.\\r\\n     * @param   optionToken The address of the option token to mint.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function safeMintWithETH(IOption optionToken)\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        require(msg.value > 0, \\\"PrimitiveCore: ERR_ZERO\\\");\\r\\n        address caller = getCaller();\\r\\n        _depositETH(); // Deposits `msg.value` to Weth contract.\\r\\n        (uint256 long, uint256 short) = _mintOptionsToReceiver(optionToken, caller);\\r\\n        emit Minted(caller, address(optionToken), long, short);\\r\\n        return (long, short);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Mints \\\"amount\\\" quantity of options and \\\"quote\\\" (option parameter) quantity of redeem tokens.\\r\\n     * @notice  This function is for options that have an EIP2612 (permit) enabled token as the underlying asset.\\r\\n     * @param   optionToken The address of the option token to mint.\\r\\n     * @param   amount The quantity of options to mint.\\r\\n     * @param   deadline The timestamp which expires the `permit` call.\\r\\n     * @return  (uint, uint) Returns the (long, short) option tokens minted\\r\\n     */\\r\\n    function safeMintWithPermit(\\r\\n        IOption optionToken,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        // Permit minting using the caller's underlying tokens.\\r\\n        IERC20Permit(optionToken.getUnderlyingTokenAddress()).permit(\\r\\n            getCaller(),\\r\\n            address(_primitiveRouter),\\r\\n            amount,\\r\\n            deadline,\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        (uint256 long, uint256 short) = _mintOptionsFromCaller(optionToken, amount);\\r\\n        emit Minted(getCaller(), address(optionToken), long, short);\\r\\n        return (long, short);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Swaps msg.value of strikeTokens (ethers) to underlyingTokens.\\r\\n     *          Uses the strike ratio as the exchange rate. Strike ratio = base / quote.\\r\\n     *          Msg.value (quote units) * base / quote = base units (underlyingTokens) to withdraw.\\r\\n     * @notice  This function is for options with WETH as the strike asset.\\r\\n     *          Burns option tokens, accepts ethers, and pushes out underlyingTokens.\\r\\n     * @param   optionToken The address of the option contract.\\r\\n     */\\r\\n    function safeExerciseWithETH(IOption optionToken)\\r\\n        public\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        require(msg.value > 0, \\\"PrimitiveCore: ZERO\\\");\\r\\n\\r\\n        _depositETH(); // Deposits `msg.value` to Weth contract.\\r\\n\\r\\n        uint256 long = CoreLib.getProportionalLongOptions(optionToken, msg.value);\\r\\n        _transferFromCaller(address(optionToken), long); // Pull option tokens.\\r\\n\\r\\n        // Pushes option tokens and weth (strike asset), receives underlying tokens.\\r\\n        emit Exercised(getCaller(), address(optionToken), long);\\r\\n        return _exerciseOptions(optionToken, long);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Swaps strikeTokens to underlyingTokens, WETH, which is converted to ethers before withdrawn.\\r\\n     *          Uses the strike ratio as the exchange rate. Strike ratio = base / quote.\\r\\n     * @notice  This function is for options with WETH as the underlying asset.\\r\\n     *          Burns option tokens, pulls strikeTokens, and pushes out ethers.\\r\\n     * @param   optionToken The address of the option contract.\\r\\n     * @param   exerciseQuantity Quantity of optionTokens to exercise.\\r\\n     */\\r\\n    function safeExerciseForETH(IOption optionToken, uint256 exerciseQuantity)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        address underlying = optionToken.getUnderlyingTokenAddress();\\r\\n        address strike = optionToken.getStrikeTokenAddress();\\r\\n        uint256 strikeQuantity =\\r\\n            CoreLib.getProportionalShortOptions(optionToken, exerciseQuantity);\\r\\n        // Pull options and strike assets from `getCaller()` and send to option contract.\\r\\n        _transferFromCallerToReceiver(\\r\\n            address(optionToken),\\r\\n            exerciseQuantity,\\r\\n            address(optionToken)\\r\\n        );\\r\\n        _transferFromCallerToReceiver(strike, strikeQuantity, address(optionToken));\\r\\n\\r\\n        // Release underlying tokens by invoking `exerciseOptions()`\\r\\n        (uint256 strikesPaid, uint256 options) =\\r\\n            optionToken.exerciseOptions(address(this), exerciseQuantity, new bytes(0));\\r\\n        _withdrawETH(); // Unwraps this contract's balance of Weth and sends to `getCaller()`.\\r\\n        emit Exercised(getCaller(), address(optionToken), exerciseQuantity);\\r\\n        return (strikesPaid, options);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Burns redeem tokens to withdraw strike tokens (ethers) at a 1:1 ratio.\\r\\n     * @notice  This function is for options that have WETH as the strike asset.\\r\\n     *          Converts WETH to ethers, and withdraws ethers to the receiver address.\\r\\n     * @param   optionToken The address of the option contract.\\r\\n     * @param   redeemQuantity The quantity of redeemTokens to burn.\\r\\n     */\\r\\n    function safeRedeemForETH(IOption optionToken, uint256 redeemQuantity)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Require the strike token to be Weth.\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        // Pull redeem tokens from `getCaller()` and send to option contract.\\r\\n        _transferFromCallerToReceiver(redeem, redeemQuantity, address(optionToken));\\r\\n        uint256 short = optionToken.redeemStrikeTokens(address(this));\\r\\n        _withdrawETH(); // Unwraps this contract's balance of Weth and sends to `getCaller()`.\\r\\n        emit Redeemed(getCaller(), address(optionToken), redeemQuantity);\\r\\n        return short;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens (ethers).\\r\\n     * @notice This function is for options with WETH as the underlying asset.\\r\\n     * WETH underlyingTokens are converted to ethers before being sent to receiver.\\r\\n     * The redeemTokens to burn is equal to the optionTokens * strike ratio.\\r\\n     * inputOptions = inputRedeems / strike ratio = outUnderlyings\\r\\n     * @param optionToken The address of the option contract.\\r\\n     * @param closeQuantity Quantity of optionTokens to burn and an input to calculate how many redeems to burn.\\r\\n     */\\r\\n    function safeCloseForETH(IOption optionToken, uint256 closeQuantity)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRegistered(optionToken)\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        address redeem = optionToken.redeemToken();\\r\\n        uint256 short = CoreLib.getProportionalShortOptions(optionToken, closeQuantity);\\r\\n        // Pull redeem tokens from `getCaller()` and send to option contract.\\r\\n        _transferFromCallerToReceiver(redeem, short, address(optionToken));\\r\\n        // Pull options if not expired, and send to option contract.\\r\\n        if (optionToken.getExpiryTime() >= now) {\\r\\n            _transferFromCallerToReceiver(\\r\\n                address(optionToken),\\r\\n                closeQuantity,\\r\\n                address(optionToken)\\r\\n            );\\r\\n        }\\r\\n        // Release underlyingTokens by invoking `closeOptions()`\\r\\n        (uint256 inputRedeems, uint256 inputOptions, uint256 outUnderlyings) =\\r\\n            optionToken.closeOptions(address(this));\\r\\n\\r\\n        _withdrawETH(); // Unwraps this contract's balance of Weth and sends to `getCaller()`.\\r\\n        emit Closed(getCaller(), address(optionToken), closeQuantity);\\r\\n        return (inputRedeems, inputOptions, outUnderlyings);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf648972db2ef9c839068c322a9c7852f308ae16607bc6c8bacaa1c308e112eea\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC20Permit {\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x447ed8e80f3cb568784903cf3c009c418e4668d6b27b0dce6e6f739211013329\"},\"contracts/interfaces/IPrimitiveConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {IPrimitiveRouter} from \\\"../interfaces/IPrimitiveRouter.sol\\\";\\r\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveConnector {\\r\\n    // ===== External =====\\r\\n\\r\\n    function checkApproval(address token, address spender) external returns (bool);\\r\\n\\r\\n    // ===== View =====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getPrimitiveRouter() external view returns (IPrimitiveRouter);\\r\\n\\r\\n    function isApproved(address token, address spender) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x78a5179263ac7372dce22475449513853adae2e09c18de19c8e56ee3b81bf3a2\"},\"contracts/interfaces/IPrimitiveCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {IOption} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\r\\n\\r\\ninterface IPrimitiveCore {\\r\\n    // ===== External =====\\r\\n\\r\\n    function safeMintWithETH(IOption optionToken)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function safeMintWithPermit(\\r\\n        IOption optionToken,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeExerciseWithETH(IOption optionToken)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function safeExerciseForETH(IOption optionToken, uint256 exerciseQuantity)\\r\\n        external\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeemForETH(IOption optionToken, uint256 redeemQuantity)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function safeCloseForETH(IOption optionToken, uint256 closeQuantity)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x498fd6063dcb0d997dbe8c32c25eea89571d465d427feb5e8668520c3cb4839f\"},\"contracts/interfaces/IPrimitiveRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IOption,\\r\\n    IERC20\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport {\\r\\n    IRegistry\\r\\n} from \\\"@primitivefi/contracts/contracts/option/interfaces/IRegistry.sol\\\";\\r\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\r\\n\\r\\ninterface IPrimitiveRouter {\\r\\n    // ===== Admin =====\\r\\n\\r\\n    function halt() external;\\r\\n\\r\\n    // ===== Registration =====\\r\\n    function setRegisteredOptions(address[] calldata optionAddresses)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function setRegisteredConnectors(\\r\\n        address[] calldata connectors,\\r\\n        bool[] calldata isValid\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Operations =====\\r\\n\\r\\n    function transferFromCaller(address token, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFromCallerToReceiver(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address receiver\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ===== Execution =====\\r\\n\\r\\n    function executeCall(address connector, bytes calldata params) external payable;\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getWeth() external view returns (IWETH);\\r\\n\\r\\n    function getRoute() external view returns (address);\\r\\n\\r\\n    function getCaller() external view returns (address);\\r\\n\\r\\n    function getRegistry() external view returns (IRegistry);\\r\\n\\r\\n    function getRegisteredOption(address option) external view returns (bool);\\r\\n\\r\\n    function getRegisteredConnector(address connector) external view returns (bool);\\r\\n\\r\\n    function apiVersion() external pure returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xaac255f6b4eafe624838014095e6b86ccf32e1993df339455cf662b9a0c1b277\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x37c262ad0aadf51acdff4ee5711841e0beb6030f9d750e23943b2d759144af0c\"},\"contracts/libraries/CoreLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Copyright 2021 Primitive Finance\\r\\n//\\r\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\\r\\n// this software and associated documentation files (the \\\"Software\\\"), to deal in\\r\\n// the Software without restriction, including without limitation the rights to\\r\\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\r\\n// of the Software, and to permit persons to whom the Software is furnished to do\\r\\n// so, subject to the following conditions:\\r\\n//\\r\\n// The above copyright notice and this permission notice shall be included in all\\r\\n// copies or substantial portions of the Software.\\r\\n//\\r\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n// SOFTWARE.\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Swaps Lib\\r\\n * @author  Primitive\\r\\n * @notice  Library for calculating different proportions of long and short option tokens.\\r\\n * @dev     @primitivefi/v1-connectors@2.0.0\\r\\n */\\r\\n\\r\\nimport {IOption} from \\\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary CoreLib {\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the proportional quantity of long option tokens per short option token.\\r\\n     * @notice  For each long option token, there is quoteValue / baseValue quantity of short option tokens.\\r\\n     * @param   optionToken The Option to use to calculate proportional amounts. Each option has different proportions.\\r\\n     * @param   short The amount of short options used to calculate the proportional amount of long option tokens.\\r\\n     * @return  The proportional amount of long option tokens based on `short`.\\r\\n     */\\r\\n    function getProportionalLongOptions(IOption optionToken, uint256 short)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return short.mul(optionToken.getBaseValue()).div(optionToken.getQuoteValue());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Calculates the proportional quantity of short option tokens per long option token.\\r\\n     * @notice  For each short option token, there is baseValue / quoteValue quantity of long option tokens.\\r\\n     * @param   optionToken The Option to use to calculate proportional amounts. Each option has different proportions.\\r\\n     * @param   long The amount of long options used to calculate the proportional amount of short option tokens.\\r\\n     * @return  The proportional amount of short option tokens based on `long`.\\r\\n     */\\r\\n    function getProportionalShortOptions(IOption optionToken, uint256 long)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return long.mul(optionToken.getQuoteValue()).div(optionToken.getBaseValue());\\r\\n    }\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address token0, address token1)\\r\\n    {\\r\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3fc6c02bd467a5183cc2ac0ae5e7d32a265e2d41a9e0ae62cb879bfb1c002dd8\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028ae380380620028ae833981810160405260408110156200003757600080fd5b508051602090910151600080546001600160a01b038085166001600160a01b031992831617909255600180549284169290911691909117905581816200008782826001600160e01b03620000df16565b5050600160035550620000a26001600160e01b036200017016565b6001600160a01b03167f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e660405160405180910390a250506200053d565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205460ff1662000167576200013682600019856001600160a01b03166200017460201b62001bdb179092919060201c565b6001600160a01b038084166000908152600260209081526040808320938616835292905220805460ff191660011790555b50600192915050565b3390565b801580620001fe575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620001ce57600080fd5b505afa158015620001e3573d6000803e3d6000fd5b505050506040513d6020811015620001fa57600080fd5b5051155b6200023b5760405162461bcd60e51b8152600401808060200182810382526036815260200180620028786036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002939185916200029816565b505050565b6060620002f4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200035460201b62002080179092919060201c565b80519091501562000293578080602001905160208110156200031557600080fd5b5051620002935760405162461bcd60e51b815260040180806020018281038252602a8152602001806200284e602a913960400191505060405180910390fd5b60606200036e84846000856001600160e01b036200037616565b949350505050565b60606200038c856001600160e01b036200053716565b620003de576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106200041f5780518252601f199092019160209182019101620003fe565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000483576040519150601f19603f3d011682016040523d82523d6000602084013e62000488565b606091505b509150915081156200049e5791506200036e9050565b805115620004af5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620004fb578181015183820152602001620004e1565b50505050905090810190601f168015620005295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3b151590565b612301806200054d6000396000f3fe6080604052600436106100a05760003560e01c8063325d643511610064578063325d6435146102135780633c5213de146102395780635cda4b4114610284578063882c3c22146102d3578063a389783e146102f9578063ab470f0514610334576100cb565b80630e10a66d146100d0578063107c279f1461013d57806312eded461461016e578063161a9a37146101c557806327fb8380146101fe576100cb565b366100cb576000546001600160a01b03166100b9610349565b6001600160a01b0316146100c957fe5b005b600080fd5b3480156100dc57600080fd5b50610124600480360360c08110156100f357600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a0013561034e565b6040805192835260208301919091528051918290030190f35b34801561014957600080fd5b506101526105e1565b604080516001600160a01b039092168252519081900360200190f35b34801561017a57600080fd5b506101a76004803603604081101561019157600080fd5b506001600160a01b0381351690602001356105f0565b60408051938452602084019290925282820152519081900360600190f35b3480156101d157600080fd5b50610124600480360360408110156101e857600080fd5b506001600160a01b038135169060200135610904565b34801561020a57600080fd5b50610152610c93565b6101246004803603602081101561022957600080fd5b50356001600160a01b0316610ca2565b34801561024557600080fd5b506102726004803603604081101561025c57600080fd5b506001600160a01b038135169060200135610e85565b60408051918252519081900360200190f35b34801561029057600080fd5b506102bf600480360360408110156102a757600080fd5b506001600160a01b03813581169160200135166110e4565b604080519115158252519081900360200190f35b610124600480360360208110156102e957600080fd5b50356001600160a01b031661116a565b34801561030557600080fd5b506102bf6004803603604081101561031c57600080fd5b506001600160a01b0381358116916020013516611352565b34801561034057600080fd5b50610152611380565b335b90565b60008060026003541415610397576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808c16600483015291518b9392909216916394669bf591602480820192602092909190829003018186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d602081101561041657600080fd5b5051610457576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b886001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561049057600080fd5b505afa1580156104a4573d6000803e3d6000fd5b505050506040513d60208110156104ba57600080fd5b50516001600160a01b031663d505accf6104d2611380565b600154604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482018c9052606482018b905260ff8a16608483015260a4820189905260c482018890525160e480830192600092919082900301818387803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b5050505060008061056e8b8b6113f6565b915091508a6001600160a01b0316610584611380565b6001600160a01b03167f03f17d66ad3bf18e9412eb06582908831508cdb9b8da9cddb1431f645a5b86328484604051808381526020018281526020019250505060405180910390a36001600355909a909950975050505050505050565b6000546001600160a01b031690565b60008060006002600354141561063b576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380891660048301529151889392909216916394669bf591602480820192602092909190829003018186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d60208110156106ba57600080fd5b50516106fb576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b6000866001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d602081101561076057600080fd5b505190506000610770888861152b565b905061077d82828a611624565b5042886001600160a01b03166325cb5bc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b857600080fd5b505afa1580156107cc573d6000803e3d6000fd5b505050506040513d60208110156107e257600080fd5b5051106107f6576107f488888a611624565b505b60008060008a6001600160a01b03166383499805306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050606060405180830381600087803b15801561085357600080fd5b505af1158015610867573d6000803e3d6000fd5b505050506040513d606081101561087d57600080fd5b5080516020820151604090920151909450909250905061089b6116ca565b508a6001600160a01b03166108ae611380565b6001600160a01b03167f62d095e2c4513ab737ede7cbd30334eccb10424cbc543ebb5c458b5174cddcd58c6040518082815260200191505060405180910390a36001600355919a90995090975095505050505050565b6000806002600354141561094d576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380881660048301529151879392909216916394669bf591602480820192602092909190829003018186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d60208110156109cc57600080fd5b5051610a0d576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b6000856001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4857600080fd5b505afa158015610a5c573d6000803e3d6000fd5b505050506040513d6020811015610a7257600080fd5b50516040805163a1a4076160e01b815290519192506000916001600160a01b0389169163a1a40761916004808301926020929190829003018186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d6020811015610ae457600080fd5b505190506000610af4888861152b565b9050610b0188888a611624565b50610b0d82828a611624565b506040805160008082526020820190925281906001600160a01b038b169063787eae309030908c906040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b9f578181015183820152602001610b87565b50505050905090810190601f168015610bcc5780820380516001836020036101000a031916815260200191505b509450505050506040805180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b505050506040513d6040811015610c1657600080fd5b5080516020909101519092509050610c2c6116ca565b50896001600160a01b0316610c3f611380565b6001600160a01b03167f3cea488905b3fa93b6aaaf21e913395e548b6e79dbe6099a527f6aa8059b23d18b6040518082815260200191505060405180910390a3600160035590999098509650505050505050565b6001546001600160a01b031690565b60008060026003541415610ceb576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b5051610dab576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b60003411610df6576040805162461bcd60e51b81526020600482015260136024820152725072696d6974697665436f72653a205a45524f60681b604482015290519081900360640190fd5b610dfe61186a565b506000610e0b85346118df565b9050610e17858261198d565b50846001600160a01b0316610e2a611380565b6001600160a01b03167f3cea488905b3fa93b6aaaf21e913395e548b6e79dbe6099a527f6aa8059b23d1836040518082815260200191505060405180910390a3610e748582611a2a565b600160035590969095509350505050565b600060026003541415610ecd576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b5051610f8d576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b6000846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d6020811015610ff257600080fd5b50519050611001818587611624565b5060408051635e86929d60e01b815230600482015290516000916001600160a01b03881691635e86929d9160248082019260209290919082900301818787803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050506040513d602081101561107757600080fd5b505190506110836116ca565b50856001600160a01b0316611096611380565b6001600160a01b03167f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc876040518082815260200191505060405180910390a3600160035595945050505050565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205460ff166111605761112f6001600160a01b0384168360001963ffffffff611bdb16565b6001600160a01b038084166000908152600260209081526040808320938616835292905220805460ff191660011790555b5060015b92915050565b600080600260035414156111b3576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b15801561120857600080fd5b505afa15801561121c573d6000803e3d6000fd5b505050506040513d602081101561123257600080fd5b5051611273576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b600034116112c8576040805162461bcd60e51b815260206004820152601760248201527f5072696d6974697665436f72653a204552525f5a45524f000000000000000000604482015290519081900360640190fd5b60006112d2611380565b90506112dc61186a565b506000806112ea8784611cf3565b91509150866001600160a01b0316836001600160a01b03167f03f17d66ad3bf18e9412eb06582908831508cdb9b8da9cddb1431f645a5b86328484604051808381526020018281526020019250505060405180910390a3600160035590969095509350505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001546040805163ab470f0560e01b815290516000926001600160a01b03169163ab470f05916004808301926020929190829003018186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d60208110156113ef57600080fd5b5051905090565b60008060008311611439576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b6114a8846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561147557600080fd5b505afa158015611489573d6000803e3d6000fd5b505050506040513d602081101561149f57600080fd5b50518486611624565b5060408051633ea6b5f160e21b815230600482015281516001600160a01b0387169263fa9ad7c492602480820193918290030181600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b505050506040513d604081101561151757600080fd5b508051602090910151909590945092505050565b600061161d836001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b505160408051627f0cfd60e11b81529051611611916001600160a01b0388169162fe19fa91600480820192602092909190829003018186803b1580156115d857600080fd5b505afa1580156115ec573d6000803e3d6000fd5b505050506040513d602081101561160257600080fd5b5051859063ffffffff611db116565b9063ffffffff611e0a16565b9392505050565b600082156116c0576001546040805163a2e49f1760e01b81526001600160a01b0387811660048301526024820187905285811660448301529151919092169163a2e49f179160648083019260209291908290030181600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d60208110156116b457600080fd5b506001915061161d9050565b5060009392505050565b60008054604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b505190508015611862576000805460408051632e1a7d4d60e01b81526004810185905290516001600160a01b0390921692632e1a7d4d9260248084019382900301818387803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b5050505060006117b3611380565b6040516001600160a01b0391909116908390600081818185875af1925050503d80600081146117fe576040519150601f19603f3d011682016040523d82523d6000602084013e611803565b606091505b5050905080611859576040805162461bcd60e51b815260206004820152601c60248201527f436f6e6e6563746f723a204552525f53454e44494e475f455448455200000000604482015290519081900360640190fd5b915061034b9050565b600191505090565b600034156118d9576000805460408051630d0e30db60e41b815290516001600160a01b039092169263d0e30db0923492600480820193929182900301818588803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b50505050506001905061034b565b50600090565b600061161d836001600160a01b031662fe19fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d602081101561194657600080fd5b5051604080516316b2542760e31b81529051611611916001600160a01b0388169163b592a13891600480820192602092909190829003018186803b1580156115d857600080fd5b60008115611a21576001546040805163a3e3808f60e01b81526001600160a01b038681166004830152602482018690529151919092169163a3e3808f9160448083019260209291908290030181600087803b1580156119eb57600080fd5b505af11580156119ff573d6000803e3d6000fd5b505050506040513d6020811015611a1557600080fd5b50600191506111649050565b50600092915050565b6000806000846001600160a01b031663a1a407616040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d6020811015611a9257600080fd5b50519050611aa08186611e4c565b50611abb6001600160a01b038616868663ffffffff611edf16565b846001600160a01b031663787eae30611ad2611380565b604080516000808252602082019092528891506040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b4f578181015183820152602001611b37565b50505050905090810190601f168015611b7c5780820380516001836020036101000a031916815260200191505b509450505050506040805180830381600087803b158015611b9c57600080fd5b505af1158015611bb0573d6000803e3d6000fd5b505050506040513d6040811015611bc657600080fd5b50805160209091015190969095509350505050565b801580611c61575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611c3357600080fd5b505afa158015611c47573d6000803e3d6000fd5b505050506040513d6020811015611c5d57600080fd5b5051155b611c9c5760405162461bcd60e51b81526004018080602001828103825260368152602001806122966036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611cee908490611f2d565b505050565b6000806000846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3157600080fd5b505afa158015611d45573d6000803e3d6000fd5b505050506040513d6020811015611d5b57600080fd5b50519050611d698186611e4c565b5060408051633ea6b5f160e21b81526001600160a01b03868116600483015282519088169263fa9ad7c492602480820193918290030181600087803b158015611b9c57600080fd5b600082611dc057506000611164565b82820282848281611dcd57fe5b041461161d5760405162461bcd60e51b815260040180806020018281038252602181526020018061222b6021913960400191505060405180910390fd5b600061161d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611fde565b604080516370a0823160e01b8152306004820152905160009182916001600160a01b038616916370a08231916024808301926020929190829003018186803b158015611e9757600080fd5b505afa158015611eab573d6000803e3d6000fd5b505050506040513d6020811015611ec157600080fd5b5051905061161d6001600160a01b038516848363ffffffff611edf16565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611cee9084905b6060611f82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120809092919063ffffffff16565b805190915015611cee57808060200190516020811015611fa157600080fd5b5051611cee5760405162461bcd60e51b815260040180806020018281038252602a81526020018061226c602a913960400191505060405180910390fd5b6000818361206a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561202f578181015183820152602001612017565b50505050905090810190601f16801561205c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161207657fe5b0495945050505050565b606061208f8484600085612097565b949350505050565b60606120a285612204565b6120f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106121325780518252601f199092019160209182019101612113565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612194576040519150601f19603f3d011682016040523d82523d6000602084013e612199565b606091505b509150915081156121ad57915061208f9050565b8051156121bd5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561202f578181015183820152602001612017565b3b15159056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775072696d697469766553776170733a204556494c5f4f5054494f4e00000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122099450cd063dc19e336130e56f5e7a3bd86dcfdec71b05dba89bee41d1292c9d764736f6c634300060200335361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c8063325d643511610064578063325d6435146102135780633c5213de146102395780635cda4b4114610284578063882c3c22146102d3578063a389783e146102f9578063ab470f0514610334576100cb565b80630e10a66d146100d0578063107c279f1461013d57806312eded461461016e578063161a9a37146101c557806327fb8380146101fe576100cb565b366100cb576000546001600160a01b03166100b9610349565b6001600160a01b0316146100c957fe5b005b600080fd5b3480156100dc57600080fd5b50610124600480360360c08110156100f357600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a0013561034e565b6040805192835260208301919091528051918290030190f35b34801561014957600080fd5b506101526105e1565b604080516001600160a01b039092168252519081900360200190f35b34801561017a57600080fd5b506101a76004803603604081101561019157600080fd5b506001600160a01b0381351690602001356105f0565b60408051938452602084019290925282820152519081900360600190f35b3480156101d157600080fd5b50610124600480360360408110156101e857600080fd5b506001600160a01b038135169060200135610904565b34801561020a57600080fd5b50610152610c93565b6101246004803603602081101561022957600080fd5b50356001600160a01b0316610ca2565b34801561024557600080fd5b506102726004803603604081101561025c57600080fd5b506001600160a01b038135169060200135610e85565b60408051918252519081900360200190f35b34801561029057600080fd5b506102bf600480360360408110156102a757600080fd5b506001600160a01b03813581169160200135166110e4565b604080519115158252519081900360200190f35b610124600480360360208110156102e957600080fd5b50356001600160a01b031661116a565b34801561030557600080fd5b506102bf6004803603604081101561031c57600080fd5b506001600160a01b0381358116916020013516611352565b34801561034057600080fd5b50610152611380565b335b90565b60008060026003541415610397576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b03808c16600483015291518b9392909216916394669bf591602480820192602092909190829003018186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d602081101561041657600080fd5b5051610457576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b886001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561049057600080fd5b505afa1580156104a4573d6000803e3d6000fd5b505050506040513d60208110156104ba57600080fd5b50516001600160a01b031663d505accf6104d2611380565b600154604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482018c9052606482018b905260ff8a16608483015260a4820189905260c482018890525160e480830192600092919082900301818387803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b5050505060008061056e8b8b6113f6565b915091508a6001600160a01b0316610584611380565b6001600160a01b03167f03f17d66ad3bf18e9412eb06582908831508cdb9b8da9cddb1431f645a5b86328484604051808381526020018281526020019250505060405180910390a36001600355909a909950975050505050505050565b6000546001600160a01b031690565b60008060006002600354141561063b576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380891660048301529151889392909216916394669bf591602480820192602092909190829003018186803b15801561069057600080fd5b505afa1580156106a4573d6000803e3d6000fd5b505050506040513d60208110156106ba57600080fd5b50516106fb576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b6000866001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d602081101561076057600080fd5b505190506000610770888861152b565b905061077d82828a611624565b5042886001600160a01b03166325cb5bc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b857600080fd5b505afa1580156107cc573d6000803e3d6000fd5b505050506040513d60208110156107e257600080fd5b5051106107f6576107f488888a611624565b505b60008060008a6001600160a01b03166383499805306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050606060405180830381600087803b15801561085357600080fd5b505af1158015610867573d6000803e3d6000fd5b505050506040513d606081101561087d57600080fd5b5080516020820151604090920151909450909250905061089b6116ca565b508a6001600160a01b03166108ae611380565b6001600160a01b03167f62d095e2c4513ab737ede7cbd30334eccb10424cbc543ebb5c458b5174cddcd58c6040518082815260200191505060405180910390a36001600355919a90995090975095505050505050565b6000806002600354141561094d576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380881660048301529151879392909216916394669bf591602480820192602092909190829003018186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d60208110156109cc57600080fd5b5051610a0d576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b6000856001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4857600080fd5b505afa158015610a5c573d6000803e3d6000fd5b505050506040513d6020811015610a7257600080fd5b50516040805163a1a4076160e01b815290519192506000916001600160a01b0389169163a1a40761916004808301926020929190829003018186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050506040513d6020811015610ae457600080fd5b505190506000610af4888861152b565b9050610b0188888a611624565b50610b0d82828a611624565b506040805160008082526020820190925281906001600160a01b038b169063787eae309030908c906040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b9f578181015183820152602001610b87565b50505050905090810190601f168015610bcc5780820380516001836020036101000a031916815260200191505b509450505050506040805180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b505050506040513d6040811015610c1657600080fd5b5080516020909101519092509050610c2c6116ca565b50896001600160a01b0316610c3f611380565b6001600160a01b03167f3cea488905b3fa93b6aaaf21e913395e548b6e79dbe6099a527f6aa8059b23d18b6040518082815260200191505060405180910390a3600160035590999098509650505050505050565b6001546001600160a01b031690565b60008060026003541415610ceb576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b158015610d4057600080fd5b505afa158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b5051610dab576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b60003411610df6576040805162461bcd60e51b81526020600482015260136024820152725072696d6974697665436f72653a205a45524f60681b604482015290519081900360640190fd5b610dfe61186a565b506000610e0b85346118df565b9050610e17858261198d565b50846001600160a01b0316610e2a611380565b6001600160a01b03167f3cea488905b3fa93b6aaaf21e913395e548b6e79dbe6099a527f6aa8059b23d1836040518082815260200191505060405180910390a3610e748582611a2a565b600160035590969095509350505050565b600060026003541415610ecd576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d6020811015610f4c57600080fd5b5051610f8d576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b6000846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d6020811015610ff257600080fd5b50519050611001818587611624565b5060408051635e86929d60e01b815230600482015290516000916001600160a01b03881691635e86929d9160248082019260209290919082900301818787803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050506040513d602081101561107757600080fd5b505190506110836116ca565b50856001600160a01b0316611096611380565b6001600160a01b03167f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc876040518082815260200191505060405180910390a3600160035595945050505050565b6001600160a01b03808316600090815260026020908152604080832093851683529290529081205460ff166111605761112f6001600160a01b0384168360001963ffffffff611bdb16565b6001600160a01b038084166000908152600260209081526040808320938616835292905220805460ff191660011790555b5060015b92915050565b600080600260035414156111b3576040805162461bcd60e51b815260206004820152601f602482015260008051602061220b833981519152604482015290519081900360640190fd5b6002600355600154604080516394669bf560e01b81526001600160a01b0380871660048301529151869392909216916394669bf591602480820192602092909190829003018186803b15801561120857600080fd5b505afa15801561121c573d6000803e3d6000fd5b505050506040513d602081101561123257600080fd5b5051611273576040805162461bcd60e51b815260206004820152601b602482015260008051602061224c833981519152604482015290519081900360640190fd5b600034116112c8576040805162461bcd60e51b815260206004820152601760248201527f5072696d6974697665436f72653a204552525f5a45524f000000000000000000604482015290519081900360640190fd5b60006112d2611380565b90506112dc61186a565b506000806112ea8784611cf3565b91509150866001600160a01b0316836001600160a01b03167f03f17d66ad3bf18e9412eb06582908831508cdb9b8da9cddb1431f645a5b86328484604051808381526020018281526020019250505060405180910390a3600160035590969095509350505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001546040805163ab470f0560e01b815290516000926001600160a01b03169163ab470f05916004808301926020929190829003018186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d60208110156113ef57600080fd5b5051905090565b60008060008311611439576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b6114a8846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561147557600080fd5b505afa158015611489573d6000803e3d6000fd5b505050506040513d602081101561149f57600080fd5b50518486611624565b5060408051633ea6b5f160e21b815230600482015281516001600160a01b0387169263fa9ad7c492602480820193918290030181600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b505050506040513d604081101561151757600080fd5b508051602090910151909590945092505050565b600061161d836001600160a01b031663b592a1386040518163ffffffff1660e01b815260040160206040518083038186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b505160408051627f0cfd60e11b81529051611611916001600160a01b0388169162fe19fa91600480820192602092909190829003018186803b1580156115d857600080fd5b505afa1580156115ec573d6000803e3d6000fd5b505050506040513d602081101561160257600080fd5b5051859063ffffffff611db116565b9063ffffffff611e0a16565b9392505050565b600082156116c0576001546040805163a2e49f1760e01b81526001600160a01b0387811660048301526024820187905285811660448301529151919092169163a2e49f179160648083019260209291908290030181600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050506040513d60208110156116b457600080fd5b506001915061161d9050565b5060009392505050565b60008054604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d602081101561173f57600080fd5b505190508015611862576000805460408051632e1a7d4d60e01b81526004810185905290516001600160a01b0390921692632e1a7d4d9260248084019382900301818387803b15801561179157600080fd5b505af11580156117a5573d6000803e3d6000fd5b5050505060006117b3611380565b6040516001600160a01b0391909116908390600081818185875af1925050503d80600081146117fe576040519150601f19603f3d011682016040523d82523d6000602084013e611803565b606091505b5050905080611859576040805162461bcd60e51b815260206004820152601c60248201527f436f6e6e6563746f723a204552525f53454e44494e475f455448455200000000604482015290519081900360640190fd5b915061034b9050565b600191505090565b600034156118d9576000805460408051630d0e30db60e41b815290516001600160a01b039092169263d0e30db0923492600480820193929182900301818588803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b50505050506001905061034b565b50600090565b600061161d836001600160a01b031662fe19fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d602081101561194657600080fd5b5051604080516316b2542760e31b81529051611611916001600160a01b0388169163b592a13891600480820192602092909190829003018186803b1580156115d857600080fd5b60008115611a21576001546040805163a3e3808f60e01b81526001600160a01b038681166004830152602482018690529151919092169163a3e3808f9160448083019260209291908290030181600087803b1580156119eb57600080fd5b505af11580156119ff573d6000803e3d6000fd5b505050506040513d6020811015611a1557600080fd5b50600191506111649050565b50600092915050565b6000806000846001600160a01b031663a1a407616040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d6020811015611a9257600080fd5b50519050611aa08186611e4c565b50611abb6001600160a01b038616868663ffffffff611edf16565b846001600160a01b031663787eae30611ad2611380565b604080516000808252602082019092528891506040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b4f578181015183820152602001611b37565b50505050905090810190601f168015611b7c5780820380516001836020036101000a031916815260200191505b509450505050506040805180830381600087803b158015611b9c57600080fd5b505af1158015611bb0573d6000803e3d6000fd5b505050506040513d6040811015611bc657600080fd5b50805160209091015190969095509350505050565b801580611c61575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611c3357600080fd5b505afa158015611c47573d6000803e3d6000fd5b505050506040513d6020811015611c5d57600080fd5b5051155b611c9c5760405162461bcd60e51b81526004018080602001828103825260368152602001806122966036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611cee908490611f2d565b505050565b6000806000846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3157600080fd5b505afa158015611d45573d6000803e3d6000fd5b505050506040513d6020811015611d5b57600080fd5b50519050611d698186611e4c565b5060408051633ea6b5f160e21b81526001600160a01b03868116600483015282519088169263fa9ad7c492602480820193918290030181600087803b158015611b9c57600080fd5b600082611dc057506000611164565b82820282848281611dcd57fe5b041461161d5760405162461bcd60e51b815260040180806020018281038252602181526020018061222b6021913960400191505060405180910390fd5b600061161d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611fde565b604080516370a0823160e01b8152306004820152905160009182916001600160a01b038616916370a08231916024808301926020929190829003018186803b158015611e9757600080fd5b505afa158015611eab573d6000803e3d6000fd5b505050506040513d6020811015611ec157600080fd5b5051905061161d6001600160a01b038516848363ffffffff611edf16565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611cee9084905b6060611f82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120809092919063ffffffff16565b805190915015611cee57808060200190516020811015611fa157600080fd5b5051611cee5760405162461bcd60e51b815260040180806020018281038252602a81526020018061226c602a913960400191505060405180910390fd5b6000818361206a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561202f578181015183820152602001612017565b50505050905090810190601f16801561205c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161207657fe5b0495945050505050565b606061208f8484600085612097565b949350505050565b60606120a285612204565b6120f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106121325780518252601f199092019160209182019101612113565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612194576040519150601f19603f3d011682016040523d82523d6000602084013e612199565b606091505b509150915081156121ad57915061208f9050565b8051156121bd5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561202f578181015183820152602001612017565b3b15159056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775072696d697469766553776170733a204556494c5f4f5054494f4e00000000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122099450cd063dc19e336130e56f5e7a3bd86dcfdec71b05dba89bee41d1292c9d764736f6c63430006020033",
  "devdoc": {
    "methods": {
      "checkApproval(address,address)": {
        "details": "This contract does not hold funds, infinite approvals cannot be exploited for profit.",
        "params": {
          "spender": "The address to allow to spend `token`.",
          "token": "The token to approve spending for."
        }
      },
      "safeCloseForETH(address,uint256)": {
        "details": "Burn optionTokens and redeemTokens to withdraw underlyingTokens (ethers).",
        "params": {
          "closeQuantity": "Quantity of optionTokens to burn and an input to calculate how many redeems to burn.",
          "optionToken": "The address of the option contract."
        }
      },
      "safeExerciseForETH(address,uint256)": {
        "details": "Swaps strikeTokens to underlyingTokens, WETH, which is converted to ethers before withdrawn.         Uses the strike ratio as the exchange rate. Strike ratio = base / quote.",
        "params": {
          "exerciseQuantity": "Quantity of optionTokens to exercise.",
          "optionToken": "The address of the option contract."
        }
      },
      "safeExerciseWithETH(address)": {
        "details": "Swaps msg.value of strikeTokens (ethers) to underlyingTokens.         Uses the strike ratio as the exchange rate. Strike ratio = base / quote.         Msg.value (quote units) * base / quote = base units (underlyingTokens) to withdraw.",
        "params": {
          "optionToken": "The address of the option contract."
        }
      },
      "safeMintWithETH(address)": {
        "details": "Mints msg.value quantity of options and \"quote\" (option parameter) quantity of redeem tokens.",
        "params": {
          "optionToken": "The address of the option token to mint."
        },
        "returns": {
          "_0": "(uint, uint) Returns the (long, short) option tokens minted"
        }
      },
      "safeMintWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Mints \"amount\" quantity of options and \"quote\" (option parameter) quantity of redeem tokens.",
        "params": {
          "amount": "The quantity of options to mint.",
          "deadline": "The timestamp which expires the `permit` call.",
          "optionToken": "The address of the option token to mint."
        },
        "returns": {
          "_0": "(uint, uint) Returns the (long, short) option tokens minted"
        }
      },
      "safeRedeemForETH(address,uint256)": {
        "details": "Burns redeem tokens to withdraw strike tokens (ethers) at a 1:1 ratio.",
        "params": {
          "optionToken": "The address of the option contract.",
          "redeemQuantity": "The quantity of redeemTokens to burn."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "checkApproval(address,address)": {
        "notice": "Approves the `spender` to pull `token` from this contract."
      },
      "getCaller()": {
        "notice": "Returns the state variable `_CALLER` in the Primitive Router."
      },
      "getPrimitiveRouter()": {
        "notice": "Returns the Primitive Router contract address."
      },
      "getWeth()": {
        "notice": "Returns the Weth contract address."
      },
      "isApproved(address,address)": {
        "notice": "Returns whether or not `spender` is approved to spend `token`, from this contract."
      },
      "safeCloseForETH(address,uint256)": {
        "notice": "This function is for options with WETH as the underlying asset. WETH underlyingTokens are converted to ethers before being sent to receiver. The redeemTokens to burn is equal to the optionTokens * strike ratio. inputOptions = inputRedeems / strike ratio = outUnderlyings"
      },
      "safeExerciseForETH(address,uint256)": {
        "notice": "This function is for options with WETH as the underlying asset.         Burns option tokens, pulls strikeTokens, and pushes out ethers."
      },
      "safeExerciseWithETH(address)": {
        "notice": "This function is for options with WETH as the strike asset.         Burns option tokens, accepts ethers, and pushes out underlyingTokens."
      },
      "safeMintWithETH(address)": {
        "notice": "This function is for options that have WETH as the underlying asset."
      },
      "safeMintWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "This function is for options that have an EIP2612 (permit) enabled token as the underlying asset."
      },
      "safeRedeemForETH(address,uint256)": {
        "notice": "This function is for options that have WETH as the strike asset.         Converts WETH to ethers, and withdraws ethers to the receiver address."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3000,
        "contract": "contracts/connectors/PrimitiveCore.sol:PrimitiveCore",
        "label": "_weth",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IWETH)6957"
      },
      {
        "astId": 3002,
        "contract": "contracts/connectors/PrimitiveCore.sol:PrimitiveCore",
        "label": "_primitiveRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPrimitiveRouter)6790"
      },
      {
        "astId": 3008,
        "contract": "contracts/connectors/PrimitiveCore.sol:PrimitiveCore",
        "label": "_approved",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1358,
        "contract": "contracts/connectors/PrimitiveCore.sol:PrimitiveCore",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPrimitiveRouter)6790": {
        "encoding": "inplace",
        "label": "contract IPrimitiveRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)6957": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}